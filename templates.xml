<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="javadoc" deleted="false" description="author name" enabled="true" id="org.eclipse.jdt.ui.templates.author" name="@author">@author ${user}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;b&gt;&lt;/b&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.b_tag" name="&lt;b&gt;">&lt;b&gt;${word_selection}${}&lt;/b&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag" name="&lt;code&gt;">&lt;code&gt;${word_selection}${}&lt;/code&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;i&gt;&lt;/i&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.i_tag" name="&lt;i&gt;">&lt;i&gt;${word_selection}${}&lt;/i&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;pre&gt;&lt;/pre&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.pre_tag" name="&lt;pre&gt;">&lt;pre&gt;${word_selection}${}&lt;/pre&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="active task" enabled="true" id="org.eclipse.mylyn.ide.ui.template.activeTask" name="active_task">${activeTaskPrefix}${activeTaskKey}</template><template autoinsert="false" context="swt-statements" deleted="false" description="add a listener to a Widget " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.addlistener" name="addlistener">${control:var(org.eclipse.swt.widgets.Widget)}.addListener(${type:link(
	SWT.Activate,
	SWT.Arm,
	SWT.Close,
	SWT.Collapse,
	SWT.Deactivate,
	SWT.DefaultSelection,
	SWT.Deiconify,
	SWT.Dispose,
	SWT.DragDetect,
	SWT.EraseItem,
	SWT.Expand,
	SWT.FocusIn,
	SWT.FocusOut,
	SWT.HardKeyDown,
	SWT.HardKeyUp,
	SWT.Help,
	SWT.Hide,
	SWT.Iconify,
	SWT.ImeComposition,
	SWT.KeyDown,
	SWT.KeyUp,
	SWT.MeasureItem,
	SWT.MenuDetect,
	SWT.Modify,
	SWT.MouseDoubleClick,
	SWT.MouseDown,
	SWT.MouseEnter,
	SWT.MouseExit,
	SWT.MouseHover,
	SWT.MouseMove,
	SWT.MouseUp,
	SWT.MouseWheel,
	SWT.Move,
	SWT.Paint,
	SWT.PaintItem,
	SWT.Resize,
	SWT.Selection,
	SWT.SetData,
	SWT.Settings,
	SWT.Show,
	SWT.Traverse,
	SWT.Verify)}, new ${listener:newType(org.eclipse.swt.widgets.Listener)}(){
	public void handleEvent(${event:newType(org.eclipse.swt.widgets.Event)} e) {
		${imp:import(org.eclipse.swt.SWT)}${cursor}				
	}
});</template><template autoinsert="false" context="java-statements" deleted="false" description="add an element to an array" enabled="true" id="org.eclipse.jdt.ui.templates.arrayadd" name="arrayadd">${array_type}[] ${result:newName(array)} = new ${array_type}[${array}.length + 1];
System.arraycopy(${array}, 0, ${result}, 0, ${array}.length);
${result}[${array}.length]= ${var};</template><template autoinsert="false" context="java-statements" deleted="false" description="merge two arrays into one" enabled="true" id="org.eclipse.jdt.ui.templates.arraymerge" name="arraymerge">${array_type}[] ${result:newName(array1)} = new ${array_type}[${array1:array}.length + ${array}.length];
System.arraycopy(${array1}, 0, ${result}, 0, ${array1}.length);
System.arraycopy(${array}, 0, ${result}, ${array1}.length, ${array}.length);</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Browser" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.browser" name="Browser">${browserType:newType(org.eclipse.swt.browser.Browser)} ${browser:newName(org.eclipse.swt.browser.Browser)}= new ${browserType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.MOZILLA)});
${browser}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${browser}.setUrl(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Button" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.button" name="Button">${buttonType:newType(org.eclipse.swt.widgets.Button)} ${button:newName(org.eclipse.swt.widgets.Button)}= new ${buttonType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.PUSH, SWT.TOGGLE, SWT.RADIO, SWT.CHECK, SWT.FLAT)});
${button}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${button}.setText(${word_selection}${});
${button}.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				${listener:link('')}
			}
		});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.events.SelectionAdapter, org.eclipse.swt.events.SelectionEvent)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="dynamic cast" enabled="true" id="org.eclipse.jdt.ui.templates.cast" name="cast">${type} ${new_name} = (${type}) ${name};</template><template autoinsert="false" context="java-statements" deleted="false" description="catch block" enabled="true" id="org.eclipse.jdt.ui.templates.catch" name="catch">catch (${Exception} ${exception_variable_name}) {
	${cursor}// ${todo}: handle exception
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Combo" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.combo" name="Combo">${comboType:newType(org.eclipse.swt.widgets.Combo)} ${combo:newName(org.eclipse.swt.widgets.Combo)}= new ${comboType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.DROP_DOWN, 'SWT.DROP_DOWN | SWT.READ_ONLY')});
${combo}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${combo}.setItems(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Composite with GridLayout" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.gridcomposite" name="Composite">${compositeType:newType(org.eclipse.swt.widgets.Composite)} ${composite:newName(org.eclipse.swt.widgets.Composite)}= new ${compositeType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.BORDER)});
${composite}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${composite}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new DateTime" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.datetime" name="DateTime">${dateType:newType(org.eclipse.swt.widgets.DateTime)} ${dateTime:newName(org.eclipse.swt.widgets.DateTime)}= new ${dateType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.CALENDAR | SWT.SHORT', 'SWT.CALENDAR | SWT.MEDIUM', 'SWT.CALENDAR | SWT.LONG', 'SWT.TIME | SWT.SHORT', 'SWT.TIME | SWT.MEDIUM', 'SWT.TIME | SWT.LONG', 'SWT.DATE | SWT.SHORT', 'SWT.DATE | SWT.MEDIUM', 'SWT.DATE | SWT.LONG')});
${dateTime}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="do while statement" enabled="true" id="org.eclipse.jdt.ui.templates.do" name="do">do {
	${line_selection}${cursor}
} while (${condition:var(boolean)});</template><template autoinsert="false" context="java-statements" deleted="false" description="else block" enabled="true" id="org.eclipse.jdt.ui.templates.else" name="else">else {
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="else if block" enabled="true" id="org.eclipse.jdt.ui.templates.elseif" name="elseif">else if (${condition:var(boolean)}) {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="execute a runnable in the UI thread" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.execute" name="execute">${display:var(org.eclipse.swt.widgets.Display)}.${kind:link(syncExec, asyncExec)}(new ${runnable:newType(java.lang.Runnable)}(){
	public void run(){
		${cursor}
	}
});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ExpandBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.expandbar" name="ExpandBar">${type:newType(org.eclipse.swt.widgets.ExpandBar)} ${bar:newName(org.eclipse.swt.widgets.ExpandBar)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.V_SCROLL, SWT.NONE)});
${bar}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ExpandItem for an ExpandBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.expanditem" name="ExpandItem">${type:newType(org.eclipse.swt.widgets.ExpandItem)} ${item:newName(org.eclipse.swt.widgets.ExpandItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.ExpandBar)}, SWT.NONE);
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${item}.setControl(${control});
${item}.setHeight(${control}.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);</template><template autoinsert="false" context="java-statements" deleted="false" description="$FALL-THROUGH$ marker" enabled="true" id="org.eclipse.jdt.ui.templates.fall-through" name="fall-through">//$$FALL-THROUGH$$</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;false&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_false" name="false">&lt;code&gt;false&lt;/code&gt;</template><template autoinsert="false" context="java-statements" deleted="false" description="finally block" enabled="true" id="org.eclipse.jdt.ui.templates.finally" name="finally">finally {
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over array" enabled="true" id="org.eclipse.jdt.ui.templates.for_array" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over array with temporary variable" enabled="true" id="org.eclipse.jdt.ui.templates.for_temp" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${array_type} ${array_element} = ${array}[${index}];
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over collection" enabled="true" id="org.eclipse.jdt.ui.templates.for_collection" name="for">for (${iteratorType:newType(java.util.Iterator)} ${iterator} = ${collection}.iterator(); ${iterator}.hasNext(); ) {
	${type:elemType(collection)} ${name:newName(type)} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over an array or Iterable" enabled="true" id="org.eclipse.jdt.ui.templates.for_iterable" name="foreach">for (${iterable_type} ${iterable_element} : ${iterable}) {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new GridData for a Control" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.griddata" name="GridData">${gridData:newType(org.eclipse.swt.layout.GridData)} ${layoutData:newName(org.eclipse.swt.layout.GridData)} = new ${gridData}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(false, true)});
${layoutData}.widthHint= ${width:link(SWT.DEFAULT)};
${layoutData}.heightHint= ${height:link(SWT.DEFAULT)};
${parent:var(org.eclipse.swt.widgets.Control)}.setLayoutData(${layoutData});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new GridLayout for a Composites" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.gridlayout" name="GridLayout">${gridLayout:newType(org.eclipse.swt.layout.GridLayout)} ${layout:newName(org.eclipse.swt.layout.GridLayout)} = new ${gridLayout}(${columns:link(1, 2, 3, 4, 5)}, ${width:link(false, true)});
${layout}.marginWidth = ${marginW:link(5, 0)};
${layout}.marginHeight = ${marginH:link(5, 0)};
${layout}.verticalSpacing = ${vSpacing:link(0, 5)};
${layout}.horizontalSpacing = ${hSpacing:link(0, 5)};
${parent:var(org.eclipse.swt.widgets.Composite)}.setLayout(${layout});
${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Group with GridLayout" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.group" name="Group">${groupType:newType(org.eclipse.swt.widgets.Group)} ${group:newName(org.eclipse.swt.widgets.Group)}= new ${groupType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.SHADOW_ETCHED_IN, SWT.SHADOW_ETCHED_OUT, SWT.SHADOW_IN, SWT.SHADOW_OUT, SWT.SHADOW_NONE)});
${group}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${group}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));
${group}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="if statement" enabled="true" id="org.eclipse.jdt.ui.templates.if" name="if">if (${condition:var(boolean)}) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="if else statement" enabled="true" id="org.eclipse.jdt.ui.templates.ifelse" name="ifelse">if (${condition:var(boolean)}) {
	${cursor}
} else {
	
}</template><template autoinsert="false" context="java-statements" deleted="false" description="if statement checking for not null" enabled="true" id="org.eclipse.jdt.ui.templates.ifnotnull" name="ifNotNull">if (${name:var} != null) {
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="if statement checking for null" enabled="true" id="org.eclipse.jdt.ui.templates.ifnull" name="ifNull">if (${name:var} == null) {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Image" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.image" name="Image">${labelType:newType(org.eclipse.swt.widgets.Label)} ${image:newName(org.eclipse.swt.widgets.Label)}= new ${labelType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.BORDER)});
${image}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${image}.setImage(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java" deleted="false" description="To allocate memory or create array object" enabled="true" name="init_array">= new ${type}[${size}]</template><template autoinsert="true" context="java" deleted="false" description="Long initialize in bit = 127 can be concatenate with _ to short = 32767" enabled="true" name="init_bit">= ${0b1111111}</template><template autoinsert="true" context="java" deleted="false" description="Long initialize in bit = 65535" enabled="true" name="init_bitL">= ${0b0000000000000000000000000000000000000000000000001111111111111111L}</template><template autoinsert="true" context="java" deleted="false" description="initialize in decimal 42" enabled="true" name="init_dec">= ${42}</template><template autoinsert="true" context="java" deleted="false" description="Long initialize in decimal 42" enabled="true" name="init_decL">= ${42L}</template><template autoinsert="true" context="java" deleted="false" description="initialize in float =3,14" enabled="true" name="init_double">= ${3}.${14}</template><template autoinsert="true" context="java" deleted="false" description="initialize in float = 2,718" enabled="true" name="init_float">= ${2}.${718F}</template><template autoinsert="true" context="java" deleted="false" description="initialize in hexadecimal = 10" enabled="true" name="init_hex">= ${0x000A}</template><template autoinsert="true" context="java" deleted="false" description="Long initialize in hexadecimal = 10" enabled="true" name="init_hexL">= ${0x000AL}</template><template autoinsert="true" context="java" deleted="false" description="initialize in octal = 63" enabled="true" name="init_oct">= ${077}</template><template autoinsert="true" context="java" deleted="false" description="Long initialize in octal = 63" enabled="true" name="init_octL">= ${077L}</template><template autoinsert="false" context="java-statements" deleted="false" description="dynamic type test and cast" enabled="true" id="org.eclipse.jdt.ui.templates.instanceof" name="instanceof">if (${name:var} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template><template autoinsert="true" context="java-statements" deleted="false" description="Braces are used to group statements and declarations." enabled="true" name="k_Braces">{${word_selection}}</template><template autoinsert="true" context="java-statements" deleted="false" description="Brackets are used to index into an array." enabled="true" name="k_Brackets">[${word_selection}]</template><template autoinsert="true" context="java-statements" deleted="false" description="Parentheses are used for two purposes: (1) to control the order of operations in an expression, and (2) to supply parameters to a constructor or method." enabled="true" name="k_Parentheses">(${word_selection})</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Label" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.label" name="Label">${labelType:newType(org.eclipse.swt.widgets.Label)} ${label:newName(org.eclipse.swt.widgets.Label)}= new ${labelType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.WRAP, 'SWT.SEPARATOR | SWT.HORIZONTAL', 'SWT.SEPARATOR | SWT.VERTICAL')});
${label}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${label}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="lazy creation" enabled="true" id="org.eclipse.jdt.ui.templates.lazy" name="lazy">if (${name:var} == null) {
	${name} = new ${type}(${arguments});
	${cursor}
}

return ${name};</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Link" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.link" name="Link">${linkType:newType(org.eclipse.swt.widgets.Link)} ${link:newName(org.eclipse.swt.widgets.Link)}= new ${linkType}(${parent:var(org.eclipse.swt.widgets.Composite)}, SWT.NONE);
${link}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${link}.setText(${word_selection}${});
${link}.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				${listener:link('')}
			}
		});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.events.SelectionAdapter, org.eclipse.swt.events.SelectionEvent)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new List" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.list" name="List">${type:newType(org.eclipse.swt.widgets.List)} ${list:newName(org.eclipse.swt.widgets.List)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.MULTI | SWT.V_SCROLL', SWT.MULTI, 'SWT.SINGLE | SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.SINGLE | SWT.V_SCROLL', SWT.SINGLE)});
${list}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${list}.setItems(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="explicit lock acquisition" enabled="true" id="org.eclipse.jdt.ui.templates.lock" name="lock">${lock:var(java.util.concurrent.locks.Lock)}.lock();
try {
	${line_selection}${cursor}
} finally {
	${lock}.unlock();
}</template><template autoinsert="false" context="java-members" deleted="false" description="main method" enabled="true" id="org.eclipse.jdt.ui.templates.main" name="main">public static void main(String[] args) {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new top level Shell with event loop" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.mainloop" name="mainloop">${displayType:newType(org.eclipse.swt.widgets.Display)} ${display:newName(org.eclipse.swt.widgets.Display)} = new ${displayType}();
${shellType:newType(org.eclipse.swt.widgets.Shell)} ${shell:newName(org.eclipse.swt.widgets.Shell)} = new ${shellType}(${display});
${shell}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));

${cursor}

${shell}.pack();
${shell}.open();
while (!${shell}.isDisposed()) {
	if (!${display}.readAndDispatch ()) 
		${display}.sleep();
}
${display}.dispose();</template><template autoinsert="true" context="java" deleted="false" description="How to find or search array elements by binary search?" enabled="true" name="MyArray_binarySearchOnCharArray">/*
 * Java Arrays class provides few utility methods. One of the
 * utility method Arrays.binarySearch() helps us to find an object
 * from an array of objects by using binary search algorithm. Below
 * example shows how to search an object using binary search.
*/

import java.util.Arrays;

public class BinarySearchOnCharArray {

	public static void main(String a[]) {
		char[] chrArr = { 'a', 'c', 'd', 'y', 'e', 'q', 'b' };
		int index = Arrays.binarySearch(chrArr, 0, chrArr.length - 1, 'q');
		System.out.println("Char 'q' index is: " + index);
	}
}

/*
 * Example Output
 * 
 * Char 'q' index is: 5
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy array and increase size dynamically?" enabled="true" name="MyArray_copy">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.copyOf() helps us to create new array with new size and
 * copy old arrays content to the new array at the same time. Below
 * example shows how to copy an array and increase its size.
*/

import java.util.Arrays;

public class MyArrayCopy {

	public static void main(String a[]) {

		int[] myArr = { 2, 4, 2, 4, 5, 6, 3 };
		System.out.println("Array size before copy: " + myArr.length);
		int[] newArr = Arrays.copyOf(myArr, 10);
		System.out.println("New array size after copying: " + newArr.length);
	}
}

/*
 * Example Output
 * 
 * Array size before copy: 7
 * New array size after copying: 10
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compare two arrays and confirm they are equal?" enabled="true" name="MyArray_deepEquals">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.deepEquals() helps us to compare two arrays. This method
 * compares the array objects each other, and returns true if both arrays
 * are holding same objects. Below example shows how to compare two
 * arrays.
*/

import java.util.Arrays;

public class MyArrayDeepEquals {

	public static void main(String a[]) {
		String[] strArr = { "JAVA", "C++", "PERL", "STRUTS", "PLAY" };
		String[] strArrCopy = { "JAVA", "C++", "PERL", "STRUTS", "PLAY" };
		System.out.println("Are strArr and strArrCopy same? " + Arrays.deepEquals(strArr, strArrCopy));
		String[] strArrMod = { "JAVA", "C++", "PERL", "STRUTS" };
		System.out.println("Are strArr and strArrMod same? " + Arrays.deepEquals(strArr, strArrMod));
	}
}

/*
 * Example Output
 * 
 * Are strArr and strArrCopy same? true
 * Are strArr and strArrMod same? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to fill an array with default values?" enabled="true" name="MyArray_fill">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.fill() helps us to fill an empty array with default
 * values. Below example shows how to populate an array with default
 * values.
*/

import java.util.Arrays;

public class MyArrayFill {

	public static void main(String a[]) {

		String[] myArr = new String[10];
		Arrays.fill(myArr, "Assigned");
		for (String str : myArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 * Assigned
 */</template><template autoinsert="true" context="java" deleted="false" description="One Dimensional Array" enabled="true" name="MyArray_One_Dimensional">${type} ${type}${Array}[];</template><template autoinsert="true" context="java" deleted="false" description="One Dimensional Array initialized" enabled="true" name="MyArray_One_Dimensional_init">${type} ${type}${Array}[] = {${value1},${value2}};</template><template autoinsert="true" context="java" deleted="false" description="How to copy range of elements from an array?" enabled="true" name="MyArray_rangeCopy">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.copyOfRange() helps us to copy range of object from
 * existing array to new array. Below example shows how to copy range of
 * object to new array.
*/

import java.util.Arrays;

public class MyArrayRangeCopy {

	public static void main(String a[]) {

		int[] myArr = { 2, 4, 2, 4, 5, 6, 3 };
		System.out.println("My array elements:\n");
		for (int num : myArr) {
			System.out.print(num + "  ");
		}
		int[] newArr = Arrays.copyOfRange(myArr, 1, 4);
		System.out.println("\nMy new array elements:\n");
		for (int num : newArr) {
			System.out.print(num + "  ");
		}
	}
}

/*
 * Example Output
 * 
 * My array elements:
 * 2  4  2  4  5  6  3
 * My new array elements:
 * 4  2  4
 */</template><template autoinsert="true" context="java" deleted="false" description="How to sort an array?" enabled="true" name="MyArray_sort">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.sort() helps us to sort an Array of objects. Below
 * example shows how to sort an array.
*/

import java.util.Arrays;

public class MyArraySort {

	public static void main(String a[]) {

		int[] myArr = { 3, 2, 56, 12, 98, 23, 56 };
		Arrays.sort(myArr);
		for (int str : myArr) {
			System.out.print(str+" ");
		}
	}
}

/*
 * Example Output
 * 
 * 2 3 12 23 56 56 98 
 */</template><template autoinsert="true" context="java" deleted="false" description="How to sort an array using comparator?" enabled="true" name="MyArray_sortingStrings">/*
 * Java Arrays class provides few utility methods. One of the utility
 * method Arrays.sort() helps us to sort an Array of objects by passing
 * Comparator object, where Comparator holds the sorting logic. Below
 * example shows how to sort an array using Comparator.
*/

import java.util.Arrays;
import java.util.Comparator;

public class MyStringArraySorting {

	public static void main(String a[]) {

		String[] strArr = { "JAVA", "C++", "PERL", "STRUTS", "PLAY" };
		Arrays.sort(strArr, new Comparator&lt;String&gt;() {

			@Override
			public int compare(String o1, String o2) {
				return o1.compareTo(o2);
			}
		});

		for (String str : strArr) {
			System.out.print(str + " ");
		}
	}
}

/*
 * Example Output
 * 
 * C++ JAVA PERL PLAY STRUTS 
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic ArrayList Operations." enabled="true" name="MyArrayList_Basic">import java.util.ArrayList;

/*
 * Here we can see example for basic ArrayList operations like creating object for
 * ArrayList, adding objects into ArrayList, accessing objects based on index,
 * searching an object in ArrayList whether it is listed under this instance or not,
 * adding elements at specific index, checking whether the ArrayList is empty or not,
 * getting object index, and finally size of the ArrayList.
*/

public class MyBasicArrayList {

	public static void main(String[] a) {

		ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();
		// add elements to the ArrayList
		al.add("JAVA");
		al.add("C++");
		al.add("PERL");
		al.add("PHP");
		System.out.println(al);
		// get elements by index
		System.out.println("Element at index 1: " + al.get(1));
		System.out.println("Does list contains JAVA? " + al.contains("JAVA"));
		// add elements at a specific index
		al.add(2, "PLAY");
		System.out.println(al);
		System.out.println("Is arraylist empty? " + al.isEmpty());
		System.out.println("Index of PERL is " + al.indexOf("PERL"));
		System.out.println("Size of the arraylist is: " + al.size());
	}
}

/*
 * Example Output
 * 
 * [JAVA, C++, PERL, PHP]
 * Element at index 1: C++
 * Does list contains JAVA? true
 * [JAVA, C++, PLAY, PERL, PHP]
 * Is arraylist empty? false
 * Index of PERL is 3
 * Size of the arraylist is: 5
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from my ArrayList?" enabled="true" name="MyArrayList_clear">import java.util.ArrayList;

/*
 * Here we can see example for deleting all objects from ArrayList at one method call.
 * We can do this by calling clear() method on ArrayList, it will delete all objects.
*/

public class ClearMyArrayList {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual ArrayList:" + arrl);
		arrl.clear();
		System.out.println("After clear ArrayList:" + arrl);
	}
}

/*
 * Example Output
 * 
 * Actual ArrayList:[First, Second, Third, Random]
 * After clear ArrayList:[]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy or clone a ArrayList?" enabled="true" name="MyArrayList_clone">import java.util.ArrayList;

/*
 * Here we can see example for creating duplicate object of an ArrayList instance.
 * we can done this by using clone() function.
*/

public class MyArrayListClone {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual ArrayList:" + arrl);
		ArrayList&lt;String&gt; copy = (ArrayList&lt;String&gt;) arrl.clone();
		System.out.println("Cloned ArrayList:" + copy);
	}
}

/*
 * Example Output
 * 
 * Actual ArrayList:[First, Second, Third, Random]
 * Cloned ArrayList:[First, Second, Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find does ArrayList contains all list elements or not?" enabled="true" name="MyArrayList_containsAll">import java.util.ArrayList;
import java.util.List;

/*
 * Here we can see example for finding whether the instance of an ArrayList contains
 * all objects of another Collection instance. Here we are checking with another List
 * instance.
*/

public class MyElementCheck {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("Second");
		list.add("Random");
		System.out.println("Does ArrayList contains all list elements?: " + arrl.containsAll(list));
		list.add("one");
		System.out.println("Does ArrayList contains all list elements?: " + arrl.containsAll(list));
	}
}

/*
 * Example Output
 * 
 * Does ArrayList contains all list elements?: true
 * Does ArrayList contains all list elements?: false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert list to csv string format?" enabled="true" name="MyArrayList_convertListCsv">import java.util.ArrayList;
import java.util.List;

/*
 * This example shows how to convert given list of strings to comma seperated
 * values (csv) format.
*/

public class MyListToCsvString {

	public String getListAsCsvString(List&lt;String&gt; list) {

		StringBuilder sb = new StringBuilder();
		for (String str : list) {
			if (sb.length() != 0) {
				sb.append(",");
			}
			sb.append(str);
		}
		return sb.toString();
	}

	public static void main(String a[]) {

		List&lt;String&gt; li1 = new ArrayList&lt;String&gt;() {
			{
				this.add("animal");
				this.add("nuts");
				this.add("java");
			}
		};
		MyListToCsvString mtc = new MyListToCsvString();
		System.out.println(mtc.getListAsCsvString(li1));
		List&lt;String&gt; li2 = new ArrayList&lt;String&gt;() {
			{
				this.add("java");
				this.add("unix");
				this.add("c++");
			}
		};
		System.out.println(mtc.getListAsCsvString(li2));
	}
}

/*
 * Example Output
 * 
 * animal,nuts,java
 * java,unix,c++
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read all elements in ArrayList by using iterator?" enabled="true" name="MyArrayList_Iterator">import java.util.ArrayList;
import java.util.Iterator;

/*
 * Here we can see example for reading all elements from ArrayList by using Iterator.
 * Also you can iterate through the ArrayList based on index too.
*/

public class ArrayListIterator {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		Iterator&lt;String&gt; itr = arrl.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to reverse ArrayList content?" enabled="true" name="MyArrayList_reverse">import java.util.ArrayList;
import java.util.Collections;

/*
 * This example shows how to reverse ArrayList content. You can reverse the content by
 * calling Collections.reverse() method. You have to pass ArrayList instance to this
 * method, which reverses the content.
*/

public class MyArrayListReverse {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		Collections.reverse(list);
		System.out.println("Results after reverse operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after reverse operation:
 * Glass
 * Watch
 * Play
 * Cric
 * Java
 */</template><template autoinsert="true" context="java" deleted="false" description="How to shuffle elements in ArrayList?" enabled="true" name="MyArrayList_shuffleElements">import java.util.ArrayList;
import java.util.Collections;

/*
 * This example gives how to shuffle elements in the ArrayList. By calling
 * Collections.shuffle() method you can shuffle the content of the ArrayList.
 * Everytime you call shuffle() method, it generates different order of output.
*/

public class MyArrayListShuffle {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		list.add("Movie");
		list.add("Girl");

		Collections.shuffle(list);
		System.out.println("Results after shuffle operation:");
		for (String str : list) {
			System.out.println(str);
		}

		Collections.shuffle(list);
		System.out.println("Results after shuffle operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after shuffle operation:
 * Girl
 * Glass
 * Watch
 * Java
 * Cric
 * Play
 * Movie
 * Results after shuffle operation:
 * Cric
 * Java
 * Girl
 * Glass
 * Play
 * Movie
 * Watch
 */</template><template autoinsert="true" context="java" deleted="false" description="How to sort ArrayList using Comparator?" enabled="true" name="MyArrayList_sort">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/*
 * This example gives you how to sort an ArrayList using Comparator.
 * The ArrayList contains user defined objects. By using Collections.sort() method
 * you can sort the ArrayList. You have to pass Comparator object which contains your
 * sort logic. The example sorts the Empl objects based on highest salary.
*/

public class MyArrayListSort {

	public static void main(String a[]) {

		List&lt;Empl&gt; list = new ArrayList&lt;Empl&gt;();
		list.add(new Empl("Ram", 3000));
		list.add(new Empl("John", 6000));
		list.add(new Empl("Crish", 2000));
		list.add(new Empl("Tom", 2400));
		Collections.sort(list, new MySalaryComp());
		System.out.println("Sorted list entries: ");
		for (Empl e : list) {
			System.out.println(e);
		}
	}
}

class MySalaryComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		if (e1.getSalary() &lt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl {

	private String name;
	private int salary;

	public Empl(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Sorted list entries: 
 * Name: John-- Salary: 6000
 * Name: Ram-- Salary: 3000
 * Name: Tom-- Salary: 2400
 * Name: Crish-- Salary: 2000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to swap two elements in a ArrayList?" enabled="true" name="MyArrayList_swapElements">import java.util.ArrayList;
import java.util.Collections;

/*
 * This example gives how to swap two elements in the ArrayList.
 * By calling Collections.swap() method you can swap two elements of the ArrayList.
 * You have to pass the indexes which you need to swap.
*/

public class MyArrayListSwap {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		list.add("Movie");
		list.add("Girl");

		Collections.swap(list, 2, 5);
		System.out.println("Results after swap operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after swap operation:
 * Java
 * Cric
 * Movie
 * Watch
 * Glass
 * Play
 * Girl
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy ArrayList to array?" enabled="true" name="MyArrayList_toArray">import java.util.ArrayList;

/*
 * Here we can see example for copying all content of ArrayList to an array.
 * You can get this done by calling toArray() method.
*/

public class MyArrayListArray {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual ArrayList:" + arrl);
		String[] strArr = new String[arrl.size()];
		arrl.toArray(strArr);
		System.out.println("Created Array content:");
		for (String str : strArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Actual ArrayList:[First, Second, Third, Random]
 * Created Array content:
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add all elements of a list to ArrayList?" enabled="true" name="MyArrayList.addAll">import java.util.ArrayList;
import java.util.List;

/*
 * Here we can see example for copying another collection instance objects to
 * existing ArrayList.
*/

public class MyArrayListNewCollection {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual ArrayList:" + arrl);
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("one");
		list.add("two");
		arrl.addAll(list);
		System.out.println("After Copy: " + arrl);
	}
}

/*
 * Example Output
 * 
 * Actual ArrayList:[First, Second, Third, Random]
 * After Copy: [First, Second, Third, Random, one, two]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get sub list from ArrayList?" enabled="true" name="MyArrayList.subList">import java.util.ArrayList;
import java.util.List;

/*
 * Here we can see example for getting ArrayList content based on range of index.
 * By specifing the start and end index of the range, you can get the sub-list.
*/

public class MyArrayListSubRange {

	public static void main(String a[]) {
		ArrayList&lt;String&gt; arrl = new ArrayList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		arrl.add("Click");
		System.out.println("Actual ArrayList:" + arrl);
		List&lt;String&gt; list = arrl.subList(2, 4);
		System.out.println("Sub List: " + list);
	}
}

/*
 * Example Output
 * 
 * Actual ArrayList:[First, Second, Third, Random, Click]
 * Sub List: [Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert Array to List in java?" enabled="true" name="MyArrays_toList">/*
 * Java Arrays class provides few utility methods. One of the
 * utility method Arrays.asList() helps us to convert an Array of
 * objects to List of objects. Below example shows how to convert
 * array to list object.
*/

import java.util.Arrays;
import java.util.List;

public class ArraysToList {

	public static void main(String a[]){
		String[] strArr = {"JAVA", "C++", "PERL", "STRUTS", "PLAY"};
		List&lt;String&gt; strList = Arrays.asList(strArr);
		System.out.println("Created List Size: "+strList.size());
		System.out.println(strList);
	}
}

/*
 * Example Output
 * 
 * Created List Size: 5
 * [JAVA, C++, PERL, STRUTS, PLAY]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create Class" enabled="true" name="MyClass_create">public class ${name} {

}</template><template autoinsert="true" context="java" deleted="false" description="Java Constructor Chaining" enabled="true" name="MyConstructor_chaining">/*
 * Calling another constructor in the same class from another
 * constructor is called constructor chaining. By using this() we
 * can call another constructor in the same class. Incase we want
 * to call another constructor, this() should be the first line
 * in the constructor. Below example shows code for constructor
 * chaining.
*/

public class MyChaining {

	public MyChaining() {
		System.out.println("In default constructor...");
	}

	public MyChaining(int i) {
		this();
		System.out.println("In single parameter constructor...");
	}

	public MyChaining(int i, int j) {
		this(j);
		System.out.println("In double parameter constructor...");
	}

	public static void main(String a[]) {
		MyChaining ch = new MyChaining(10, 20);
	}
}

/*
 * Example Output
 * 
 * In default constructor...
 * In single parameter constructor...
 * In double parameter constructor...
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Default Constructor" enabled="true" name="MyConstructor_default">/*
 * Default constructor refers to a constructor that is
 * automatically created by compiler in the absence of explicit
 * constructors.
 *
 * You can also call a constructor without parameters as default
 * constructor because all of its class instance variables are
 * set to default values.
*/

public class MyDefaultConstructor {

	public MyDefaultConstructor() {
		System.out.println("I am inside default constructor...");
	}

	public static void main(String a[]) {
		MyDefaultConstructor mdc = new MyDefaultConstructor();
	}
}

/*
 * Example Output
 * 
 * I am inside default constructor...
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Constructor Overloading" enabled="true" name="MyConstructor_overloading">/*
 * Like method overloading we can overload constructors also.
 * Along with default constructor, we can have constructors with
 * parameters. The no of parameters can be same, and it can have
 * different datatypes. Below example gives sample code for
 * constructors overloading.
*/

public class MyOverloading {

	public MyOverloading() {
		System.out.println("Inside default constructor");
	}

	public MyOverloading(int i) {
		System.out.println("Inside single parameter constructor with int value");
	}

	public MyOverloading(String str) {
		System.out.println("Inside single parameter constructor with String object");
	}

	public MyOverloading(int i, int j) {
		System.out.println("Inside double parameter constructor");
	}

	public static void main(String a[]) {
		MyOverloading mco = new MyOverloading();
		MyOverloading spmco = new MyOverloading(10);
		MyOverloading dpmco = new MyOverloading(10, 20);
		MyOverloading spmcoso = new MyOverloading("java2novice");
	}
}

/*
 * Example Output
 * 
 * Inside default constructor
 * Inside single parameter constructor with int value
 * Inside double parameter constructor
 * Inside single parameter constructor with String object
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Parameterized Constructor" enabled="true" name="MyConstructor_parameterized">/*
 * Parameterized constructors are required to pass parameters on
 * creation of objects.
 *
 * If we define only parameterized constructors, then we cannot
 * create an object with default constructor. This is because
 * compiler will not create default constructor. You need to
 * create default constructor explicitly.
*/

public class MyParameterizedConstructor {

	private String name;

	public MyParameterizedConstructor(String str) {
		this.name = str;
		System.out.println("I am inside parameterized constructor.");
		System.out.println("The parameter value is: " + str);
	}

	public static void main(String a[]) {
		MyParameterizedConstructor mpc = new MyParameterizedConstructor("Madhu Raj");
	}
}

/*
 * Example Output
 * 
 * I am inside parameterized constructor.
 * The parameter value is: Madhu Raj
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Singleton Class Example Using Private Constructor" enabled="true" name="MyConstructor_singleton">/*
 * We can make constructor as private. So that We can not create an object
 * outside of the class.
 * 
 * This property is useful to create singleton class in java.
 *
 * Singleton pattern helps us to keep only one instance of a class at any
 * time.
 *
 * The purpose of singleton is to control object creation by keeping
 * private constructor.
*/

public class MySingleTon {

	private static MySingleTon myObj;

	/**
	 * Create private constructor
	 */
	private MySingleTon() {

	}

	/**
	 * Create a static method to get instance.
	 */
	public static MySingleTon getInstance() {
		if (myObj == null) {
			myObj = new MySingleTon();
		}
		return myObj;
	}

	public void getSomeThing() {
		// do something here
		System.out.println("I am here....");
	}

	public static void main(String a[]) {
		MySingleTon st = MySingleTon.getInstance();
		st.getSomeThing();
	}
}

/*
 * Example Output
 * 
 * I am here....
 */</template><template autoinsert="true" context="java" deleted="false" description="8 bit = 1 byte + Overhead ; Bitset may be better it depends..." enabled="true" name="MyDataTypes_boolean">boolean ${booleanVar}=${true};</template><template autoinsert="true" context="java" deleted="false" description="16 bits = 2 byte ; Unicode (0x0000 ... 0xFFFF) " enabled="true" name="MyDataTypes_char">char ${charVar}='${c}';</template><template autoinsert="true" context="java" deleted="false" description="32 bits = 4 byte ; 10 Stellen; -3.40282347 *10^38 ... 3.40282347 *10^38" enabled="true" name="MyDataTypes_Float_1_float">float ${floatVar};</template><template autoinsert="true" context="java" deleted="false" description="64 bits = 8 byte ; 15 Stellen;  -1.79769313486231570 *10^308*bis 1.79769313486231570 *10^308 " enabled="true" name="MyDataTypes_Float_2_double">double ${doubleVar};</template><template autoinsert="true" context="java" deleted="false" description="8 bits = 1 byte ; -128 ... 127" enabled="true" name="MyDataTypes_Integers_1_byte">byte ${byteVar};</template><template autoinsert="true" context="java" deleted="false" description="16 bit = 2 bytes; -32768 ... 32767" enabled="true" name="MyDataTypes_Integers_2_short">short ${shortVar};</template><template autoinsert="true" context="java" deleted="false" description="32 bit = 4 bytes; -2147483648 ... 2147483647" enabled="true" name="MyDataTypes_Integers_3_int">int ${intVar};</template><template autoinsert="true" context="java" deleted="false" description="64 bit = 8 bytes; -9223372036854775808 ... 9223372036854775807" enabled="true" name="MyDataTypes_Integers_4_long">long ${longVar};</template><template autoinsert="true" context="java" deleted="false" description="How to check if the date is after the specified date?" enabled="true" name="MyDate_afterTest">import java.util.Date;

/*
 * How to check if the date is after the specified date?
*/

public class MyAfterDateTest {

	public static void main(String a[]) {

		Date current = new Date();
		// create a date one day after current date
		long nextDay = System.currentTimeMillis() + 1000 * 60 * 60 * 24;
		// create date object
		Date next = new Date(nextDay);
		// compare both dates
		if (next.after(current)) {
			System.out.println("The date is future day");
		} else {
			System.out.println("The date is older than current day");
		}
	}
}

/*
 * Example Output
 * 
 * The date is future day
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Date basic functions." enabled="true" name="MyDate_Basic">import java.util.Date;

/*
 * Java Date basic functions.
*/

public class MyDateClass {

	public static void main(String a[]) {

		Date d = new Date();
		System.out.println("Todays Date is: " + d);
		System.out.println("Current Date: " + d.getDate());
		System.out.println("Current Day: " + d.getDay());
		System.out.println("Current Year: " + d.getYear());
		System.out.println("Current Hours: " + d.getHours());
		System.out.println("Current Minutes: " + d.getMinutes());
		System.out.println("Current Seconds: " + d.getSeconds());
	}
}

/*
 * Example Output
 * 
 * Todays Date is: Thu Aug 31 15:35:55 CEST 2017
 * Current Date: 31
 * Current Day: 4
 * Current Year: 117
 * Current Hours: 15
 * Current Minutes: 35
 * Current Seconds: 55
 */</template><template autoinsert="true" context="java" deleted="false" description="How to check if the date is before the specified date?" enabled="true" name="MyDate_beforeTest">import java.util.Date;

/*
 * How to check if the date is before the specified date?
*/

public class MyBeforeDateTest {

	public static void main(String a[]) {

		Date current = new Date();
		// create a date one day before current date
		long prevDay = System.currentTimeMillis() - 1000 * 60 * 60 * 24;
		// create date object
		Date prev = new Date(prevDay);
		// compare both dates
		if (prev.before(current)) {
			System.out.println("The date is older than current day");
		} else {
			System.out.println("The date is future day");
		}
	}
}

/*
 * Example Output
 * 
 * The date is older than current day
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate difference between two dates in java?" enabled="true" name="MyDate_calcDifference">import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/*
 * Below example shows how to calculate diffence between two dates by seconds or by
 * minutes or by hours or by days.
*/

public class MyDateDifferenceExamples {

	public static void main(String a[]) {

		String startDate = "22/02/2014 12:30:00";
		String endDate = "24/02/2014 12:30:00";

		/**
		 * SimpleDateFormat converts string format to date object
		 */
		SimpleDateFormat sdFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		try {
			Date startDateObj = sdFormat.parse(startDate);
			Date endDateObj = sdFormat.parse(endDate);
			// startDateObj.getTime() method gives date in milli seconds format
			System.out.println("Time in milli seconds: " + startDateObj.getTime());

			// find time difference in milli seconds
			long timeDiff = endDateObj.getTime() - startDateObj.getTime();
			System.out.println("Time difference in Milli seconds: " + timeDiff);

			// time difference in seconds
			long secondsDiff = (timeDiff / 1000);
			System.out.println("Time difference in seconds: " + secondsDiff);

			// time difference in minutes
			long minDiff = timeDiff / (1000 * 60);
			System.out.println("Time difference in minutes: " + minDiff);

			// time difference in minutes
			long hoursDiff = timeDiff / (1000 * 60 * 60);
			System.out.println("Time difference in hours: " + hoursDiff);

			// time difference in minutes
			long daysDiff = timeDiff / (1000 * 60 * 60 * 24);
			System.out.println("Time difference in days: " + daysDiff);

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

/*
 * Example Output
 * 
 * Time in milli seconds: 1393068600000
 * Time difference in Milli seconds: 172800000
 * Time difference in seconds: 172800
 * Time difference in minutes: 2880
 * Time difference in hours: 48
 * Time difference in days: 2
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get current time in milli seconds?" enabled="true" name="MyDate_currentTimeMillis">/*
 * How to get current time in milli seconds?
*/

public class MyCurrentTime {

	public static void main(String a[]) {

		long millis = System.currentTimeMillis();
		System.out.println("Current time in millis: " + millis);
	}
}

/*
 * Example Output
 * 
 * Current time in millis: 1504186996539
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create a date with milli seconds?" enabled="true" name="MyDate_withMilliSeconds">import java.util.Date;

/*
 * How to create a date with milli seconds?
*/

public class DateCreationWithSeconds {

	public static void main(String a[]) {
		// get current time in milli seconds
		long currentTimeInSec = System.currentTimeMillis();
		Date d = new Date(currentTimeInSec);
		System.out.println(d);
	}
}

/*
 * Example Output
 * 
 * Thu Aug 31 15:38:33 CEST 2017
 */</template><template autoinsert="true" context="java" deleted="false" description="How to format date into user define format?" enabled="true" name="MyDateFormat">import java.text.SimpleDateFormat;
import java.util.Date;

/*
 * How to format date into user define format?
*/

public class MyDateFormatter {

	public static void main(String a[]) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd G 'at' HH:mm:ss z");
		// Look at SimpleDateFormat documentation for more format details
		System.out.println("yyyy.MM.dd G 'at' HH:mm:ss z  ---&gt; " + sdf.format(new Date()));
		sdf = new SimpleDateFormat("hh 'o''clock' a, zzzz");
		System.out.println("hh 'o''clock' a, zzzz  ---&gt; " + sdf.format(new Date()));
	}
}

/*
 * Example Output
 * 
 * yyyy.MM.dd G 'at' HH:mm:ss z  ---&gt; 2017.08.31 n. Chr. at 15:44:30 MESZ
 * hh 'o''clock' a, zzzz  ---&gt; 03 o'clock PM, Mitteleuropäische Sommerzeit
 */</template><template autoinsert="true" context="java" deleted="false" description="How to call enum, which is defined inside a class?" enabled="true" name="MyEnum_callInsideClass">/*
 * This example defines a basic enum type called Fruit inside a class.
 * This example shows how to call enum constants defined under another
 * class. If you declare Enum is a member of a class, then by default it
 * is static. You can access it with reference to enclosing class.
*/

public class MyEnumInsideClass {

	private MyWrapper.Fruit myFruit;

	public MyEnumInsideClass(MyWrapper.Fruit fruit) {
		this.myFruit = fruit;
	}

	public void getFruitDesc() {

		switch (myFruit) {
		case GRAPE:
			System.out.println("A grape is a non-climacteric fruit.");
			break;

		case APPLE:
			System.out.println("The apple is the pomaceous fruit.");
			break;

		case MANGO:
			System.out.println("The mango is a fleshy stone fruit.");
			break;

		case LEMON:
			System.out.println("Lemons are slow growing varieties of citrus.");
			break;

		default:
			System.out.println("No desc available.");
			break;
		}
	}

	public static void main(String a[]) {
		MyEnumInsideClass grape = new MyEnumInsideClass(MyWrapper.Fruit.GRAPE);
		grape.getFruitDesc();
		MyEnumInsideClass apple = new MyEnumInsideClass(MyWrapper.Fruit.APPLE);
		apple.getFruitDesc();
		MyEnumInsideClass lemon = new MyEnumInsideClass(MyWrapper.Fruit.LEMON);
		lemon.getFruitDesc();
		MyEnumInsideClass guava = new MyEnumInsideClass(MyWrapper.Fruit.GUAVA);
		guava.getFruitDesc();
	}
}

class MyWrapper {

	enum Fruit {
		GRAPE, APPLE, MANGO, LEMON, GUAVA
	}
}

/*
 * Example Output
 * 
 * A grape is a non-climacteric fruit.
 * The apple is the pomaceous fruit.
 * Lemons are slow growing varieties of citrus.
 * No desc available.
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic Enum example." enabled="true" name="MyEnum_createBasic">/*
 * This example defines a basic enum type called Fruits. It contains few
 * constants representing fruits. The switch case uses these constants
 * to execute conditions.
*/

public class MyBasicEnum {

	private Fruits myFruit;

	public MyBasicEnum(Fruits fruit) {
		this.myFruit = fruit;
	}

	public void getFruitDesc() {

		switch (myFruit) {
		case GRAPE:
			System.out.println("A grape is a non-climacteric fruit.");
			break;

		case APPLE:
			System.out.println("The apple is the pomaceous fruit.");
			break;

		case MANGO:
			System.out.println("The mango is a fleshy stone fruit.");
			break;

		case LEMON:
			System.out.println("Lemons are slow growing varieties of citrus.");
			break;

		default:
			System.out.println("No desc available.");
			break;
		}
	}

	public static void main(String a[]) {
		MyBasicEnum grape = new MyBasicEnum(Fruits.GRAPE);
		grape.getFruitDesc();
		MyBasicEnum apple = new MyBasicEnum(Fruits.APPLE);
		apple.getFruitDesc();
		MyBasicEnum lemon = new MyBasicEnum(Fruits.LEMON);
		lemon.getFruitDesc();
		MyBasicEnum guava = new MyBasicEnum(Fruits.GUAVA);
		guava.getFruitDesc();
	}
}

enum Fruits {
	GRAPE, APPLE, MANGO, LEMON, GUAVA
}

/*
 * Example Output
 * 
 * A grape is a non-climacteric fruit.
 * The apple is the pomaceous fruit.
 * Lemons are slow growing varieties of citrus.
 * No desc available.
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create custom constructor enum?" enabled="true" name="MyEnum_createCustomConstructor">/*
 * This example gives you how to create custom constructor for enum.
 * The constructor should be either private or default scope, should not
 * be protected or public. All elements defined in the enum must call
 * constructor.
*/

public class MyEnumCustomConstructor {

	enum Department {

		ACCOUNT(12), HR(24), FINANCE(100), SECURITY(108);

		private int deptId;

		Department(int id) {
			deptId = id;
		}

		public int getDeptId() {
			return deptId;
		}
	}

	public static void main(String a[]) {
		System.out.println("Accounts dept id:" + Department.ACCOUNT.getDeptId());
		System.out.println("HR dept id:" + Department.HR.getDeptId());
		System.out.println("Security dept id:" + Department.SECURITY.getDeptId());
	}
}

/*
 * Example Output
 * 
 * Accounts dept id:12
 * HR dept id:24
 * Security dept id:108
 */</template><template autoinsert="true" context="java" deleted="false" description="How to override toString() method with enum?" enabled="true" name="MyEnum_toString">/*
 * This example gives how to override toString() method with enum
 * constants. By default the enum toString() method returns the constant
 * name itself. You can change return value by overriding toString()
 * method.
*/

public class MyEnumtoString {

	enum Fruit {
		GRAPE {
			public String toString() {
				return "A grape is a non-climacteric fruit.";
			}
		},
		APPLE {
			public String toString() {
				return "The apple is the pomaceous fruit.";
			}
		},
		MANGO {
			public String toString() {
				return "The mango is a fleshy stone fruit.";
			}
		},
		LEMON {
			public String toString() {
				return "Lemons are slow growing varieties of citrus.";
			}
		}
	}

	public static void main(String a[]) {
		System.out.println(Fruit.GRAPE);
		System.out.println(Fruit.APPLE);
		System.out.println(Fruit.MANGO);
	}
}

/*
 * Example Output
 * 
 * A grape is a non-climacteric fruit.
 * The apple is the pomaceous fruit.
 * The mango is a fleshy stone fruit.
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Enumeration Sample Code" enabled="true" name="MyEnumeration">import java.util.Enumeration;
import java.util.Vector;

/*
 * A class that implements Enumeration interface provides access to series of elements
 * one at a time. You need to call nextElement method to get next element in the
 * series. Also hasMoreElements() method gives you status about the availability of
 * next element in the series.
*/

public class MyEnumeration {
	public static void main(String a[]) {
		Vector&lt;String&gt; lang = new Vector&lt;String&gt;();
		Enumeration&lt;String&gt; en = null;
		lang.add("JAVA");
		lang.add("JSP");
		lang.add("SERVLET");
		lang.add("EJB");
		lang.add("PHP");
		lang.add("PERL");
		en = lang.elements();
		while (en.hasMoreElements()) {
			System.out.println(en.nextElement());
		}
	}
}

/*
 * Example Output
 * 
 * JAVA
 * JSP
 * SERVLET
 * EJB
 * PHP
 * PERL
 */</template><template autoinsert="true" context="java" deleted="false" description="How to Create Java Custom Exception" enabled="true" name="MyException_Custom">/*
 * Sometimes it is required to develop meaningful exceptions based on
 * application requirements. We can create our own exceptions by
 * extending 'Exception' class. Below example shows how to create custom
 * exception by extending Exception class.
*/

public class MyOwnException {
	public static void main(String[] a) {
		try {
			MyOwnException.myTest(null);
		} catch (MyAppException mae) {
			System.out.println("Inside catch block: " + mae.getMessage());
		}
	}

	static void myTest(String str) throws MyAppException {
		if (str == null) {
			throw new MyAppException("String val is null");
		}
	}
}

class MyAppException extends Exception {

	private String message = null;

	public MyAppException() {
		super();
	}

	public MyAppException(String message) {
		super(message);
		this.message = message;
	}

	public MyAppException(Throwable cause) {
		super(cause);
	}

	@Override
	public String toString() {
		return message;
	}

	@Override
	public String getMessage() {
		return message;
	}
}

/*
 * Example Output
 * 
 * Inside catch block: String val is null
 */</template><template autoinsert="true" context="java" deleted="false" description="Throw Clause Examples" enabled="true" name="MyException_ExplicitThrow">/*
 * Use 'throw' statement to throw an exception or simply use the throw
 * clause with an object reference to throw an exception.
 * 
 * The syntax is 'throw new Exception();'. Even you can pass the error
 * message to the Exception constructor.
 * 
 * Below example shows how to throw an exception. 
*/

public class MyExplicitThrow {
	public static void main(String a[]) {
		try {
			MyExplicitThrow met = new MyExplicitThrow();
			System.out.println("length of JUNK is " + met.getStringSize("JUNK"));
			System.out.println("length of WRONG is " + met.getStringSize("WRONG"));
			System.out.println("length of null string is " + met.getStringSize(null));
		} catch (Exception ex) {
			System.out.println("Exception message: " + ex.getMessage());
		}
	}

	public int getStringSize(String str) throws Exception {
		if (str == null) {
			throw new Exception("String input is null");
		}
		return str.length();
	}
}

/*
 * Example Output
 * 
 * length of JUNK is 4
 * length of WRONG is 5
 * Exception message: String input is null
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Finally Block Examples" enabled="true" name="MyException_FinallyBlock">/*
 * The finally block always executes immediately after try-catch block
 * exits.
 * 
 * The finally block is executed incase even if an unexpected exception
 * occurs.
 * 
 * The main usage of finally block is to do clean up job. Keeping cleanup
 * code in a finally block is always a good practice, even when no
 * exceptions are occured.
 * 
 * The runtime system always executes the code within the finally block
 * regardless of what happens in the try block. So it is the ideal place
 * to keep cleanup code.
*/

public class MyFinallyBlock {
	public static void main(String[] a) {
		/**
		 * Exception will occur here, after catch block the contol will goto finally
		 * block.
		 */
		try {
			int i = 10 / 0;
		} catch (Exception ex) {
			System.out.println("Inside 1st catch Block");
		} finally {
			System.out.println("Inside 1st finally block");
		}
		/**
		 * In this case exception won't, after executing try block the contol will goto
		 * finally block.
		 */
		try {
			int i = 10 / 10;
		} catch (Exception ex) {
			System.out.println("Inside 2nd catch Block");
		} finally {
			System.out.println("Inside 2nd finally block");
		}
	}
}

/*
 * Example Output
 * 
 * Inside 1st catch Block
 * Inside 1st finally block
 * Inside 2nd finally block
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Exception Handling Examples" enabled="true" name="MyException_handle">/*
 * Exceptions can be handled by using 'try-catch' block. Try block
 * contains the code which is under observation for exceptions.
 * The catch block contains the remedy for the exception. If any
 * exception occurs in the try block then the control jumps to catch
 * block.
*/

public class MyExceptionHandle {
	public static void main(String a[]) {
		try {
			for (int i = 5; i &gt;= 0; i--) {
				System.out.println(10 / i);
			}
		} catch (Exception ex) {
			System.out.println("Exception Message: " + ex.getMessage());
			ex.printStackTrace();
		}
		System.out.println("After for loop...");
	}
}

/*
 * Example Output
 * 
 * 2
 * 2
 * 3
 * 5
 * 10
 * Exception Message: / by zero java.lang.ArithmeticException: / by zero
 * at snippet_test.MyExceptionHandle.main(MyExceptionHandle.java:15)
 * After for loop...
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Exception Handling - Multiple Cache Blocks Examples" enabled="true" name="MyException_MultipleCatchBlocks">import java.net.MalformedURLException;
import java.net.URL;

/*
 * A single try block can have multiple catch blocks. This is required
 * when the try block has statements that generates different types of
 * exceptions.
 * 
 * If the first catch block contains the Exception class object then the
 * subsequent catch blocks are never executed.
 * 
 * The last catch block in multiple catch blocks must contain the
 * Exception class object. This is because, the java complier gives an
 * error saying that the subsequent catch blocks haven't been reached.
 * This is known as Unreachable code problem.
*/

public class MyMultipleCatchBlocks {

	public static void main(String a[]) {
		MyMultipleCatchBlocks mmcb = new MyMultipleCatchBlocks();
		mmcb.execute(1);
		mmcb.execute(2);
	}

	public void execute(int i) {
		try {
			if (i == 1) {
				getIntValue("7u");
			} else {
				getUrlObj("www.junksite.com");
			}
		} catch (NumberFormatException nfe) {
			System.out.println("Inside NumberFormatException... " + nfe.getMessage());
		} catch (MalformedURLException mue) {
			System.out.println("Inside MalformedURLException... " + mue.getMessage());
		} catch (Exception ex) {
			System.out.println("Inside Exception... " + ex.getMessage());
		}
	}

	public int getIntValue(String num) {
		return Integer.parseInt(num);
	}

	public URL getUrlObj(String urlStr) throws MalformedURLException {
		return new URL(urlStr);
	}
}

/*
 * Example Output
 * 
 * Inside NumberFormatException... For input string: "7u"
 * Inside MalformedURLException... no protocol: www.junksite.com
 */</template><template autoinsert="true" context="java" deleted="false" description="How Exception Terminates Java Program?" enabled="true" name="MyException_terminate">/*
 * Whenever exception arises, it terminates the program execution, means
 * it stops the execution of the current java program. Below example
 * shows what happens when an exception occurs.
*/

public class MyException {
	public static void main(String a[]) {
		for (int i = 5; i &gt;= 0; i--) {
			System.out.println(10 / i);
		}
		System.out.println("After for loop...");
	}
}

/*
 * Example Output
 * 
 * 2
 * 2
 * 3
 * 5
 * 10
 * Exception in thread "main" java.lang.ArithmeticException: / by zero at
 * snippet_test.MyException.main(MyException.java:12)
 */</template><template autoinsert="true" context="java" deleted="false" description="Throws Clause Examples" enabled="true" name="MyException_throwsClause">/*
 * The 'throws' clause in java programming language is belongs to a
 * method to specify that the method raises particular type of exception
 * while being executed.
 * 
 * The 'throws' clause takes arguments as a list of the objects of type
 * 'Throwables' class.
 * 
 * Anybody calling a method with a throws clause is needed to be enclosed
 * within the try catch blocks.
*/

public class MyThrowsClause {
	public static void main(String a[]) {
		MyThrowsClause mytc = new MyThrowsClause();
		try {
			for (int i = 0; i &lt; 5; i++) {
				mytc.getJunk();
				System.out.println(i);
			}
		} catch (InterruptedException iex) {
			iex.printStackTrace();
		}
	}

	public void getJunk() throws InterruptedException {
		Thread.sleep(1000);
	}
}

/*
 * Example Output
 * 
 * 0 1 2 3 4
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Exception Handling - without cache block example" enabled="true" name="MyException_TryBlockOnly">import java.net.MalformedURLException;
import java.net.URL;

/*
 * You can handle exceptions still without having catch blocks also,
 * only thing you need to do is declare the throws clause in your method
 * signature, so that the calling function would handle the exception.
 * Before throwing exception, it executes the finally block.
*/

public class MyTryBlockOnly {
	public static void main(String a[]) throws MalformedURLException {
		try {
			URL url = new URL("http://www.google.com");
		} finally {
			System.out.println("In finally block");
		}
	}
}

/*
 * Example Output
 * 
 * In finally block
 */</template><template autoinsert="true" context="java" deleted="false" description="How implement bounded types (extend superclass) with generics?" enabled="true" name="MyGenerics_extendSuperclass">/*
 * As of now we have seen examples for only one type parameter. What happens in case
 * we want to access group of objects comes from same family, means extending same
 * super class? You can restrict the generics type parameter to a certain group of
 * objects which extends same super class. You can achieve this my specifying
 * extends &lt;super-class&gt; at class definitions, look at the example, it gives you more
 * comments to understand.
*/

public class MyBoundedClassEx {

	public static void main(String a[]) {
		// Creating object of sub class C and
		// passing it to BoundEx as a type parameter.
		BoundEx&lt;C&gt; bec = new BoundEx&lt;C&gt;(new C());
		bec.doRunTest();
		// Creating object of sub class B and
		// passing it to BoundEx as a type parameter.
		BoundEx&lt;B&gt; beb = new BoundEx&lt;B&gt;(new B());
		beb.doRunTest();
		// similarly passing super class A
		BoundEx&lt;A&gt; bea = new BoundEx&lt;A&gt;(new A());
		bea.doRunTest();
		// If you uncomment below code it will throw compiler error
		// becasue we restricted to only of type A and its sub classes.
		// BoundEx&lt;String&gt; bes = new BoundEx&lt;String&gt;(new String());
		// bea.doRunTest();
	}
}

/**
 * This class only accepts type parametes as any class which extends class A or
 * class A itself. Passing any other type will cause compiler time error
 */
class BoundEx&lt;T extends A&gt; {

	private T objRef;

	public BoundEx(T obj) {
		this.objRef = obj;
	}

	public void doRunTest() {
		this.objRef.printClass();
	}
}

class A {
	public void printClass() {
		System.out.println("I am in super class A");
	}
}

class B extends A {
	public void printClass() {
		System.out.println("I am in sub class B");
	}
}

class C extends A {
	public void printClass() {
		System.out.println("I am in sub class C");
	}
}

/*
 * Example Output
 * 
 * I am in sub class C
 * I am in sub class B
 * I am in super class A
 */</template><template autoinsert="true" context="java" deleted="false" description="How implement bounded types (implements an interface) with generics?" enabled="true" name="MyGenerics_implementInterface">/*
 * As of now we have seen examples for only one type parameter. What happens in case
 * we want to access group of objects comes from same family, means implementing same
 * interface? You can restrict the generics type parameter to a certain group of
 * objects which implements same interface. You can achieve this my specifying extends
 * &lt;interface-name&gt; at class definitions, look at the example, it gives you more
 * comments to understand. You can also specify multiple interfaces at the definision.
 * you can do this by specifying mulitple interfaces seperated by "&amp;". You can also
 * specify class which implements an interface and the interface together.
 * For example:
 * 
 * class MyClass&lt;T extends TestClass &amp; TestInterface&gt; {
 * 
 * Look at example for more understanding.
*/

public class MyBoundedInterface {

	public static void main(String a[]) {

		// Creating object of implementation class X called Y and
		// passing it to BoundExmp as a type parameter.
		BoundExmp&lt;Y&gt; bey = new BoundExmp&lt;Y&gt;(new Y());
		bey.doRunTest();
		// Creating object of implementation class X called Z and
		// passing it to BoundExmp as a type parameter.
		BoundExmp&lt;Z&gt; bez = new BoundExmp&lt;Z&gt;(new Z());
		bez.doRunTest();
		// If you uncomment below code it will throw compiler error
		// becasue we restricted to only of type X implementation classes.
		// BoundExmp&lt;String&gt; bes = new BoundExmp&lt;String&gt;(new String());
		// bea.doRunTest();
	}
}

class BoundExmp&lt;T extends X&gt; {

	private T objRef;

	public BoundExmp(T obj) {
		this.objRef = obj;
	}

	public void doRunTest() {
		this.objRef.printClass();
	}
}

interface X {
	public void printClass();
}

class Y implements X {
	public void printClass() {
		System.out.println("I am in class Y");
	}
}

class Z implements X {
	public void printClass() {
		System.out.println("I am in class Z");
	}
}

/*
 * Example Output
 * 
 * I am in class Y
 * I am in class Z
 */</template><template autoinsert="true" context="java" deleted="false" description="Write a simple generics class example." enabled="true" name="MyGenerics_Simple">/*
 * Below example shows how to create a simple generics class. We have created
 * SimpleGeneric class, which accepts single type parameter. Look at the generics
 * class definition, the type parameter should be followed by class name and should
 * contain with in &lt;&gt;, here T defines the type parameter. You can find comments at
 * example itself.
*/

public class MySimpleGenerics {

	public static void main(String a[]) {

		// we are going to create SimpleGeneric object with String as type parameter
		SimpleGeneric&lt;String&gt; sgs = new SimpleGeneric&lt;String&gt;("JAVA2NOVICE");
		sgs.printType();
		// we are going to create SimpleGeneric object with Boolean as type parameter
		SimpleGeneric&lt;Boolean&gt; sgb = new SimpleGeneric&lt;Boolean&gt;(Boolean.TRUE);
		sgb.printType();
	}
}

/**
 * Here T is a type parameter, and it will be replaced with actual type when the
 * object got created.
 */
class SimpleGeneric&lt;T&gt; {

	// declaration of object type T
	private T objReff = null;

	// constructor to accept type parameter T
	public SimpleGeneric(T param) {
		this.objReff = param;
	}

	public T getObjReff() {
		return this.objReff;
	}

	// this method prints the holding parameter type
	public void printType() {
		System.out.println("Type: " + objReff.getClass().getName());
	}
}

/*
 * Example Output
 * 
 * Type: java.lang.String
 * Type: java.lang.Boolean
 */</template><template autoinsert="true" context="java" deleted="false" description="Write a simple generics class example with two type parameters." enabled="true" name="MyGenerics_SimpleTwoParam">/*
 * Below example shows how to create a simple generics class with two type parameters.
 * Look at the class definition, we defined two types of parameters called
 * U &amp; V, seperated by ",". You can define multiple type parameters seperated by
 * ",". Look at sample code for more comments.
*/

public class MySimpleTwoGenerics {

	public static void main(String a[]) {

		SimpleGen&lt;String, Integer&gt; sample = new SimpleGen&lt;String, Integer&gt;("JAVA2NOVICE", 100);
		sample.printTypes();
	}
}

/**
 * Simple generics class with two type parameters U, V.
 */
class SimpleGen&lt;U, V&gt; {

	// type U object reference
	private U objUreff;
	// type V object reference
	private V objVreff;

	// constructor to accept object type U and object type V
	public SimpleGen(U objU, V objV) {
		this.objUreff = objU;
		this.objVreff = objV;
	}

	public void printTypes() {
		System.out.println("U Type: " + this.objUreff.getClass().getName());
		System.out.println("V Type: " + this.objVreff.getClass().getName());
	}
}

/*
 * Example Output
 * 
 * U Type: java.lang.String
 * V Type: java.lang.Integer
 */</template><template autoinsert="true" context="java" deleted="false" description="What is generics wildcard arguments? Give an example." enabled="true" name="MyGenerics_WildcardArguments">/*
 * Below example exmplains what is wildcard arguments and how it helps us to solve
 * problem. In the example, we have two classes called CompAEmp and CompBEmp extending
 * Emp class. We have a generic class called MyEmployeeUtil, where we have utilities
 * to perform employee functions irrespective of which comapany emp belogns too. This
 * class accepts subclasses of Emp. Incase if we want to compare salaries of two
 * employees, how can we do using MyEmployeeUtil class? U can think that below sample
 * code might work, but it wont work.
 * 
 * Because once you create an object of MyEmployeeUtil class, the type argument will
 * be specific to an instance type. So you can compare between only same object types,
 * ie, you can comapare either objects of CompAEmp or CompBEmp, but not between
 * CompAEmp and CompBEmp. To solve this problem, wildcard argument will helps you.
 * Look at below sample code, which can solve your problem.
 * 
 * So "?" will solve the issue. Look below for complete example. 
*/

public class MyWildcardEx {

	public static void main(String a[]) {

		MyEmployeeUtil&lt;CompAEmp&gt; empA = new MyEmployeeUtil&lt;CompAEmp&gt;(new CompAEmp("Ram", 20000));
		MyEmployeeUtil&lt;CompBEmp&gt; empB = new MyEmployeeUtil&lt;CompBEmp&gt;(new CompBEmp("Krish", 30000));
		MyEmployeeUtil&lt;CompAEmp&gt; empC = new MyEmployeeUtil&lt;CompAEmp&gt;(new CompAEmp("Nagesh", 20000));
		System.out.println("Is salary same? " + empA.isSalaryEqual(empB));
		System.out.println("Is salary same? " + empA.isSalaryEqual(empC));
	}
}

class MyEmployeeUtil&lt;T extends Emp&gt; {

	private T emp;

	public MyEmployeeUtil(T obj) {
		emp = obj;
	}

	public int getSalary() {
		return emp.getSalary();
	}

	public boolean isSalaryEqual(MyEmployeeUtil&lt;?&gt; otherEmp) {

		if (emp.getSalary() == otherEmp.getSalary()) {
			return true;
		}
		return false;
	}

	//// create some utility methods to do employee functionalities
	//
	//
	//
}

class Emp {

	private String name;
	private int salary;

	public Emp(String name, int sal) {
		this.name = name;
		this.salary = sal;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}
}

class CompAEmp extends Emp {

	public CompAEmp(String nm, int sal) {
		super(nm, sal);
	}
}

class CompBEmp extends Emp {

	public CompBEmp(String nm, int sal) {
		super(nm, sal);
	}
}

/*
 * Example Output
 * 
 * Is salary same? false
 * Is salary same? true
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic HashMap Operations." enabled="true" name="MyHashMap_Basic">import java.util.HashMap;

/*
 * Below example shows basic HashMap functionalities like creating object,
 * adding entries, getting values by passing key, checking is hashmap is
 * empty or not, deleting an element and size of the HashMap.
*/

public class MyBasicHashMap {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		// getting value for the given key from hashmap
		System.out.println("Value of second: " + hm.get("second"));
		System.out.println("Is HashMap empty? " + hm.isEmpty());
		hm.remove("third");
		System.out.println(hm);
		System.out.println("Size of the HashMap: " + hm.size());
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * Value of second: SECOND INSERTED
 * Is HashMap empty? false
 * {first=FIRST INSERTED, second=SECOND INSERTED}
 * Size of the HashMap: 2
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from HashMap?" enabled="true" name="MyHashMap_clear">import java.util.HashMap;

/*
 * Below example shows how to delete all elements from the given HashMap at
 * one call. By calling clear() method, we can delete all key-value pairs
 * from HashMap.
*/

public class MyHashMapClear {
	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println("My HashMap content:");
		System.out.println(hm);
		System.out.println("Clearing HashMap:");
		hm.clear();
		System.out.println("Content After clear:");
		System.out.println(hm);
	}
}

/*
 * Example Output
 * 
 * My HashMap content:
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * Clearing HashMap:
 * Content After clear:
 * {}
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete user defined objects as a key from HashMap?" enabled="true" name="MyHashMap_clearUserObject">import java.util.HashMap;
import java.util.Set;

/*
 * Below example shows how to delete user defined objects as a key from HashMap.
 * You can achieve this by implementing equals and hashcode methods at the user
 * defined objects.
*/

public class MyDeleteKeyObject {

	public static void main(String a[]) {

		HashMap&lt;Price, String&gt; hm = new HashMap&lt;Price, String&gt;();
		hm.put(new Price("Banana", 20), "Banana");
		hm.put(new Price("Apple", 40), "Apple");
		hm.put(new Price("Orange", 30), "Orange");
		printMap(hm);
		Price key = new Price("Banana", 20);
		System.out.println("Deleting key...");
		hm.remove(key);
		System.out.println("After deleting key:");
		printMap(hm);
	}

	public static void printMap(HashMap&lt;Price, String&gt; map) {

		Set&lt;Price&gt; keys = map.keySet();
		for (Price p : keys) {
			System.out.println(p + "==&gt;" + map.get(p));
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Apple  price: 40==&gt;Apple
 * In hashcode
 * item: Orange  price: 30==&gt;Orange
 * In hashcode
 * item: Banana  price: 20==&gt;Banana
 * Deleting key...
 * In hashcode
 * In equals
 * After deleting key:
 * In hashcode
 * item: Apple  price: 40==&gt;Apple
 * In hashcode
 * item: Orange  price: 30==&gt;Orange
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy Map content to another HashMap?" enabled="true" name="MyHashMap_copy">import java.util.HashMap;

/*
 * Below example shows how to copy another collection to HashMap.
 * putAll() method helps us to copy another collections to HashMap object.
*/

public class MyHashMapCopy {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		HashMap&lt;String, String&gt; subMap = new HashMap&lt;String, String&gt;();
		subMap.put("s1", "S1 VALUE");
		subMap.put("s2", "S2 VALUE");
		hm.putAll(subMap);
		System.out.println(hm);
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * {third=THIRD INSERTED, first=FIRST INSERTED, s1=S1 VALUE, second=SECOND INSERTED, s2=S2 VALUE}
 */</template><template autoinsert="true" context="java" deleted="false" description="How to eliminate duplicate user defined objects as a key from HashMap?" enabled="true" name="MyHashMap_DupeUser">import java.util.HashMap;
import java.util.Set;

/*
 * Below example shows how to avoid duplicate user defined objects as a key
 * from HashMap. You can achieve this by implementing equals and hashcode
 * methods at the user defined objects.
*/

public class MyDuplicateKeyEx {

	public static void main(String a[]) {

		HashMap&lt;Price, String&gt; hm = new HashMap&lt;Price, String&gt;();
		hm.put(new Price("Banana", 20), "Banana");
		hm.put(new Price("Apple", 40), "Apple");
		hm.put(new Price("Orange", 30), "Orange");
		printMap(hm);
		Price key = new Price("Banana", 20);
		System.out.println("Adding duplicate key...");
		hm.put(key, "Grape");
		System.out.println("After adding dulicate key:");
		printMap(hm);
	}

	public static void printMap(HashMap&lt;Price, String&gt; map) {

		Set&lt;Price&gt; keys = map.keySet();
		for (Price p : keys) {
			System.out.println(p + "==&gt;" + map.get(p));
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * item: Apple  price: 40==&gt;Apple
 * item: Orange  price: 30==&gt;Orange
 * item: Banana  price: 20==&gt;Banana
 * Adding duplicate key...
 * After adding dulicate key:
 * item: Apple  price: 40==&gt;Apple
 * item: Orange  price: 30==&gt;Orange
 * item: Banana  price: 20==&gt;Grape
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get all keys from HashMap?" enabled="true" name="MyHashMap_getAllKeys">import java.util.HashMap;
import java.util.Set;

/*
 * Below example shows how to get all keys from the given HashMap.
 * By calling keySet() method, you can get set object with all key values.
*/

public class MyHashMapKeys {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		Set&lt;String&gt; keys = hm.keySet();
		for (String key : keys) {
			System.out.println(key);
		}
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * third
 * first
 * second
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get entry set from HashMap?" enabled="true" name="MyHashMap_getAllKeyValue">import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

/*
 * Below example shows how to get all key-value pair as Entry objects.
 * Entry class provides getter methods to access key-value details.
 * The method entrySet() provides all entries as set object.
*/

public class MyHashMapEntrySet {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		// getting value for the given key from hashmap
		Set&lt;Entry&lt;String, String&gt;&gt; entires = hm.entrySet();
		for (Entry&lt;String, String&gt; ent : entires) {
			System.out.println(ent.getKey() + " ==&gt; " + ent.getValue());
		}
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * third ==&gt; THIRD INSERTED
 * first ==&gt; FIRST INSERTED
 * second ==&gt; SECOND INSERTED
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through HashMap?" enabled="true" name="MyHashMap_iterate">import java.util.HashMap;
import java.util.Set;

/*
 * Below example shows how to read add elements from HashMap.
 * The method keySet() returns all key entries as a set object.
 * Iterating through each key, we can get corresponding value object.
*/

public class MyHashMapRead {
	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		Set&lt;String&gt; keys = hm.keySet();
		for (String key : keys) {
			System.out.println("Value of " + key + " is: " + hm.get(key));
		}
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * Value of third is: THIRD INSERTED
 * Value of first is: FIRST INSERTED
 * Value of second is: SECOND INSERTED
 */</template><template autoinsert="true" context="java" deleted="false" description="How to search a key in HashMap?" enabled="true" name="MyHashMap_searchKey">import java.util.HashMap;

/*
 * Below example shows how to find whether specified key exists or not.
 * By using containsKey() method you can find out the key existance.
*/

public class MyHashMapKeySearch {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		if (hm.containsKey("first")) {
			System.out.println("The hashmap contains key first");
		} else {
			System.out.println("The hashmap does not contains key first");
		}
		if (hm.containsKey("fifth")) {
			System.out.println("The hashmap contains key fifth");
		} else {
			System.out.println("The hashmap does not contains key fifth");
		}
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * The hashmap contains key first
 * The hashmap does not contains key fifth
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find user defined objects as a key from HashMap?" enabled="true" name="MyHashMap_searchUserOject">import java.util.HashMap;
import java.util.Set;

/*
 * Below example shows how to search user defined objects as a key from HashMap.
 * You can achieve this by implementing equals and hashcode methods at the user
 * defined objects.
*/

public class MyObjectKeySearch {

	public static void main(String a[]) {

		HashMap&lt;Price, String&gt; hm = new HashMap&lt;Price, String&gt;();
		hm.put(new Price("Banana", 20), "Banana");
		hm.put(new Price("Apple", 40), "Apple");
		hm.put(new Price("Orange", 30), "Orange");
		printMap(hm);
		Price key = new Price("Banana", 20);
		System.out.println("Does key available? " + hm.containsKey(key));
	}

	public static void printMap(HashMap&lt;Price, String&gt; map) {

		Set&lt;Price&gt; keys = map.keySet();
		for (Price p : keys) {
			System.out.println(p + "==&gt;" + map.get(p));
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Apple  price: 40==&gt;Apple
 * In hashcode
 * item: Orange  price: 30==&gt;Orange
 * In hashcode
 * item: Banana  price: 20==&gt;Banana
 * In hashcode
 * In equals
 * Does key available? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to search a value in HashMap?" enabled="true" name="MyHashMap_searchValue">import java.util.HashMap;

/*
 * Below example shows how to find whether specified value exists or not.
 * By using containsValue() method you can find out the value existance.
*/

public class MyHashMapValueSearch {

	public static void main(String a[]) {
		HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
		// add key-value pair to hashmap
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		if (hm.containsValue("SECOND INSERTED")) {
			System.out.println("The hashmap contains value SECOND INSERTED");
		} else {
			System.out.println("The hashmap does not contains value SECOND INSERTED");
		}
		if (hm.containsValue("first")) {
			System.out.println("The hashmap contains value first");
		} else {
			System.out.println("The hashmap does not contains value first");
		}
	}
}

/*
 * Example Output
 * 
 * {third=THIRD INSERTED, first=FIRST INSERTED, second=SECOND INSERTED}
 * The hashmap contains value SECOND INSERTED
 * The hashmap does not contains value first
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic HashSet Operations." enabled="true" name="MyHashSet_Basic">import java.util.HashSet;

/*
 * Below example shows basic operations on HashSet object like creating object,
 * adding elements, verifying whether the hashset is empty or not, removing an
 * element, size of the hashset, and to check whether an object exists or not.
*/

public class MyBasicHashSet {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		System.out.println(hs);
		System.out.println("Is HashSet empty? " + hs.isEmpty());
		hs.remove("third");
		System.out.println(hs);
		System.out.println("Size of the HashSet: " + hs.size());
		System.out.println("Does HashSet contains first element? " + hs.contains("first"));
	}
}

/*
 * Example Output
 * 
 * [third, first, second]
 * Is HashSet empty? false
 * [first, second]
 * Size of the HashSet: 2
 * Does HashSet contains first element? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from HashSet?" enabled="true" name="MyHashSet_clear">import java.util.HashSet;

/*
 * Below example shows how to delete all entries at one call from HashSet.
 * By calling clear() method, we can remove all elements from HashSet at once.
*/

public class MyHashSetClear {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		System.out.println("My HashSet content:");
		System.out.println(hs);
		System.out.println("Clearing HashSet:");
		hs.clear();
		System.out.println("Content After clear:");
		System.out.println(hs);
	}
}

/*
 * Example Output
 * 
 * My HashSet content:
 * [third, first, second]
 * Clearing HashSet:
 * Content After clear:
 * []
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy all elements from HashSet to an array?" enabled="true" name="MyHashSet_convertArray">import java.util.HashSet;

/*
 * Below example shows how to copy all elements from HashSet to an array. By calling
 * toArray() method and passing existing array object to this method, we can copy all
 * elements of HashSet to an array.
*/

public class MyHashSetToArray {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		System.out.println("HashSet content: ");
		System.out.println(hs);
		String[] strArr = new String[hs.size()];
		hs.toArray(strArr);
		System.out.println("Copied array content:");
		for (String str : strArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * HashSet content: 
 * [third, first, second]
 * Copied array content:
 * third
 * first
 * second
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy Set content to another HashSet?" enabled="true" name="MyHashSet_copy">import java.util.HashSet;

/*
 * Below example shows how to copy another collection object to HashSet object.
 * By calling addAll() method you can copy another collection to HashSet object.
*/

public class MyHashSetCopy {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		System.out.println(hs);
		HashSet&lt;String&gt; subSet = new HashSet&lt;String&gt;();
		subSet.add("s1");
		subSet.add("s2");
		hs.addAll(subSet);
		System.out.println("HashSet content after adding another collection:");
		System.out.println(hs);
	}
}

/*
 * Example Output
 * 
 * [third, first, second]
 * HashSet content after adding another collection:
 * [third, first, s1, second, s2]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete user defined objects from HashSet?" enabled="true" name="MyHashSet_deleteObject">import java.util.HashSet;

/*
 * Below example shows how to delete user defined objects from HashSet.
 * You can achieve this by implementing equals and hashcode methods at
 * the user defined objects.
*/

public class MylhsDeleteObject {

	public static void main(String a[]) {

		HashSet&lt;Price&gt; lhs = new HashSet&lt;Price&gt;();
		lhs.add(new Price("Banana", 20));
		lhs.add(new Price("Apple", 40));
		lhs.add(new Price("Orange", 30));
		for (Price pr : lhs) {
			System.out.println(pr);
		}
		Price key = new Price("Banana", 20);
		System.out.println("deleting key from set...");
		lhs.remove(key);
		System.out.println("Elements after delete:");
		for (Price pr : lhs) {
			System.out.println(pr);
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Apple  price: 40
 * item: Orange  price: 30
 * item: Banana  price: 20
 * deleting key from set...
 * In hashcode
 * In equals
 * Elements after delete:
 * item: Apple  price: 40
 * item: Orange  price: 30
 */</template><template autoinsert="true" context="java" deleted="false" description="How to eliminate duplicate user defined objects from HashSet?" enabled="true" name="MyHashSet_DupeEntry">import java.util.HashSet;

/*
 * Below example shows how to avoid duplicate user defined objects from HashSet.
 * You can achieve this by implementing equals and hashcode methods at the user
 * defined objects.
*/

public class MyDistElementEx {

	public static void main(String a[]) {

		HashSet&lt;Price&gt; lhm = new HashSet&lt;Price&gt;();
		lhm.add(new Price("Banana", 20));
		lhm.add(new Price("Apple", 40));
		lhm.add(new Price("Orange", 30));
		for (Price pr : lhm) {
			System.out.println(pr);
		}
		Price duplicate = new Price("Banana", 20);
		System.out.println("inserting duplicate object...");
		lhm.add(duplicate);
		System.out.println("After insertion:");
		for (Price pr : lhm) {
			System.out.println(pr);
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Apple  price: 40
 * item: Orange  price: 30
 * item: Banana  price: 20
 * inserting duplicate object...
 * In hashcode
 * In equals
 * After insertion:
 * item: Apple  price: 40
 * item: Orange  price: 30
 * item: Banana  price: 20
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through HashSet?" enabled="true" name="MyHashSet_iterate">import java.util.HashSet;
import java.util.Iterator;

/*
 * Below example shows how to read all elements from the HashSet objects.
 * You can iterate through HashSet by getting Iterator object. By calling iterator()
 * method, you can get Iterator object.
*/

public class MyHashSetRead {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		Iterator&lt;String&gt; itr = hs.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * third
 * first
 * second
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compare two sets and retain elements which are same on both sets?" enabled="true" name="MyHashSet_retainAll">import java.util.HashSet;

/*
 * Below example shows how to compare two sets, and retain the values which are common
 * on both set objects. By calling retainAll() method you can do this operation.
*/

public class MyHashSetRetain {

	public static void main(String a[]) {
		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();
		// add elements to HashSet
		hs.add("first");
		hs.add("second");
		hs.add("third");
		hs.add("apple");
		hs.add("rat");
		System.out.println(hs);
		HashSet&lt;String&gt; subSet = new HashSet&lt;String&gt;();
		subSet.add("rat");
		subSet.add("second");
		subSet.add("first");
		hs.retainAll(subSet);
		System.out.println("HashSet content:");
		System.out.println(hs);
	}
}

/*
 * Example Output
 * 
 * [apple, third, rat, first, second]
 * HashSet content:
 * [rat, first, second]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find user defined objects from HashSet?" enabled="true" name="MyHashSet_searchObject">import java.util.HashSet;

/*
 * Below example shows how to search user defined objects from HashSet.
 * You can achieve this by implementing equals and hashcode methods at
 * the user defined objects.
*/

public class MyHashSetSearchObject {

	public static void main(String a[]) {

		HashSet&lt;Price&gt; lhs = new HashSet&lt;Price&gt;();
		lhs.add(new Price("Banana", 20));
		lhs.add(new Price("Apple", 40));
		lhs.add(new Price("Orange", 30));
		for (Price pr : lhs) {
			System.out.println(pr);
		}
		Price key = new Price("Banana", 20);
		System.out.println("Does set contains key? " + lhs.contains(key));
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Apple  price: 40
 * item: Orange  price: 30
 * item: Banana  price: 20
 * In hashcode
 * In equals
 * Does set contains key? true
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic Hashtable Operations." enabled="true" name="MyHashtable_Basic">import java.util.Hashtable;

/*
 * Below example shows basic operations on Hashtable like creating hashtable object,
 * adding key-value pair, getting the value based on key, checking hashtable is empty
 * or not, removing an element, and size of the hashtable.
*/

public class MyHashtableOperations {

	public static void main(String a[]) {
		// Create hashtable instance
		Hashtable&lt;String, String&gt; ht = new Hashtable&lt;String, String&gt;();
		// add key-value pair to hashtable
		ht.put("first", "FIRST INSERTED");
		ht.put("second", "SECOND INSERTED");
		ht.put("third", "THIRD INSERTED");
		System.out.println(ht);
		// getting value for the given key from hashtable
		System.out.println("Value of key 'second': " + ht.get("second"));
		System.out.println("Is Hashtable empty? " + ht.isEmpty());
		ht.remove("third");
		System.out.println(ht);
		System.out.println("Size of the Hashtable: " + ht.size());
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * Value of key 'second': SECOND INSERTED
 * Is Hashtable empty? false
 * {second=SECOND INSERTED, first=FIRST INSERTED}
 * Size of the Hashtable: 2
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from Hashtable?" enabled="true" name="MyHashtable_clear">import java.util.Hashtable;

/*
 * Below example shows how to delete all key-values at one call from Hashtable.
 * By calling clear() method, we can remove all elements from Hashtable at once.
*/

public class MyHashtableClear {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println("My Hashtable content:");
		System.out.println(hm);
		System.out.println("Clearing Hashtable:");
		hm.clear();
		System.out.println("Content After clear:");
		System.out.println(hm);
	}
}

/*
 * My Hashtable content:
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * Clearing Hashtable:
 * Content After clear:
 * {}
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy Map content to another Hashtable?" enabled="true" name="MyHashtable_copy">import java.util.HashMap;
import java.util.Hashtable;

/*
 * Below example shows how to copy another collection object to Hashtable.
 * Below example copies all HashMap entries to Hashtable. putAll() method helps us to
 * copy another collection object.
*/

public class MyHashtableCopy {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		HashMap&lt;String, String&gt; subMap = new HashMap&lt;String, String&gt;();
		subMap.put("s1", "S1 VALUE");
		subMap.put("s2", "S2 VALUE");
		hm.putAll(subMap);
		System.out.println(hm);
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * {s2=S2 VALUE, third=THIRD INSERTED, second=SECOND INSERTED, s1=S1 VALUE,
 * first=FIRST INSERTED}
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get all keys from Hashtable?" enabled="true" name="MyHashtable_getAllKeys">import java.util.Hashtable;
import java.util.Set;

/*
 * Below example shows how to get list of keys. keySet() method returns Set object
 * will all keys.
*/

public class MyHashtableKeys {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		Set&lt;String&gt; keys = hm.keySet();
		for (String key : keys) {
			System.out.println(key);
		}
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * third
 * second
 * first
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get entry set from Hashtable?" enabled="true" name="MyHashtable_getEntrySet">import java.util.Hashtable;
import java.util.Set;
import java.util.Map.Entry;

/*
 * Below example shows how to get key-value pair as Entry object. Entry object provides
 * getter methods to access key-value objects. entrySet() method returns Set object
 * with Entry values.
*/

public class MyHashtableEntrySet {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		// getting value for the given key from Hashtable
		Set&lt;Entry&lt;String, String&gt;&gt; entires = hm.entrySet();
		for (Entry&lt;String, String&gt; ent : entires) {
			System.out.println(ent.getKey() + " ==&gt; " + ent.getValue());
		}
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * third ==&gt; THIRD INSERTED
 * second ==&gt; SECOND INSERTED
 * first ==&gt; FIRST INSERTED
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through Hashtable?" enabled="true" name="MyHashtable_iterate">import java.util.Hashtable;
import java.util.Set;

/*
 * Below example shows how to read elements from Hashtable. You can iterate through
 * each and every element by getting all keys as set object. Using each element as a
 * key from set, you can values from Hashtable.
*/

public class MyHashtableRead {

	public static void main(String a[]) {

		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		Set&lt;String&gt; keys = hm.keySet();
		for (String key : keys) {
			System.out.println("Value of " + key + " is: " + hm.get(key));
		}
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * Value of third is: THIRD INSERTED
 * Value of second is: SECOND INSERTED
 * Value of first is: FIRST INSERTED
 */</template><template autoinsert="true" context="java" deleted="false" description="How to search a key in Hashtable?" enabled="true" name="MyHashtable_searchKey">import java.util.Hashtable;

/*
 * Below example shows how to search a key from the Hashtable.
 * The method containsKey() helps us to find whether the specified key exists or not.
*/

public class MyHashtableKeySearch {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		if (hm.containsKey("first")) {
			System.out.println("The Hashtable contains key first");
		} else {
			System.out.println("The Hashtable does not contains key first");
		}
		if (hm.containsKey("fifth")) {
			System.out.println("The Hashtable contains key fifth");
		} else {
			System.out.println("The Hashtable does not contains key fifth");
		}
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * The Hashtable contains key first
 * The Hashtable does not contains key fifth
 */</template><template autoinsert="true" context="java" deleted="false" description="How to search a value in Hashtable?" enabled="true" name="MyHashtable_searchValue">import java.util.Hashtable;

/*
 * Below example shows how to search a value from the Hashtable.
 * The method containsValue() helps us to find whether the specified value exists or
 * not.
*/

public class MyHashtableValueSearch {

	public static void main(String a[]) {
		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		System.out.println(hm);
		if (hm.containsValue("SECOND INSERTED")) {
			System.out.println("The Hashtable contains value SECOND INSERTED");
		} else {
			System.out.println("The Hashtable does not contains value SECOND INSERTED");
		}
		if (hm.containsValue("first")) {
			System.out.println("The Hashtable contains value first");
		} else {
			System.out.println("The Hashtable does not contains value first");
		}
	}
}

/*
 * {third=THIRD INSERTED, second=SECOND INSERTED, first=FIRST INSERTED}
 * The Hashtable contains value SECOND INSERTED
 * The Hashtable does not contains value first
 */</template><template autoinsert="true" context="java" deleted="false" description="How to eliminate duplicate keys (user defined objects) with Hashtable?" enabled="true" name="MyHashtableDupEntry">import java.util.Hashtable;
import java.util.Set;

/*
 * Below example shows how to use user defined objects as keys and delete entries.
 * To do this, you have to implement equals and hashcode methods. In below example we
 * are using Emp object as key, and it has implemented equals, and hashcode methods.
*/

public class MyHashtableDupEntry {

	public static void main(String a[]) {

		Hashtable&lt;Empl, String&gt; tm = new Hashtable&lt;Empl, String&gt;();
		tm.put(new Empl(134, "Ram", 3000), "RAM");
		tm.put(new Empl(235, "John", 6000), "JOHN");
		tm.put(new Empl(876, "Crish", 2000), "CRISH");
		tm.put(new Empl(512, "Tom", 2400), "TOM");
		System.out.println("Adding duplicate entry:");
		tm.put(new Empl(512, "Tom", 2400), "TOM");
		System.out.println("Hashtable entries:");
		Set&lt;Empl&gt; keys = tm.keySet();
		for (Empl key : keys) {
			System.out.println(key + " ==&gt; " + tm.get(key));
		}
		System.out.println("Duplicate got eliminated!!!");
	}
}

class Empl {

	private String name;
	private int salary;
	private int id;

	public Empl(int id, String n, int s) {
		this.id = id;
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Id: " + this.id + " -- Name: " + this.name + " -- Salary: " + this.salary;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getId() {
		return id;
	}

	@Override
	public int hashCode() {
		System.out.println("In hashcode");
		return this.getId();
	}

	@Override
	public boolean equals(Object obj) {
		Empl e = null;
		if (obj instanceof Empl) {
			e = (Empl) obj;
		}
		System.out.println("In equals");
		if (this.getId() == e.getId()) {
			return true;
		} else {
			return false;
		}

	}
}

/*
 * In hashcode
 * In hashcode
 * In hashcode
 * In hashcode
 * Adding duplicate entry:
 * In hashcode
 * In equals
 * Hashtable entries:
 * In hashcode
 * In equals
 * Id: 876 -- Name: Crish -- Salary: 2000 ==&gt; CRISH
 * In hashcode
 * In equals
 * Id: 512 -- Name: Tom -- Salary: 2400 ==&gt; TOM
 * In hashcode
 * In equals
 * Id: 235 -- Name: John -- Salary: 6000 ==&gt; JOHN
 * In hashcode
 * In equals
 * Id: 134 -- Name: Ram -- Salary: 3000 ==&gt; RAM
 * Duplicate got eliminated!!!
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read elements using Enumeration in Hashtable?" enabled="true" name="MyHashtableEnumaration">import java.util.Enumeration;
import java.util.Hashtable;

/*
 * Below example shows how to get all keys as Enumeration object.
 * By calling keys() method, we can get all keys as Enumeration object.
 * By using Enumeration methods like hasMoreElements() and nextElement() we can read
 * all values from Hashtable.
*/

public class MyHashtableEnumaration {

	public static void main(String a[]) {

		Hashtable&lt;String, String&gt; hm = new Hashtable&lt;String, String&gt;();
		// add key-value pair to Hashtable
		hm.put("first", "FIRST INSERTED");
		hm.put("second", "SECOND INSERTED");
		hm.put("third", "THIRD INSERTED");
		Enumeration&lt;String&gt; keys = hm.keys();
		while (keys.hasMoreElements()) {
			String key = keys.nextElement();
			System.out.println("Value of " + key + " is: " + hm.get(key));
		}
	}
}

/*
 * Value of third is: THIRD INSERTED
 * Value of second is: SECOND INSERTED
 * Value of first is: FIRST INSERTED
 */</template><template autoinsert="true" context="java" deleted="false" description="Hashtable implementation with equals and hashcode example." enabled="true" name="MyHashtableUserKeys">import java.util.Hashtable;

/*
 * Below example shows how to use user defined objects as keys.
 * To avoid duplicates keys you have to implement equals and hashcode methods.
 * In below example we are using Emp object as key, and it has implemented equals,
 * and hashcode methods. Example also enters duplicate object as key, and you can see
 * that Hashtable eleminates the duplicate keys.
*/

public class MyHashtableUserKeys {

	public static void main(String a[]) {

		Hashtable&lt;Emp, String&gt; tm = new Hashtable&lt;Emp, String&gt;();
		tm.put(new Emp(134, "Ram", 3000), "RAM");
		tm.put(new Emp(235, "John", 6000), "JOHN");
		tm.put(new Emp(876, "Crish", 2000), "CRISH");
		tm.put(new Emp(512, "Tom", 2400), "TOM");
		System.out.println("Fecthing value by creating new key:");

		Emp e = new Emp(512, "Tom", 2400);
		System.out.println(e + " ==&gt; " + tm.get(e));
	}
}

class Emp {

	private String name;
	private int salary;
	private int id;

	public Emp(int id, String n, int s) {
		this.id = id;
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Id: " + this.id + " -- Name: " + this.name + " -- Salary: " + this.salary;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getId() {
		return id;
	}

	@Override
	public int hashCode() {
		System.out.println("In hashcode");
		return this.getId();
	}

	@Override
	public boolean equals(Object obj) {
		Emp e = null;
		if (obj instanceof Emp) {
			e = (Emp) obj;
		}
		System.out.println("In equals");
		if (this.getId() == e.getId()) {
			return true;
		} else {
			return false;
		}

	}
}

/*
 * In hashcode
 * In hashcode
 * In hashcode
 * In hashcode
 * Fecthing value by creating new key:
 * In hashcode
 * In equals
 * Id: 512 -- Name: Tom -- Salary: 2400 ==&gt; TOM
 */</template><template autoinsert="true" context="java" deleted="false" description="How to fetch values with user define object as keys in Hashtable?" enabled="true" name="MyHashtableUserKeys_fetch">import java.util.Hashtable;

/*
 * Below example shows how to use user defined objects as keys and fetch values.
 * To do this, you have to implement equals and hashcode methods. In below example we
 * are using Emp object as key, and it has implemented equals, and hashcode methods.
*/

public class MyHashtableUserKeys {

	public static void main(String a[]) {

		Hashtable&lt;Emp, String&gt; tm = new Hashtable&lt;Emp, String&gt;();
		tm.put(new Emp(134, "Ram", 3000), "RAM");
		tm.put(new Emp(235, "John", 6000), "JOHN");
		tm.put(new Emp(876, "Crish", 2000), "CRISH");
		tm.put(new Emp(512, "Tom", 2400), "TOM");
		System.out.println("Fecthing value by creating new key:");

		Emp e = new Emp(512, "Tom", 2400);
		System.out.println(e + " ==&gt; " + tm.get(e));
	}
}

class Emp {

	private String name;
	private int salary;
	private int id;

	public Emp(int id, String n, int s) {
		this.id = id;
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Id: " + this.id + " -- Name: " + this.name + " -- Salary: " + this.salary;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getId() {
		return id;
	}

	@Override
	public int hashCode() {
		System.out.println("In hashcode");
		return this.getId();
	}

	@Override
	public boolean equals(Object obj) {
		Emp e = null;
		if (obj instanceof Emp) {
			e = (Emp) obj;
		}
		System.out.println("In equals");
		if (this.getId() == e.getId()) {
			return true;
		} else {
			return false;
		}

	}
}

/*
 * In hashcode
 * In hashcode
 * In hashcode
 * In hashcode
 * Fecthing value by creating new key:
 * In hashcode
 * In equals
 * Id: 512 -- Name: Tom -- Salary: 2400 ==&gt; TOM
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through collection objects?" enabled="true" name="MyIterator_hasNext">import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/*
 * You can iterate through any collection object by using Iterator object. It provides
 * two methods to iterate. The hasNext() method returns true if the iteration has more
 * elements. The next() method returns the next element in the iteration. Below example
 * shows how to iterate through an ArrayList.
*/

public class MyCollectionIterator {

	public static void main(String a[]) {

		List&lt;String&gt; myList = new ArrayList&lt;String&gt;();
		myList.add("Java");
		myList.add("Unix");
		myList.add("Oracle");
		myList.add("C++");
		myList.add("Perl");
		Iterator&lt;String&gt; itr = myList.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * Java
 * Unix
 * Oracle
 * C++
 * Perl
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove an element from collection using Iterator object?" enabled="true" name="MyIterator_remove">import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/*
 * Below example shows how to remove an element from collection object using Iterator
 * object. The remove() method removes from the underlying collection the last element
 * returned by the iterator
*/

public class MyItrRemoveElement {

	public static void main(String a[]) {

		String removeElem = "Perl";
		List&lt;String&gt; myList = new ArrayList&lt;String&gt;();
		myList.add("Java");
		myList.add("Unix");
		myList.add("Oracle");
		myList.add("C++");
		myList.add("Perl");
		System.out.println("Before remove:");
		System.out.println(myList);
		Iterator&lt;String&gt; itr = myList.iterator();
		while (itr.hasNext()) {
			if (removeElem.equals(itr.next())) {
				itr.remove();
			}
		}
		System.out.println("After remove:");
		System.out.println(myList);
	}
}

/*
 * Example Output
 * 
 * Before remove:
 * [Java, Unix, Oracle, C++, Perl]
 * After remove:
 * [Java, Unix, Oracle, C++]
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic LinkedHashSet Operations." enabled="true" name="MyLinkedHashSet_Basic">import java.util.LinkedHashSet;

/*
 * Below example shows how to create LinkedHashSet object, adding elements to it,
 * getting size of LinkedHashSet object, and is the set empty or not.
*/

public class MyLkdHashSetOperations {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println(lhs);
		System.out.println("LinkedHashSet size: " + lhs.size());
		System.out.println("Is LinkedHashSet emplty? : " + lhs.isEmpty());
	}
}

/*
 * Example Output
 * 
 * [first, second, third]
 * LinkedHashSet size: 3
 * Is LinkedHashSet emplty? : false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_clear">import java.util.LinkedHashSet;

/*
 * Below example shows how to delete all elements from LinkedHashSet object.
 * By using clear() method, we can delete all elements at once.
*/

public class MyLinkedHashSetClear {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println("My LinkedHashSet content:");
		System.out.println(lhs);
		System.out.println("Clearing LinkedHashSet:");
		lhs.clear();
		System.out.println("Content After clear:");
		System.out.println(lhs);
	}
}

/*
 * Example Output
 * 
 * My LinkedHashSet content:
 * [first, second, third]
 * Clearing LinkedHashSet:
 * Content After clear:
 * []
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add another collection to LinkedHashSet?" enabled="true" name="MyLinkedHashSet_clone">import java.util.HashSet;
import java.util.LinkedHashSet;

/*
 * Below example shows how to add all elements from another collection to
 * LinkedHashSet object. By using addAll() method, we can add all elements
 * from another collection object.
*/

public class MyLhsAddAllEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println(lhs);
		HashSet&lt;String&gt; subSet = new HashSet&lt;String&gt;();
		subSet.add("s1");
		subSet.add("s2");
		lhs.addAll(subSet);
		System.out.println("LinkedHashSet content after adding another collection:");
		System.out.println(lhs);
	}
}

/*
 * Example Output
 * 
 * [first, second, third]
 * LinkedHashSet content after adding another collection:
 * [first, second, third, s2, s1]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find user defined objects from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_contains">import java.util.LinkedHashSet;

/*
 * Below example shows how to search user defined objects from LinkedHashSet.
 * You can achieve this by implementing equals and hashcode methods at the user
 * defined objects.
*/

public class MyLhsUdObjSearch {

	public static void main(String a[]) {

		LinkedHashSet&lt;Price&gt; lhs = new LinkedHashSet&lt;Price&gt;();
		lhs.add(new Price("Banana", 20));
		lhs.add(new Price("Apple", 40));
		lhs.add(new Price("Orange", 30));
		for (Price pr : lhs) {
			System.out.println(pr);
		}
		Price key = new Price("Banana", 20);
		System.out.println("Does set contains key? " + lhs.contains(key));
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Banana  price: 20
 * item: Apple  price: 40
 * item: Orange  price: 30
 * In hashcode
 * In equals
 * Does set contains key? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy content of LinkedHashSet to an array?" enabled="true" name="MyLinkedHashSet_copyArray">import java.util.LinkedHashSet;

/*
 * Below example shows how to copy content of LinkedHashSet elements
 * to an array object.
*/

public class MyLhsToArrayEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to LinkedHashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println("LinkedHashSet content: ");
		System.out.println(lhs);
		String[] strArr = new String[lhs.size()];
		lhs.toArray(strArr);
		System.out.println("Copied array content:");
		for (String str : strArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * LinkedHashSet content: 
 * [first, second, third]
 * Copied array content:
 * first
 * second
 * third
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete specific element from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_deleteElement">import java.util.LinkedHashSet;

/*
 * Below example shows how to delete specific element from LinkedHashSet object.
*/

public class MyLhsDeleteEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println(lhs);
		lhs.remove("second");
		System.out.println("Elements after deleting an element:");
		System.out.println(lhs);
	}
}

/*
 * Example Output
 * 
 * [first, second, third]
 * Elements after deleting an element:
 * [first, third]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete user defined objects from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_deleteObject">import java.util.LinkedHashSet;

/*
 * Below example shows how to delete user defined objects from LinkedHashSet.
 * You can achieve this by implementing equals and hashcode methods at the
 * user defined objects.
*/

public class MylhsDeleteObject {

	public static void main(String a[]) {

		LinkedHashSet&lt;Price&gt; lhs = new LinkedHashSet&lt;Price&gt;();
		lhs.add(new Price("Banana", 20));
		lhs.add(new Price("Apple", 40));
		lhs.add(new Price("Orange", 30));
		for (Price pr : lhs) {
			System.out.println(pr);
		}
		Price key = new Price("Banana", 20);
		System.out.println("deleting key from set...");
		lhs.remove(key);
		System.out.println("Elements after delete:");
		for (Price pr : lhs) {
			System.out.println(pr);
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Banana  price: 20
 * item: Apple  price: 40
 * item: Orange  price: 30
 * deleting key from set...
 * In hashcode
 * In equals
 * Elements after delete:
 * item: Apple  price: 40
 * item: Orange  price: 30
 */</template><template autoinsert="true" context="java" deleted="false" description="How to eliminate duplicate user defined objects from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_DupeEntry">import java.util.LinkedHashSet;

/*
 * Below example shows how to avoid duplicate user defined objects from LinkedHashSet.
 * You can achieve this by implementing equals and hashcode methods at the user
 * defined objects.
*/

public class MyDistElementEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;Price&gt; lhm = new LinkedHashSet&lt;Price&gt;();
		lhm.add(new Price("Banana", 20));
		lhm.add(new Price("Apple", 40));
		lhm.add(new Price("Orange", 30));
		for (Price pr : lhm) {
			System.out.println(pr);
		}
		Price duplicate = new Price("Banana", 20);
		System.out.println("inserting duplicate object...");
		lhm.add(duplicate);
		System.out.println("After insertion:");
		for (Price pr : lhm) {
			System.out.println(pr);
		}
	}
}

class Price {

	private String item;
	private int price;

	public Price(String itm, int pr) {
		this.item = itm;
		this.price = pr;
	}

	public int hashCode() {
		System.out.println("In hashcode");
		int hashcode = 0;
		hashcode = price * 20;
		hashcode += item.hashCode();
		return hashcode;
	}

	public boolean equals(Object obj) {
		System.out.println("In equals");
		if (obj instanceof Price) {
			Price pp = (Price) obj;
			return (pp.item.equals(this.item) &amp;&amp; pp.price == this.price);
		} else {
			return false;
		}
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String toString() {
		return "item: " + item + "  price: " + price;
	}
}

/*
 * Example Output
 * 
 * In hashcode
 * In hashcode
 * In hashcode
 * item: Banana  price: 20
 * item: Apple  price: 40
 * item: Orange  price: 30
 * inserting duplicate object...
 * In hashcode
 * In equals
 * After insertion:
 * item: Banana  price: 20
 * item: Apple  price: 40
 * item: Orange  price: 30
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through LinkedHashSet?" enabled="true" name="MyLinkedHashSet_iterate">import java.util.Iterator;
import java.util.LinkedHashSet;

/*
 * Below example shows how to read all elements from LinkedHashSet object
 * by using Iterator object.
*/

public class MyLhsIterateEx {

	public static void main(String a[]) {
		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		Iterator&lt;String&gt; itr = lhs.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * first
 * second
 * third
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compare two LinkedHashSet and retain elements which are same on both LinkedHashSet?" enabled="true" name="MyLinkedHashSet_retain">import java.util.LinkedHashSet;

/*
 * Below example shows how to compare two LinkedHashSet and retain elements
 * which are same on both LinkedHashSet
*/

public class MyLhsRetainEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to LinkedHashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		lhs.add("apple");
		lhs.add("rat");
		System.out.println(lhs);
		LinkedHashSet&lt;String&gt; subSet = new LinkedHashSet&lt;String&gt;();
		subSet.add("rat");
		subSet.add("second");
		subSet.add("first");
		lhs.retainAll(subSet);
		System.out.println("LinkedHashSet content:");
		System.out.println(lhs);
	}
}

/*
 * Example Output
 * 
 * [first, second, third, apple, rat]
 * LinkedHashSet content:
 * [first, second, rat]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to search an object from LinkedHashSet?" enabled="true" name="MyLinkedHashSet_search">import java.util.LinkedHashSet;

/*
 * Below example shows how to find specific element from LinkedHashSet object.
*/

public class MyLhsSearchEx {

	public static void main(String a[]) {

		LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;();
		// add elements to HashSet
		lhs.add("first");
		lhs.add("second");
		lhs.add("third");
		System.out.println(lhs);
		System.out.println("Does set contains 'first'? " + lhs.contains("first"));
	}
}

/*
 * Example Output
 * 
 * [first, second, third]
 * Does set contains 'first'? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add all elements of a list to LinkedList?" enabled="true" name="MyLinkedList_addAll">import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/*
 * Here we can see example for copying another collection instance objects to existing
 * LinkedList.
*/

public class MyLinkedListNewCollection {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual LinkedList:" + arrl);
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("one");
		list.add("two");
		arrl.addAll(list);
		System.out.println("After Copy: " + arrl);
	}
}

/*
 * Example Output
 * 
 * Actual LinkedList:[First, Second, Third, Random]
 * After Copy: [First, Second, Third, Random, one, two]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add element at first position in LinkedList?" enabled="true" name="MyLinkedList_addFirstPosition">import java.util.LinkedList;

/*
 * Below example shows how to add element at first position in LinkedList.
 * LinkedList provides few methods to add element at first position, those methods
 * are:
 * 
 * addFirst(): Inserts the specified element at the beginning of this list.
 * 
 * offerFirst(): Inserts the specified element at the front of this list.
*/

public class MyAddFirst {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println(arrl);
		System.out.println("Adding element at first position...");
		arrl.addFirst("I am first");
		System.out.println(arrl);
		System.out.println("Adding element at first position...");
		arrl.offerFirst("I am first - 2");
		System.out.println(arrl);
	}
}

/*
 * [First, Second, Third, Random]
 * Adding element at first position...
 * [I am first, First, Second, Third, Random]
 * Adding element at first position...
 * [I am first - 2, I am first, First, Second, Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add element at last position in LinkedList?" enabled="true" name="MyLinkedList_addLastPosition">import java.util.LinkedList;

/*
 * Below example shows how to add element at last position in LinkedList.
 * LinkedList provides few methods to add element at last position,
 * those methods are:
 * 
 * addLast(): Appends the specified element to the end of this list.
 * 
 * offerLast(): Inserts the specified element at the end of this list.
 * 
 * offer(): Adds the specified element as the tail (last element) of this list.
*/

public class MyAddLast {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println(arrl);
		System.out.println("Adding element at last position...");
		arrl.addLast("I am last");
		System.out.println(arrl);
		System.out.println("Adding element at last position...");
		arrl.offerLast("I am last - 1");
		System.out.println(arrl);
		System.out.println("Adding element at last position...");
		arrl.offer("I am last - 2");
		System.out.println(arrl);
	}
}

/*
 * [First, Second, Third, Random]
 * Adding element at last position...
 * [First, Second, Third, Random, I am last]
 * Adding element at last position...
 * [First, Second, Third, Random, I am last, I am last - 1]
 * Adding element at last position...
 * [First, Second, Third, Random, I am last, I am last - 1, I am last - 2]
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic LinkedList Operations." enabled="true" name="MyLinkedlist_Basic">import java.util.LinkedList;

/*
 * Here we can see example for basic operations like creating object for LinkedList,
 * adding objects into LinkedList, searching an object in LinkedList, whether it is
 * listed under this LinkedList instance or not, checking whether the LinkedList is
 * empty or not, and finally size of the LinkedList.
*/

public class MyBasicOperations {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();
		ll.add("Orange");
		ll.add("Apple");
		ll.add("Grape");
		ll.add("Banana");
		System.out.println(ll);
		System.out.println("Size of the linked list: " + ll.size());
		System.out.println("Is LinkedList empty? " + ll.isEmpty());
		System.out.println("Does LinkedList contains 'Grape'? " + ll.contains("Grape"));
	}
}

/*
 * Example Output
 * 
 * [Orange, Apple, Grape, Banana]
 * Size of the linked list: 4
 * Is LinkedList empty? false
 * Does LinkedList contains 'Grape'? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from my LinkedList?" enabled="true" name="MyLinkedList_clear">import java.util.LinkedList;

/*
 * Here we can see example for deleting all objects from LinkedList at one method call.
 * We can do this by calling clear() method on LinkedList, it will delete all objects.
*/

public class ClearMyLinkedList {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual LinkedList:" + arrl);
		arrl.clear();
		System.out.println("After clear LinkedList:" + arrl);
	}
}

/*
 * Example Output
 * 
 * Actual LinkedList:[First, Second, Third, Random]
 * After clear LinkedList:[]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy or clone a LinkedList?" enabled="true" name="MyLinkedList_clone">import java.util.LinkedList;

/*
 * Here we can see example for creating duplicate object of an LinkedList instance.
 * we can done this by using clone() function.
*/

public class MyLinkedListClone {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual LinkedList:" + arrl);
		LinkedList&lt;String&gt; copy = (LinkedList&lt;String&gt;) arrl.clone();
		System.out.println("Cloned LinkedList:" + copy);
	}
}

/*
 * Example Output
 * 
 * Actual LinkedList:[First, Second, Third, Random]
 * Cloned LinkedList:[First, Second, Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find does LinkedList contains all list elements or not?" enabled="true" name="MyLinkedList_containsAll">import java.util.LinkedList;
import java.util.List;

/*
 * Here we can see example for finding whether the instance of an LinkedList contains
 * all objects of another Collection instance. Here we are checking with another List
 * instance.
*/

public class MyElementCheck {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		List&lt;String&gt; list = new LinkedList&lt;String&gt;();
		list.add("Second");
		list.add("Random");
		System.out.println("Does LinkedList contains all list elements?: " + arrl.containsAll(list));
		list.add("one");
		System.out.println("Does LinkedList contains all list elements?: " + arrl.containsAll(list));
	}
}

/*
 * Example Output
 * 
 * Does LinkedList contains all list elements?: true
 * Does LinkedList contains all list elements?: false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert list to csv string format?" enabled="true" name="MyLinkedList_convertCsvString">import java.util.LinkedList;
import java.util.List;

/*
 * This example shows how to convert given list of strings to comma seperated
 * values (csv) format.
*/

public class MyListToCsvString {

	public String getListAsCsvString(List&lt;String&gt; list) {

		StringBuilder sb = new StringBuilder();
		for (String str : list) {
			if (sb.length() != 0) {
				sb.append(",");
			}
			sb.append(str);
		}
		return sb.toString();
	}

	public static void main(String a[]) {

		List&lt;String&gt; li1 = new LinkedList&lt;String&gt;() {
			{
				this.add("animal");
				this.add("nuts");
				this.add("java");
			}
		};
		MyListToCsvString mtc = new MyListToCsvString();
		System.out.println(mtc.getListAsCsvString(li1));
		List&lt;String&gt; li2 = new LinkedList&lt;String&gt;() {
			{
				this.add("java");
				this.add("unix");
				this.add("c++");
			}
		};
		System.out.println(mtc.getListAsCsvString(li2));
	}
}

/*
 * Example Output
 * 
 * animal,nuts,java
 * java,unix,c++
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy LinkedList to array?" enabled="true" name="MyLinkedList_copyArray">import java.util.LinkedList;

/*
 * Here we can see example for copying all content of LinkedList to an array. You can
 * get this done by calling toArray() method.
*/

public class MyLinkedListArray {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Actual LinkedList:" + arrl);
		String[] strArr = new String[arrl.size()];
		arrl.toArray(strArr);
		System.out.println("Created Array content:");
		for (String str : strArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Actual LinkedList:[First, Second, Third, Random]
 * Created Array content:
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to iterate through LinkedList in reverse order?" enabled="true" name="MyLinkedList_iterateReverse">import java.util.Iterator;
import java.util.LinkedList;

/*
 * Below example shows how to iterate through LinkedList in reverse order. The method
 * descendingIterator() returns an Iterator object with reverse order. By iterating
 * through it, you can get the elements in the reverse order.
*/

public class MyReverseIter {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		Iterator&lt;String&gt; itr = arrl.descendingIterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Random
 * Third
 * Second
 * First
 */</template><template autoinsert="true" context="java" deleted="false" description="LinkedList push(), pop() operations examples." enabled="true" name="MyLinkedList_PushPopOpr">import java.util.LinkedList;

/*
 * Below example shows how to call push() and pop() methods on LinkedList objects.
 * 
 * push(): Pushes an element onto the stack represented by this list.
 * 
 * pop(): Pops an element from the stack represented by this list.
*/

public class MyPushPopOpr {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println(arrl);
		arrl.push("push element");
		System.out.println("After push operation:");
		System.out.println(arrl);
		arrl.pop();
		System.out.println("After pop operation:");
		System.out.println(arrl);
	}
}

/*
 * [First, Second, Third, Random]
 * After push operation:
 * [push element, First, Second, Third, Random]
 * After pop operation:
 * [First, Second, Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read first element from LinkedList?" enabled="true" name="MyLinkedList_readFirstPosition">import java.util.LinkedList;

/*
 * Below example shows how to read first element from LinkedList. LinkedList provides
 * few methods to read first element, those methods are:
 * 
 * element(): Retrieves, but does not remove, the head (first element) of this list.
 * 
 * getFirst(): Returns the first element in this list.
 * 
 * peek(): Retrieves, but does not remove, the head (first element) of this list.
 * 
 * peekFirst(): Retrieves, but does not remove, the first element of this list, or
 * returns null if this list is empty.
*/

public class MyFirstElement {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("First Element: " + arrl.element());
		System.out.println("First Element: " + arrl.getFirst());
		System.out.println("First Element: " + arrl.peek());
		System.out.println("First Element: " + arrl.peekFirst());
	}
}

/*
 * First Element: First
 * First Element: First
 * First Element: First
 * First Element: First
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read last element from LinkedList?" enabled="true" name="MyLinkedList_readLastPosition">import java.util.LinkedList;

/*
 * Below example shows how to read last element from LinkedList.
 * LinkedList provides few methods to read last element, those methods are:
 * 
 * getLast(): Returns the last element in this list.
 * 
 * peekLast(): Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
*/

public class MyLastElement {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		System.out.println("Last Element: " + arrl.getLast());
		System.out.println("Last Element: " + arrl.peekLast());
	}
}

/*
 * Last Element: Random
 * Last Element: Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove elements from LinkedList?" enabled="true" name="MyLinkedList_removeElements">import java.util.LinkedList;

/*
 * Below example shows how to remove or delete an element from LinkedList.
 * LinkedList provides few methods to remove elements,
 * those methods are:
 * 
 * remove(): Retrieves and removes the head (first element) of this list.
 * 
 * remove(index): Removes the element at the specified position in this list.
 * 
 * remove(object): Removes the first occurrence of the specified element from this
 * list, if it is present.
 * 
 * removeFirst(): Removes and returns the first element from this list.
 * 
 * removeFirstOccurrence(object): Removes the first occurrence of the specified
 * element in this list (when traversing the list from head to tail).
 * 
 * removeLast(): Removes and returns the last element from this list.
 * 
 * removeLastOccurrence(object): Removes the last occurrence of the specified element in this list (when traversing the list from head to tail).
*/

public class MyAllRemoveOprs {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		arrl.add("four");
		arrl.add("five");
		arrl.add("six");
		arrl.add("seven");
		arrl.add("eight");
		arrl.add("nine");
		System.out.println(arrl);
		System.out.println("Remov() method:" + arrl.remove());
		System.out.println("After remove() method call:");
		System.out.println(arrl);
		System.out.println("remove(index) method:" + arrl.remove(2));
		System.out.println("After remove(index) method call:");
		System.out.println(arrl);
		System.out.println("Remov(object) method:" + arrl.remove("six"));
		System.out.println("After remove(object) method call:");
		System.out.println(arrl);
		System.out.println("removeFirst() method:" + arrl.removeFirst());
		System.out.println("After removeFirst() method call:");
		System.out.println(arrl);
		System.out.println("removeFirstOccurrence() method:" + arrl.removeFirstOccurrence("eight"));
		System.out.println("After removeFirstOccurrence() method call:");
		System.out.println(arrl);
		System.out.println("removeLast() method:" + arrl.removeLast());
		System.out.println("After removeLast() method call:");
		System.out.println(arrl);
		System.out.println("removeLastOccurrence() method:" + arrl.removeLastOccurrence("five"));
		System.out.println("After removeLastOccurrence() method call:");
		System.out.println(arrl);
	}
}

/*
 * [First, Second, Third, Random, four, five, six, seven, eight, nine]
 * Remov() method:First
 * After remove() method call:
 * [Second, Third, Random, four, five, six, seven, eight, nine]
 * remove(index) method:Random
 * After remove(index) method call:
 * [Second, Third, four, five, six, seven, eight, nine]
 * Remov(object) method:true
 * After remove(object) method call:
 * [Second, Third, four, five, seven, eight, nine]
 * removeFirst() method:Second
 * After removeFirst() method call:
 * [Third, four, five, seven, eight, nine]
 * removeFirstOccurrence() method:true
 * After removeFirstOccurrence() method call:
 * [Third, four, five, seven, nine]
 * removeLast() method:nine
 * After removeLast() method call:
 * [Third, four, five, seven]
 * removeLastOccurrence() method:true
 * After removeLastOccurrence() method call:
 * [Third, four, seven]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to reverse LinkedList content?" enabled="true" name="MyLinkedList_reverse">import java.util.Collections;
import java.util.LinkedList;

/*
 * This example shows how to reverse LinkedList content. You can reverse the content
 * by calling Collections.reverse() method. You have to pass LinkedList instance to
 * this method, which reverses the content.
*/

public class MyLinkedListReverse {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		Collections.reverse(list);
		System.out.println("Results after reverse operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after reverse operation:
 * Glass
 * Watch
 * Play
 * Cric
 * Java
 */</template><template autoinsert="true" context="java" deleted="false" description="How to shuffle elements in LinkedList?" enabled="true" name="MyLinkedList_shuffle">import java.util.Collections;
import java.util.LinkedList;

/*
 * This example gives how to shuffle elements in the LinkedList. By calling
 * Collections.shuffle() method you can shuffle the content of the LinkedList.
 * Everytime you call shuffle() method, it generates different order of output.
*/

public class MyLinkedListShuffle {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		list.add("Movie");
		list.add("Girl");

		Collections.shuffle(list);
		System.out.println("Results after shuffle operation:");
		for (String str : list) {
			System.out.println(str);
		}

		Collections.shuffle(list);
		System.out.println("Results after shuffle operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after shuffle operation:
 * Girl
 * Watch
 * Movie
 * Java
 * Glass
 * Cric
 * Play
 * Results after shuffle operation:
 * Glass
 * Girl
 * Watch
 * Movie
 * Java
 * Cric
 * Play
 */</template><template autoinsert="true" context="java" deleted="false" description="How to sort LinkedList using Comparator?" enabled="true" name="MyLinkedList_sortComparator">import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;

/*
 * This example gives you how to sort an LinkedList using Comparator.
 * The LinkedList contains user defined objects. By using Collections.sort() method
 * you can sort the LinkedList. You have to pass Comparator object which contains your
 * sort logic. The example sorts the Empl objects based on highest salary.
*/

public class MyLinkedListSort {

	public static void main(String a[]) {

		LinkedList&lt;Empl&gt; list = new LinkedList&lt;Empl&gt;();
		list.add(new Empl("Ram", 3000));
		list.add(new Empl("John", 6000));
		list.add(new Empl("Crish", 2000));
		list.add(new Empl("Tom", 2400));
		Collections.sort(list, new MySalaryComp());
		System.out.println("Sorted list entries: ");
		for (Empl e : list) {
			System.out.println(e);
		}
	}
}

class MySalaryComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		if (e1.getSalary() &lt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl {

	private String name;
	private int salary;

	public Empl(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Sorted list entries: 
 * Name: John-- Salary: 6000
 * Name: Ram-- Salary: 3000
 * Name: Tom-- Salary: 2400
 * Name: Crish-- Salary: 2000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get sub list from LinkedList?" enabled="true" name="MyLinkedList_subList">import java.util.LinkedList;
import java.util.List;

/*
 * Here we can see example for getting LinkedList content based on range of index.
 * By specifing the start and end index of the range, you can get the sub-list.
*/

public class MyLinkedListSubRange {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		arrl.add("Click");
		System.out.println("Actual LinkedList:" + arrl);
		List&lt;String&gt; list = arrl.subList(2, 4);
		System.out.println("Sub List: " + list);
	}
}

/*
 * Example Output
 * 
 * Actual LinkedList:[First, Second, Third, Random, Click]
 * Sub List: [Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to swap two elements in a LinkedList?" enabled="true" name="MyLinkedList_swap">import java.util.Collections;
import java.util.LinkedList;

/*
 * This example gives how to swap two elements in the LinkedList. By calling
 * Collections.swap() method you can swap two elements of the LinkedList. You have to
 * pass the indexes which you need to swap.
*/

public class MyLinkedListSwap {

	public static void main(String a[]) {

		LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
		list.add("Java");
		list.add("Cric");
		list.add("Play");
		list.add("Watch");
		list.add("Glass");
		list.add("Movie");
		list.add("Girl");

		Collections.swap(list, 2, 5);
		System.out.println("Results after swap operation:");
		for (String str : list) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Results after swap operation:
 * Java
 * Cric
 * Movie
 * Watch
 * Glass
 * Play
 * Girl
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read all elements in LinkedList by using iterator?" enabled="true" name="MyLinkedListIterate">import java.util.Iterator;
import java.util.LinkedList;

/*
 * Here we can see example for reading all elements from LinkedList by using Iterator.
 * Also you can iterate through the LinkedList based on index too.
*/

public class MyLinkedListIterate {

	public static void main(String a[]) {
		LinkedList&lt;String&gt; arrl = new LinkedList&lt;String&gt;();
		// adding elements to the end
		arrl.add("First");
		arrl.add("Second");
		arrl.add("Third");
		arrl.add("Random");
		Iterator&lt;String&gt; itr = arrl.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="Java ListIterator Sample Code" enabled="true" name="MyListIterator">import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

/*
 * Using ListIterator, we can iterate all elements of a list in either direction. You
 * can access next element by calling next() method, and also you can access previous
 * element by calling previous() method on the list.
*/

public class MyListIterator {
	public static void main(String a[]) {
		List&lt;Integer&gt; li = new ArrayList&lt;Integer&gt;();
		ListIterator&lt;Integer&gt; litr = null;
		li.add(23);
		li.add(98);
		li.add(29);
		li.add(71);
		li.add(5);
		litr = li.listIterator();
		System.out.println("Elements in forward directiton");
		while (litr.hasNext()) {
			System.out.println(litr.next());
		}
		System.out.println("Elements in backward directiton");
		while (litr.hasPrevious()) {
			System.out.println(litr.previous());
		}
	}
}

/*
 * Example Output
 * 
 * Elements in forward directiton
 * 23
 * 98
 * 29
 * 71
 * 5
 * Elements in backward directiton
 * 5
 * 71
 * 29
 * 98
 * 23
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get absolute value in java?" enabled="true" name="MyMath_abs">/*
 * In mathematics, the absolute value (or modulus) |a| of a real number
 * a is the numerical value of a without regard to its sign. So, for
 * example, the absolute value of 3 is 3, and the absolute value of -3
 * is also 3. The absolute value of a number may be thought of as its
 * distance from zero. Below example shows how to get absolute value
 * using Math.abs() method.
*/

public class MyAbsEx {

	public static void main(String[] args) {

		double a = -23.45;
		int b = 234;
		double c = 12.54;
		System.out.println("absolute value of a: " + Math.abs(a));
		System.out.println("absolute value of b: " + Math.abs(b));
		System.out.println("absolute value of c: " + Math.abs(c));
	}
}

/*
 * Example Output
 * 
 * absolute value of a: 23.45
 * absolute value of b: 234
 * absolute value of c: 12.54
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get cube root of a value in java?" enabled="true" name="MyMath_cbrt">/*
 * Below example shows how to get cube root of the given number in java
 * by using Math.cbrt() method.
*/

public class MyCubeRtEx {

	public static void main(String a[]) {

		System.out.println("Cube root of 10: " + Math.cbrt(10));
		System.out.println("Cube root of 625: " + Math.cbrt(625));
		System.out.println("Cube root of 1090: " + Math.cbrt(1090));
	}
}

/*
 * Example Output
 * 
 * Cube root of 10: 2.154434690031884
 * Cube root of 625: 8.549879733383484
 * Cube root of 1090: 10.291424665715065
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get ceiling value of a number in java?" enabled="true" name="MyMath_ceil">/*
 * We can get ceiling value of a number by caling Math.ceil() method.
 * It returns the smallest integer which is not less than the argument
 * value. Below example shows how to get ceil value.
*/

public class MyCeilEx {

	public static void main(String[] args) {

		System.out.println("Ceiling value of 45: " + Math.ceil(45));
		System.out.println("Ceiling value of -45.6: " + Math.ceil(-45.6));
		System.out.println("Ceiling value of 72.1: " + Math.ceil(72.1));
		System.out.println("Ceiling value of 45.3: " + Math.ceil(45.3));
	}
}

/*
 * Example Output
 * 
 * Ceiling value of 45: 45.0
 * Ceiling value of -45.6: -45.0
 * Ceiling value of 72.1: 73.0
 * Ceiling value of 45.3: 46.0
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.copySign() method." enabled="true" name="MyMath_copySign">/*
 * Math.copySign() method returns the first argument with the sign
 * of the second argument.
*/

public class MyCopySignEx {

	public static void main(String a[]) {

		System.out.println("After copying sign from -10, the value is: " + Math.copySign(20.5, -10));
		System.out.println("After copying sign from -3, the value is: " + Math.copySign(23.1, -3));
	}
}

/*
 * Example Output
 * 
 * After copying sign from -10, the value is: -20.5
 * After copying sign from -3, the value is: -23.1
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate trigonometric cosine of an angle in java?" enabled="true" name="MyMath_cos">/*
 * Math.cos() method returns the trigonometric cosine value of an angle.
*/

public class MyCosEx {

	public static void main(String a[]) {

		System.out.println("Value of cos(90) is: " + Math.cos(90));
		System.out.println("Value of cos(45) is: " + Math.cos(45));
		System.out.println("Value of cos(30) is: " + Math.cos(30));
	}
}

/*
 * Example Output
 * 
 * Value of cos(90) is: -0.4480736161291702
 * Value of cos(45) is: 0.5253219888177297
 * Value of cos(30) is: 0.15425144988758405
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get exponential value of a number in java?" enabled="true" name="MyMath_exp">/*
 * Math.exp() method gives you the exponential value of the given number.
 * Below example shows how to get exponential value.
*/

public class MyExpEx {

	public static void main(String a[]) {
		System.out.println("Exponential value of 5: " + Math.exp(5));
		System.out.println("Exponential value of 25: " + Math.exp(25));
		System.out.println("Exponential value of 16: " + Math.exp(16));
	}
}

/*
 * Example Output
 * 
 * Exponential value of 5: 148.4131591025766
 * Exponential value of 25: 7.200489933738588E10
 * Exponential value of 16: 8886110.520507872
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.expm1() method." enabled="true" name="MyMath_expm1">/*
 * Math.expm1() method gives you the exponential value minus one of the
 * given number. Below example shows how to get it.
*/

public class MyExpm1Ex {

	public static void main(String a[]) {
		System.out.println("(Exponential value-1) of 5: " + Math.expm1(5));
		System.out.println("(Exponential value-1) of 25: " + Math.expm1(25));
		System.out.println("(Exponential value-1) of 16: " + Math.expm1(16));
	}
}

/*
 * Example Output
 * 
 * (Exponential value-1) of 5: 147.4131591025766
 * (Exponential value-1) of 25: 7.200489933638588E10
 * (Exponential value-1) of 16: 8886109.520507872
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get floor value of a number in java?" enabled="true" name="MyMath_floor">/*
 * The Math.floor() method returns the largest integer which is not
 * grater than the argument value. 
*/

public class MyFloorEx {

	public static void main(String a[]) {

		System.out.println("Floor value of 45: " + Math.floor(45));
		System.out.println("Floor value of -45.6: " + Math.floor(-45.6));
		System.out.println("Floor value of 72.1: " + Math.floor(72.1));
		System.out.println("Floor value of 45.3: " + Math.floor(45.3));
	}
}

/*
 * Example Output
 * 
 * Floor value of 45: 45.0
 * Floor value of -45.6: -46.0
 * Floor value of 72.1: 72.0
 * Floor value of 45.3: 45.0
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate exponent of the given number?" enabled="true" name="MyMath_getExponent">/*
 * The exponential function is f(x) = ex. The Math.getExponent() method
 * is used to get the x value of the given parameter, in which the
 * parameter is a result of exponential function calculation.
*/

public class MyExponentEx {

	public static void main(String a[]) {

		System.out.println("Exponent value of 15.0 is: " + Math.getExponent(15.0));
		System.out.println("Exponent value of 22.0 is: " + Math.getExponent(22.0));
		System.out.println("Exponent value of 65 is: " + Math.getExponent(65));
	}
}

/*
 * Example Output
 * 
 * Exponent value of 15.0 is: 3
 * Exponent value of 22.0 is: 4
 * Exponent value of 65 is: 6
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate the length of hypotenuse in java?" enabled="true" name="MyMath_hypot">/*
 * In geometry, a hypotenuse is the longest side of a right-angled
 * triangle, the side opposite the right angle. The length of the
 * hypotenuse of a right triangle can be found using the Pythagorean
 * theorem, which states that the square of the length of the hypotenuse
 * equals the sum of the squares of the lengths of the other two sides.
*/

public class MyHypotEx {

	public static void main(String[] args) {

		int x = 10;
		int y = 20;
		System.out.println("The length of hypotenuse is: " + Math.hypot(x, y));
	}
}

/*
 * Example Output
 * 
 * The length of hypotenuse is: 22.360679774997898
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate natural logarithm value of a number in java?" enabled="true" name="MyMath_log">/*
 * Below example shows how to calculate natural logarithm value of a
 * given number using Math.log() function.
*/

public class MyLogEx {

	public static void main(String a[]) {

		System.out.println("Natural logarithm value of 2 is: " + Math.log(2));
		System.out.println("Natural logarithm value of 10 is: " + Math.log(10));
		System.out.println("Natural logarithm value of 15 is: " + Math.log(15));
	}
}

/*
 * Example Output
 * 
 * Natural logarithm value of 2 is: 0.6931471805599453
 * Natural logarithm value of 10 is: 2.302585092994046
 * Natural logarithm value of 15 is: 2.70805020110221
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate base 10 logarithm value of a number in java?" enabled="true" name="MyMath_log10">/*
 * Below example shows how to calculate base 10 logarithm value of a
 * given number using Math.log10() function.
*/

public class MyLogBase10Ex {

	public static void main(String a[]) {

		System.out.println("Base 10 logarithm value of 2 is: " + Math.log10(2));
		System.out.println("Base 10 logarithm value of 10 is: " + Math.log10(10));
		System.out.println("Base 10 logarithm value of 15 is: " + Math.log10(15));
	}
}

/*
 * Example Output
 * 
 * Base 10 logarithm value of 2 is: 0.3010299956639812
 * Base 10 logarithm value of 10 is: 1.0
 * Base 10 logarithm value of 15 is: 1.1760912590556813
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get max number between two numbers?" enabled="true" name="MyMath_max">/*
 * The Math.max() method returns the maximum number of the given two
 * numbers. Below example shows how to get max number.
*/

public class MyMaxEx {

	public static void main(String[] args) {

		System.out.println("Max value of 523, 456 is: " + Math.max(523, 456));
		System.out.println("Max value of 34.23, 45 is: " + Math.max(34.23, 45));
		System.out.println("Max value of 41.89, 23.45 is: " + Math.max(41.89, 23.45));
	}
}

/*
 * Example Output
 * 
 * Max value of 523, 456 is: 523
 * Max value of 34.23, 45 is: 45.0
 * Max value of 41.89, 23.45 is: 41.89
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get min number between two numbers?" enabled="true" name="MyMath_min">/*
 * The Math.min() method returns the minimum number of the given two
 * numbers. Below example shows how to get min number.
*/

public class MyMinEx {

	public static void main(String[] args) {

		System.out.println("Min value of 523, 456 is: " + Math.min(523, 456));
		System.out.println("Min value of 34.23, 45 is: " + Math.min(34.23, 45));
		System.out.println("Min value of 41.89, 23.45 is: " + Math.min(41.89, 23.45));
	}
}

/*
 * Example Output
 * 
 * Min value of 523, 456 is: 456
 * Min value of 34.23, 45 is: 34.23
 * Min value of 41.89, 23.45 is: 23.45
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.nextAfter() method." enabled="true" name="MyMath_nextAfter">/*
 * Math.nextAfter() method returns the floating-point number adjacent
 * to the first argument in the direction of the second argument.
*/

public class MyNextAfterEx {

	public static void main(String a[]) {

		System.out.println("Next after value of 10 in the direction of 7: " + Math.nextAfter(10, 7));
		System.out.println("Next after value of 10 in the direction of 12: " + Math.nextAfter(10, 12));
	}
}

/*
 * Example Output
 * 
 * Next after value of 10 in the direction of 7: 9.999999
 * Next after value of 10 in the direction of 12: 10.000001
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.nextUp() method." enabled="true" name="MyMath_nextUp">/*
 * Math.nextUp() method returns the floating-point value adjacent to the
 * given number in the direction of positive infinity.
*/

public class MyNextUpEx {

	public static void main(String a[]) {

		System.out.println("Next up value for 21.3 is: " + Math.nextUp(21.3));
		System.out.println("Next up value for 29.2 is: " + Math.nextUp(29.2));
	}
}

/*
 * Example Output
 * 
 * Next up value for 21.3 is: 21.300000000000004
 * Next up value for 29.2 is: 29.200000000000003
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.pow() method." enabled="true" name="MyMath_pow">/*
 * The Math.pow() method returns the value of the first argument raised
 * to the power of the second argument.
*/

public class MyPowEx {

	public static void main(String a[]) {

		System.out.println("2 to the power of 3 is: " + Math.pow(2, 3));
		System.out.println("6.5 to the power of 5 is: " + Math.pow(6.5, 5));
		System.out.println("2.9 to the power of 3.3 is: " + Math.pow(2.9, 3.3));
	}
}

/*
 * Example Output
 * 
 * 2 to the power of 3 is: 8.0
 * 6.5 to the power of 5 is: 11602.90625
 * 2.9 to the power of 3.3 is: 33.567066817909655
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get random number between 0 to 1 in java?" enabled="true" name="MyMath_random">/*
 * Math.random() method returns a double value with a positive sign,
 * greater than or equal to 0.0 and less than 1.0.
*/

public class MyRandomEx {

	public static void main(String a[]) {

		System.out.println("Random number: " + Math.random());
		System.out.println("Random number: " + Math.random());
		System.out.println("Random number: " + Math.random());
	}
}

/*
 * Example Output
 * 
 * Random number: 0.38874531973153403
 * Random number: 0.4359630896151976
 * Random number: 0.3891766218910018
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.rint() method." enabled="true" name="MyMath_rint">/*
 * Math.rint() method returns the double value that is closest in value
 * to the argument and is equal to a mathematical integer.
*/

public class MyRintEx {

	public static void main(String a[]) {

		System.out.println("rint value of 12.345 is: " + Math.rint(12.345));
		System.out.println("rint value of 24.298 is: " + Math.rint(24.298));
		System.out.println("rint value of 76.65 is: " + Math.rint(76.65));
	}
}

/*
 * Example Output
 * 
 * rint value of 12.345 is: 12.0
 * rint value of 24.298 is: 24.0
 * rint value of 76.65 is: 77.0
 */</template><template autoinsert="true" context="java" deleted="false" description="How to round-off decimal number to nearest integer in java?" enabled="true" name="MyMath_round">/*
 * Math.round() method returns closest integer or long value for the
 * given decimal value.
*/

public class MyRoundEx {

	public static void main(String a[]) {
		System.out.println("23.2 after rounding: " + Math.round(23.2));
		System.out.println("16.8 after rounding: " + Math.round(16.8));
		System.out.println("15.5 after rounding: " + Math.round(15.5));
	}
}

/*
 * Example Output
 * 
 * 23.2 after rounding: 23
 * 16.8 after rounding: 17
 * 15.5 after rounding: 16
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for Math.signum() method." enabled="true" name="MyMath_signum">/*
 * Math.signum() function returns zero if the passed argument is zero,
 * 1.0 if the passed argument is greater than zero, -1.0 if the passed
 * argument is less than zero.
*/

public class MySignumEx {

	public static void main(String a[]) {

		System.out.println("signum value of 20.23 is: " + Math.signum(20.23));
		System.out.println("signum value of 0 is: " + Math.signum(0));
		System.out.println("signum value of -20.23 is: " + Math.signum(-20.23));
	}
}

/*
 * Example Output
 * 
 * signum value of 20.23 is: 1.0
 * signum value of 0 is: 0.0
 * signum value of -20.23 is: -1.0
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate trigonometric sine of an angle in java?" enabled="true" name="MyMath_sin">/*
 * Math.sin() method returns the trigonometric sine value of an angle.
*/

public class MySineEx {

	public static void main(String a[]) {

		System.out.println("Value of sin(90) is: " + Math.sin(90));
		System.out.println("Value of sin(45) is: " + Math.sin(45));
		System.out.println("Value of sin(30) is: " + Math.sin(30));
	}
}

/*
 * Example Output
 * 
 * Value of sin(90) is: 0.8939966636005579
 * Value of sin(45) is: 0.8509035245341184
 * Value of sin(30) is: -0.9880316240928618
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get square root of a number in java?" enabled="true" name="MyMath_sqrt">/*
 * Math.sqrt() function returns rounded positive square root of the
 * given number.
*/

public class MySqrtEx {

	public static void main(String a[]) {
		System.out.println("Square root of 16 is: " + Math.sqrt(16));
		System.out.println("Square root of 4.6 is: " + Math.sqrt(4.6));
		System.out.println("Square root of 21 is: " + Math.sqrt(21));
	}
}

/*
 * Example Output
 * 
 * Square root of 16 is: 4.0
 * Square root of 4.6 is: 2.1447610589527217
 * Square root of 21 is: 4.58257569495584
 */</template><template autoinsert="true" context="java" deleted="false" description="How to calculate trigonometric tangent of an angle in java?" enabled="true" name="MyMath_tan">/*
 * Math.tan() method returns the trigonometric tangent value of an angle.
*/

public class MyTanEx {

	public static void main(String a[]) {

		System.out.println("Value of tan(90) is: " + Math.tan(90));
		System.out.println("Value of tan(45) is: " + Math.tan(45));
		System.out.println("Value of tan(30) is: " + Math.tan(30));
	}
}

/*
 * Example Output
 * 
 * Value of tan(90) is: -1.995200412208242
 * Value of tan(45) is: 1.6197751905438615
 * Value of tan(30) is: -6.405331196646276
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert an angle from radians to degrees?" enabled="true" name="MyMath_toDegrees">/*
 * Math.toDegrees() method converts the given angle from radians to
 * degrees format.
*/

public class MyRadTodegEx {

	public static void main(String a[]) {

		System.out.println("Radiance 1.0 in degrees: " + Math.toDegrees(1.0));
		System.out.println("Radiance 2.0 in degrees: " + Math.toDegrees(2.0));
	}
}

/*
 * Example Output
 * 
 * Radiance 1.0 in degrees: 57.29577951308232
 * Radiance 2.0 in degrees: 114.59155902616465
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert an angle from degrees to radians?" enabled="true" name="MyMath_toRadians">/*
 * Math.toRadians() method converts the given angle from degrees to
 * radians format.
*/

public class MyDegToRad {

	public static void main(String a[]) {

		System.out.println("30 Degrees in radians: " + Math.toRadians(30));
		System.out.println("90 Degrees in radians: " + Math.toRadians(90));
	}
}

/*
 * Example Output
 * 
 * 30 Degrees in radians: 0.5235987755982988
 * 90 Degrees in radians: 1.5707963267948966
 */</template><template autoinsert="true" context="java" deleted="false" description="Comparison of Algorithms" enabled="true" name="MyPerfomanceComparison">/*
 * Comparison of Algorithms
 */

public class MyPerfomanceComparison {
	public static void main(String[] args) {
		concatenate(args);		
	}
	
	private static void concatenate(String[] args) {
		//Slow
		Stopwatch.start();
		String x = "a" + args.length + "b";
		Stopwatch.stop();

		//Faster
		Stopwatch.start();
		String y = "a" + args.length + "b";

		if (args.length == 1)
			y = y + args[0];
		Stopwatch.stop();
		
		//Fastest
		Stopwatch.start();
		StringBuilder z = new StringBuilder("a");
		z.append(args.length);
		z.append("b");
		if (args.length == 1)
			z.append(args[0]);		
		Stopwatch.stop();

		System.out.println(x);
		System.out.println(y);
		System.out.println(z);
	}
}



/*
 * Implementation of Time Measurement in Nanoseconds Billion
 */

class Stopwatch {

	private static long startTime;

	public static void start() {

		startTime = System.nanoTime();

	}

	public static void stop() {
		long stopTime = System.nanoTime();
		long elapsedTime = stopTime - startTime;
		System.out.println(elapsedTime + " Nanoseconds");
	}

}

/*
 * Example Output
 * 
 * 6425 Nanoseconds
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get process environment variables in java at runtime?" enabled="true" name="MyProcessBuilder_getEnvDetails">import java.util.Map;
import java.util.Set;

/*
 * The ProcessBuilder.environment() method returns you the
 * ProcessBuilder's environemnt. Below example shows how to read it.
*/

public class MyEnvDetails {

	public static void main(String a[]) {

		ProcessBuilder pb = new ProcessBuilder();
		Map&lt;String, String&gt; envMap = pb.environment();
		Set&lt;String&gt; keys = envMap.keySet();
		for (String key : keys) {
			System.out.println(key + " ==&gt; " + envMap.get(key));
		}
	}
}

/*
 * Example Output
 * 
 * PATH ==&gt; /usr/games:/home/colblair/.local/share/umake/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin
 * XAUTHORITY ==&gt; /home/colblair/.Xauthority
 * XDG_DATA_DIRS ==&gt; /usr/share/ubuntustudio:/usr/share/xfce4:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop:/usr/share
 * GDMSESSION ==&gt; ubuntustudio
 * MANDATORY_PATH ==&gt; /usr/share/gconf/ubuntustudio.mandatory.path
 * DBUS_SESSION_BUS_ADDRESS ==&gt; unix:path=/run/user/1000/bus
 * DEFAULTS_PATH ==&gt; /usr/share/gconf/ubuntustudio.default.path
 * XDG_CURRENT_DESKTOP ==&gt; XFCE
 * SSH_AGENT_PID ==&gt; 1900
 * CLUTTER_BACKEND ==&gt; x11
 * SESSION_MANAGER ==&gt; local/XanaMidi:@/tmp/.ICE-unix/1918,unix/XanaMidi:/tmp/.ICE-unix/1918
 * QT_LINUX_ACCESSIBILITY_ALWAYS_ON ==&gt; 1
 * LOGNAME ==&gt; colblair
 * PWD ==&gt; /home/colblair
 * DERBY_HOME ==&gt; /usr/lib/jvm/java-8-oracle/db
 * LANGUAGE ==&gt; de_DE
 * SHELL ==&gt; /bin/bash
 * GTK2_MODULES ==&gt; overlay-scrollbar
 * J2SDKDIR ==&gt; /usr/lib/jvm/java-8-oracle
 * GTK_MODULES ==&gt; gail:atk-bridge
 * J2REDIR ==&gt; /usr/lib/jvm/java-8-oracle/jre
 * GDK_SCALE ==&gt; 1
 * XDG_SESSION_PATH ==&gt; /org/freedesktop/DisplayManager/Session0
 * XDG_SESSION_DESKTOP ==&gt; ubuntustudio
 * SHLVL ==&gt; 0
 * GLADE_CATALOG_PATH ==&gt; :
 * OXYGEN_DISABLE_INNER_SHADOWS_HACK ==&gt; 1
 * JAVA_HOME ==&gt; /usr/lib/jvm/java-8-oracle
 * XFILESEARCHPATH ==&gt; /usr/dt/app-defaults/%L/Dt
 * XDG_CONFIG_DIRS ==&gt; /etc/xdg/xdg-ubuntustudio:/etc/xdg:/etc/xdg
 * GLADE_PIXMAP_PATH ==&gt; :
 * LANG ==&gt; de_DE.UTF-8
 * XDG_SEAT_PATH ==&gt; /org/freedesktop/DisplayManager/Seat0
 * XDG_SESSION_ID ==&gt; c2
 * XDG_SESSION_TYPE ==&gt; x11
 * DISPLAY ==&gt; :0.0
 * QT_STYLE_OVERRIDE ==&gt; gtk
 * GDM_LANG ==&gt; de_DE
 * XDG_GREETER_DATA_DIR ==&gt; /var/lib/lightdm-data/colblair
 * LIBOVERLAY_SCROLLBAR ==&gt; 0
 * GDK_CORE_DEVICE_EVENTS ==&gt; 1
 * DESKTOP_SESSION ==&gt; ubuntustudio
 * USER ==&gt; colblair
 * XDG_MENU_PREFIX ==&gt; xfce-
 * QT_ACCESSIBILITY ==&gt; 1
 * SSH_AUTH_SOCK ==&gt; /run/user/1000/keyring/ssh
 * XDG_SEAT ==&gt; seat0
 * GLADE_MODULE_PATH ==&gt; :
 * GTK_OVERLAY_SCROLLING ==&gt; 0
 * NLSPATH ==&gt; /usr/dt/lib/nls/msg/%L/%N.cat
 * XDG_VTNR ==&gt; 7
 * XDG_RUNTIME_DIR ==&gt; /run/user/1000
 * HOME ==&gt; /home/colblair
 */</template><template autoinsert="true" context="java" deleted="false" description="How to invoke other applicatons in java?" enabled="true" name="MyProcessBuilder_invokeOtherApps">import java.io.IOException;

/*
 * By using ProcessBuilder class, you can invoke any application in java.
 * Below example shows how to run a java class using ProcessBuilder
 * class. Here first argument takes the command, and command arguments
 * follows after this. Here first argument invokes java.exe file, and
 * second argument passes MyTest.classfile to java application. You can
 * pass any number of arguments to an application.
*/

public class MyInvokeOtherApps {

	public static void main(String a[]) {

		ProcessBuilder pb = new ProcessBuilder("java", "MyTest");
		try {
			pb.start();
			System.out.println("Process has been started.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

/*
 * Example Output
 * 
 * Process has been started.
 */</template><template autoinsert="true" context="java" deleted="false" description="How to run ProcessBuilder with list of commands?" enabled="true" name="MyProcessBuilder_runMultipleCommands">import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/*
 * Below example shows how to run ProcessBuilder with a command list.
 * The list contains the actual command and its arguments.
*/

public class MyMultipleCommandsEx {

	public static void main(String a[]) {

		InputStream is = null;
		ByteArrayOutputStream baos = null;
		List&lt;String&gt; commands = new ArrayList&lt;String&gt;();
		commands.add("ls");
		commands.add("-l");
		commands.add("/");
		ProcessBuilder pb = new ProcessBuilder(commands);
		try {
			Process prs = pb.start();
			is = prs.getInputStream();
			byte[] b = new byte[1024];
			int size = 0;
			baos = new ByteArrayOutputStream();
			while ((size = is.read(b)) != -1) {
				baos.write(b, 0, size);
			}
			System.out.println(new String(baos.toByteArray()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (is != null)
					is.close();
				if (baos != null)
					baos.close();
			} catch (Exception ex) {
			}
		}
	}
}

/*
 * Example Output
 * 
 * insgesamt 132
 * drwxr-xr-x   2 root root 12288 Jul  2 02:04 bin
 * drwxr-xr-x   3 root root  4096 Aug 28 23:49 boot
 * drwxr-xr-x   2 root root  4096 Jul 14  2016 cdrom
 * drwxr-xr-x  21 root root  4360 Aug 26 23:35 dev
 * drwxr-xr-x 167 root root 12288 Aug 28 23:49 etc
 * drwxr-xr-x   3 root root  4096 Jul 14  2016 home
 * lrwxrwxrwx   1 root root    36 Aug 28 23:48 initrd.img -&gt; boot/initrd.img-4.10.0-33-lowlatency
 * lrwxrwxrwx   1 root root    36 Aug 15 15:06 initrd.img.old -&gt; boot/initrd.img-4.10.0-32-lowlatency
 * drwxr-xr-x  24 root root  4096 Jun 28 08:34 lib
 * drwxr-xr-x   2 root root 12288 Jun 28 08:34 lib32
 * drwxr-xr-x   2 root root  4096 Jun 28 08:34 lib64
 * drwxr-xr-x   2 root root 12288 Jun 28 08:34 libx32
 * drwx------   2 root root 16384 Jul 14  2016 lost+found
 * drwxrwxrwx   3 root root  4096 Jul 14  2016 media
 * drwxr-xr-x   2 root root  4096 Apr 21  2016 mnt
 * drwxr-xr-x   6 root root  4096 Aug 23 11:24 opt
 * dr-xr-xr-x 245 root root     0 Aug 26 23:33 proc
 * drwx------   9 root root  4096 Feb 14  2017 root
 * drwxr-xr-x  31 root root  1120 Aug 28 23:48 run
 * drwxr-xr-x   2 root root 12288 Aug 25 11:46 sbin
 * drwxr-xr-x   2 root root  4096 Apr 19  2016 snap
 * drwxr-xr-x   2 root root  4096 Apr 21  2016 srv
 * dr-xr-xr-x  13 root root     0 Aug 26 23:33 sys
 * drwxrwxrwt  17 root root  4096 Aug 30 00:17 tmp
 * drwxr-xr-x  14 root root  4096 Jul 26 18:40 usr
 * drwxr-xr-x  14 root root  4096 Apr 21  2016 var
 * lrwxrwxrwx   1 root root    33 Aug 28 23:48 vmlinuz -&gt; boot/vmlinuz-4.10.0-33-lowlatency
 * lrwxrwxrwx   1 root root    33 Aug 15 15:06 vmlinuz.old -&gt; boot/vmlinuz-4.10.0-32-lowlatency
 */</template><template autoinsert="true" context="java" deleted="false" description="How to run operating system specific command and read its output?" enabled="true" name="MyProcessBuilder_runOsCommand">import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

/*
 * Below example shows how to run operating specific command and read
 * its output. ProcessBuilder class can helps you to run any commands.
*/

public class MyOsCommandRun {

	public static void main(String a[]) {

		InputStream is = null;
		ByteArrayOutputStream baos = null;
		ProcessBuilder pb = new ProcessBuilder("ls", "-l");
		try {
			Process prs = pb.start();
			is = prs.getInputStream();
			byte[] b = new byte[1024];
			int size = 0;
			baos = new ByteArrayOutputStream();
			while ((size = is.read(b)) != -1) {
				baos.write(b, 0, size);
			}
			System.out.println(new String(baos.toByteArray()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (is != null)
					is.close();
				if (baos != null)
					baos.close();
			} catch (Exception ex) {
			}
		}
	}
}

/*
 * Example Output
 * 
 * insgesamt 8
 * drwxrwxr-x 3 colblair colblair 4096 Aug 29 03:40 bin
 * drwxrwxr-x 3 colblair colblair 4096 Aug 29 02:53 src
 */</template><template autoinsert="true" context="java" deleted="false" description="How to assign default values for unavailable keys in properties file?" enabled="true" name="MyProperties_defaultValues">import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*
 * The Properties class also provide a method, incase if the key is not available in
 * the properties file, then you can specify the default value. Below example give
 * sample code for this.
*/

public class MyPropDefaultValue {

	private Properties prop = null;

	public MyPropDefaultValue() {

		InputStream is = null;
		try {
			this.prop = new Properties();
			is = this.getClass().getResourceAsStream("/sample.properties");
			prop.load(is);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String getPropertyValue(String key) {
		return this.prop.getProperty(key, "Its Default Value");
	}

	public static void main(String a[]) {

		MyPropDefaultValue mpc = new MyPropDefaultValue();
		System.out.println("db.host: " + mpc.getPropertyValue("db.tables"));
		System.out.println("db.user: " + mpc.getPropertyValue("db.user"));
	}
}

/*
 * sample.properties
 * 
 * db.host=appdomain.java2novice.com
 * db.user=java2novice
 * db.password=mypassword
 * db.service=orcl
 */

/*
 * Example Output
 * 
 * db.host: Its Default Value
 * db.user: java2novice
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get all keys from properties file?" enabled="true" name="MyProperties_keySet">import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.Set;

/*
 * This example shows how to get all keys from the given properties file. All keys
 * will be returned in the form of set object. You can get it by calling keySet()
 * method.
*/

public class MyPropAllKeys {

	private Properties prop = null;

	public MyPropAllKeys() {

		InputStream is = null;
		try {
			this.prop = new Properties();
			is = this.getClass().getResourceAsStream("/sample.properties");
			prop.load(is);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public Set&lt;Object&gt; getAllKeys() {
		Set&lt;Object&gt; keys = prop.keySet();
		return keys;
	}

	public String getPropertyValue(String key) {
		return this.prop.getProperty(key);
	}

	public static void main(String a[]) {

		MyPropAllKeys mpc = new MyPropAllKeys();
		Set&lt;Object&gt; keys = mpc.getAllKeys();
		for (Object k : keys) {
			String key = (String) k;
			System.out.println(key + ": " + mpc.getPropertyValue(key));
		}
	}
}

/*
 * sample.properties
 * 
 * db.host=appdomain.java2novice.com
 * db.user=java2novice
 * db.password=mypassword
 * db.service=orcl
 */

/*
 * Example Output
 * 
 * db.password: mypassword
 * db.user: java2novice
 * db.host: appdomain.java2novice.com
 * db.service: orcl
 */</template><template autoinsert="true" context="java" deleted="false" description="How to load Properties file from the classpath?" enabled="true" name="MyProperties_loadClasspath">import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*
 * This example shows how to load properties file from application classpath.
 * Here we are using this.getClass().getResourceAsStream() to load the properties file
 * in the classpath. Make sure that the properties file is available in the class path.
*/

public class MyPropWithinClasspath {

	private Properties prop = null;

	public MyPropWithinClasspath() {

		InputStream is = null;
		try {
			this.prop = new Properties();
			is = this.getClass().getResourceAsStream("/sample.properties");
			prop.load(is);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String getPropertyValue(String key) {
		return this.prop.getProperty(key);
	}

	public static void main(String a[]) {

		MyPropWithinClasspath mpc = new MyPropWithinClasspath();
		System.out.println("db.host: " + mpc.getPropertyValue("db.host"));
		System.out.println("db.user: " + mpc.getPropertyValue("db.user"));
		System.out.println("db.password: " + mpc.getPropertyValue("db.password"));
	}
}

/*
 * sample.properties
 * 
 * db.host=appdomain.java2novice.com
 * db.user=java2novice
 * db.password=mypassword
 * db.service=orcl
 */

/*
 * Example Output
 * 
 * db.host: appdomain.java2novice.com
 * db.user: java2novice
 * db.password: mypassword
 */</template><template autoinsert="true" context="java" deleted="false" description="How to load Properties file from a file system?" enabled="true" name="MyProperties_loadFile">import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*
 * This example shows how to load properties file from a local file system. Here we
 * are using FileInputStream to load the properties file. Here you have to pass the
 * physical location of the file in the file system.
*/

public class MyPropertyLoad {

	public static void main(String a[]) {

		InputStream is = null;
		Properties prop = null;
		try {
			prop = new Properties();
			is = new FileInputStream(new File("C:/sample.properties"));
			prop.load(is);
			System.out.println("db.host: " + prop.getProperty("db.host"));
			System.out.println("db.user: " + prop.getProperty("db.user"));
			System.out.println("db.password: " + prop.getProperty("db.password"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

/*sample.properties

db.host=appdomain.java2novice.com
db.user=java2novice
db.password=mypassword
db.service=orcl*/


/*
 * Example Output
 * 
 * db.host: appdomain.java2novice.com
 * db.user: java2novice
 * db.password: mypassword
 */</template><template autoinsert="true" context="java" deleted="false" description="How to load Properties file from a static block or static method?" enabled="true" name="MyProperties_loadStaticBlock">import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*
 * This example shows how to load properties file with in a static block or static
 * method. Here we are using ClassLoader.class.getResourceAsStream() to load the
 * properties file in the classpath within static block. Make sure that the class is
 * available in the class path
*/

public class MyPropInStaticBlock {

	private static Properties prop;

	static {
		InputStream is = null;
		try {
			prop = new Properties();
			is = ClassLoader.class.getResourceAsStream("/sample.properties");
			prop.load(is);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String getPropertyValue(String key) {
		return prop.getProperty(key);
	}

	public static void main(String a[]) {

		System.out.println("db.host: " + getPropertyValue("db.host"));
		System.out.println("db.user: " + getPropertyValue("db.user"));
		System.out.println("db.password: " + getPropertyValue("db.password"));
	}
}

/*
 * sample.properties
 * 
 * db.host=appdomain.java2novice.com
 * db.user=java2novice
 * db.password=mypassword
 * db.service=orcl
 */

/*
 * Example Output
 * 
 * db.host: appdomain.java2novice.com
 * db.user: java2novice
 * db.password: mypassword
 */</template><template autoinsert="true" context="java" deleted="false" description="How to load property file using class name in java?" enabled="true" name="MyProperties_loadusingClassName">import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*
 * This example shows how to load a property file using class name in java.
*/

public class MyPropUsingClassName {

	private static Properties prop;

	static {
		InputStream is = null;
		try {
			prop = new Properties();
			is = MyPropUsingClassName.class.getResourceAsStream("/sample.properties");
			prop.load(is);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String getPropertyValue(String key) {
		return prop.getProperty(key);
	}

	public static void main(String a[]) {

		System.out.println("db.host: " + getPropertyValue("db.host"));
		System.out.println("db.user: " + getPropertyValue("db.user"));
		System.out.println("db.password: " + getPropertyValue("db.password"));
	}
}

/*
 * sample.properties
 * 
 * db.host=appdomain.java2novice.com
 * db.user=java2novice
 * db.password=mypassword
 * db.service=orcl
 */

/*
 * Example Output
 * 
 * db.host: appdomain.java2novice.com
 * db.user: java2novice
 * db.password: mypassword
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create and store property file dynamically?" enabled="true" name="MyProperties_savePropertyFile">import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Properties;

/*
 * This example shows how to get create properties file dynamically. You have to
 * create Properties object, set all properties by using setProperty() method, store
 * it to file system by using store() method.
*/

public class MyPropertyFileStore {

	public static void main(String a[]) throws IOException {

		OutputStream os = null;
		Properties prop = new Properties();
		prop.setProperty("name", "java2novice");
		prop.setProperty("domain", "www.java2novice.com");
		prop.setProperty("email", "[email protected]");
		try {
			os = new FileOutputStream("C:/MyProp.properties");
			prop.store(os, "Dynamic Property File");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}
}

/*
 * Example Output
 * 
 * #Dynamic Property File
 * #Mon Jul 09 21:05:40 GMT+05:30 2012
 * [email protected]
 * name=java2novice
 * domain=www.java2novice.com
 */</template><template autoinsert="true" context="java" deleted="false" description="How to store property file as xml file?" enabled="true" name="MyProperties_saveXML">import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Properties;

/*
 * This example shows how to get create properties file dynamically and store as xml
 * file. You have to create Properties object, set all properties by using
 * setProperty() method, store it to file system as xml file by using storeToXML()
 * method.
*/

public class MyFileXmlStore {

	public static void main(String a[]) throws IOException {

		OutputStream os = null;
		Properties prop = new Properties();
		prop.setProperty("name", "java2novice");
		prop.setProperty("domain", "www.java2novice.com");
		prop.setProperty("email", "[email protected]");
		try {
			os = new FileOutputStream("C:/MyProp.xml");
			prop.storeToXML(os, "Dynamic Property File");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}
}

/*
 * Example Output
 * 
 * &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
 * &lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
 * &lt;properties&gt;
 * &lt;comment&gt;Dynamic Property File&lt;/comment&gt;
 * &lt;entry key="email"&gt;[email protected]&lt;/entry&gt;
 * &lt;entry key="name"&gt;java2novice&lt;/entry&gt;
 * &lt;entry key="domain"&gt;www.java2novice.com&lt;/entry&gt;
 * &lt;/properties&gt;
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic random number generator." enabled="true" name="MyRandom_Basic">import java.util.Random;

/*
 * Many times we need to generate sequence of numbers. It is not a problem to generate
 * sequence of numbers. But some times we need to generate random numbers. In java we
 * can generate random numbers by using Random class. By using Random class, we can
 * generate random integers, long numbers and double values. Below example shows how
 * to generate random numbers using Random class.
*/

public class MyBasicRandom {

	public static void main(String a[]) {
		Random rand = new Random();
		System.out.println("Random Integers:");
		System.out.println(rand.nextInt());
		System.out.println(rand.nextInt());
		System.out.println(rand.nextInt());
		System.out.println("Random Double Numbers:");
		System.out.println(rand.nextDouble());
		System.out.println(rand.nextDouble());
		System.out.println(rand.nextDouble());
		System.out.println("Random Long Numbers:");
		System.out.println(rand.nextLong());
		System.out.println(rand.nextLong());
		System.out.println(rand.nextLong());
	}
}

/*
 * Example Output
 * 
 * Random Integers:
 * -897669371
 * 290898841
 * 465615880
 * Random Double Numbers:
 * 0.8785698261705274
 * 0.7087905723776096
 * 0.2738407254006988
 * Random Long Numbers:
 * -4996463073469938164
 * -154769576243378020
 * 7141609910095909401
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create random string with random characters?" enabled="true" name="MyRandom_Char">import java.util.Random;

/*
 * Write a program to generate random string of length 10 charactors. Every time you
 * call the method, the program should generate random string.
*/

public class MyStringRandomGen {

	private static final String CHAR_LIST = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	private static final int RANDOM_STRING_LENGTH = 10;

	/**
	 * This method generates random string
	 * 
	 * @return
	 */
	public String generateRandomString() {

		StringBuffer randStr = new StringBuffer();
		for (int i = 0; i &lt; RANDOM_STRING_LENGTH; i++) {
			int number = getRandomNumber();
			char ch = CHAR_LIST.charAt(number);
			randStr.append(ch);
		}
		return randStr.toString();
	}

	/**
	 * This method generates random numbers
	 * 
	 * @return int
	 */
	private int getRandomNumber() {
		int randomInt = 0;
		Random randomGenerator = new Random();
		randomInt = randomGenerator.nextInt(CHAR_LIST.length());
		if (randomInt - 1 == -1) {
			return randomInt;
		} else {
			return randomInt - 1;
		}
	}

	public static void main(String a[]) {
		MyStringRandomGen msr = new MyStringRandomGen();
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
		System.out.println(msr.generateRandomString());
	}
}

/*
 * Example Output
 * 
 * yqhRocf8M3
 * lmTlbHgH2X
 * E2kypMBa8r
 * vfuQJd5UPI
 * k2IjvaRW9V
 * D58n72CckO
 * SKwXThlfkP
 */</template><template autoinsert="true" context="java" deleted="false" description="How to generate same random number sequence everytime?" enabled="true" name="MyRandom_generateSequence">import java.util.Random;

/*
 * Some times we need to generate same random number sequence everytime we call the
 * sequence generator method on every call. We cannot achieve this if we use simple
 * Random() class constructor. We need to pass seed to the Random() constructor to
 * generate same random sequence. The below example, calls the generateSequence()
 * method three times, and generates the same random sequence.
*/

public class MySameSequenceWithRange {

	public void generateSequence() {
		Random rnd = new Random(40);
		for (int i = 0; i &lt; 5; i++) {
			System.out.println(rnd.nextInt(100));
		}
	}

	public static void main(String a[]) {
		MySameSequenceWithRange mss = new MySameSequenceWithRange();
		mss.generateSequence();
		System.out.println("====================");
		mss.generateSequence();
		System.out.println("====================");
		mss.generateSequence();
	}
}

/*
 * Example Output
 * 
 * 82
 * 39
 * 37
 * 63
 * 96
 * ====================
 * 82
 * 39
 * 37
 * 63
 * 96
 * ====================
 * 82
 * 39
 * 37
 * 63
 * 96
 */</template><template autoinsert="true" context="java" deleted="false" description="How to generate random numbers in the given range?" enabled="true" name="MyRandom_inRange">import java.util.Random;

/*
 * Incase if we want to generate random number in the given range, then we need to use
 * nextInt(limit) method. Here we need to pass the range limit. For example in the
 * below example we are passing 50 as limit, so that the generated random number is
 * always less than 50.
*/

public class MyRandomInRange {

	public static void main(String a[]) {
		Random rnd = new Random();
		System.out.println("Random Integers below 50:");
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
		System.out.println(rnd.nextInt(50));
	}
}

/*
 * Example Output
 * 
 * Random Integers below 50:
 * 8
 * 33
 * 40
 * 8
 * 25
 * 29
 * 0
 * 23
 * 3
 * 49
 * 23
 * 10
 */</template><template autoinsert="true" context="java" deleted="false" description="How to change Random class seed value?" enabled="true" name="MyRandom_setSeed">import java.util.Random;

/*
 * Some times we need to generate same random number sequence everytime we call the
 * sequence generator method on every call. We cannot achieve this if we use simple
 * Random() class constructor. We need to pass seed to the Random() constructor to
 * generate same random sequence. You can change the seed by calling setSeed() method.
 * Each time you pass the same seed, you will get same random sequence. You can notice
 * this with the below example.
*/

public class MyRandomSeedChange {

	public static void main(String a[]) {
		Random rnd = new Random(40);
		for (int i = 0; i &lt; 5; i++) {
			System.out.println(rnd.nextInt(100));
		}
		System.out.println("Changing seed to change to sequence");
		rnd.setSeed(45);
		for (int i = 0; i &lt; 5; i++) {
			System.out.println(rnd.nextInt(100));
		}
		System.out.println("Changing seed to change to sequence");
		rnd.setSeed(50);
		for (int i = 0; i &lt; 5; i++) {
			System.out.println(rnd.nextInt(100));
		}
		System.out.println("Setting seed 40 to produce the previous sequence");
		rnd.setSeed(40);
		for (int i = 0; i &lt; 5; i++) {
			System.out.println(rnd.nextInt(100));
		}
	}
}

/*
 * Example Output
 * 
 * 82
 * 39
 * 37
 * 63
 * 96
 * Changing seed to change to sequence
 * 9
 * 31
 * 31
 * 40
 * 87
 * Changing seed to change to sequence
 * 17
 * 88
 * 93
 * 12
 * 51
 * Setting seed 40 to produce the previous sequence
 * 82
 * 39
 * 37
 * 63
 * 96
 */</template><template autoinsert="true" context="java" deleted="false" description="Java regex with case insensitive." enabled="true" name="MyRegEx_CaseInsensitive">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * We need to pass Pattern.CASE_INSENSITIVE constant to Pattern.compile() method,
 * along with regular expression. This makes case insensitive matches.
*/

public class MyPatternMatchCaseInsensitive {

	public boolean isPatternMatching(String line) {

		Pattern ptn = Pattern.compile("java", Pattern.CASE_INSENSITIVE);
		Matcher mtch = ptn.matcher(line);
		if (mtch.find()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		MyPatternMatchCaseInsensitive msp = new MyPatternMatchCaseInsensitive();
		System.out.println(msp.isPatternMatching("This line contains java, lets see"));
		System.out.println(msp.isPatternMatching("Here JAVA is in capital leters, lets see"));
		System.out.println(msp.isPatternMatching("Here C++ is in capital leters, lets see"));
	}
}

/*
 * Example Output
 * 
 * true
 * true
 * false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to capture or extract a value(s) from text using regular expression in java?" enabled="true" name="MyRegEx_extractValue">import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below example shows how to extract a specific pattern from a large text.
 * The example tries to capture any IP addresses in the given text.
*/

public class MyGroupRegex {

	private static Pattern ptn = Pattern.compile("(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})");

	public static List&lt;String&gt; captureValues(String largeText) {
		Matcher mtch = ptn.matcher(largeText);
		List&lt;String&gt; ips = new ArrayList&lt;String&gt;();
		while (mtch.find()) {
			ips.add(mtch.group());
		}
		return ips;
	}

	public static void main(String a[]) {
		String str = "Hi my machine IP is 10.20.30.40 and i would like "
				+ "to access port 80 from the host 23.12.56.34, which internally"
				+ "connects to 3.90.23.65. Please process the request";
		System.out.println(captureValues(str));
	}
}

/*
 * Example Output
 * 
 * [10.20.30.40, 23.12.56.34, 3.90.23.65]
 */</template><template autoinsert="true" context="java" deleted="false" description="Simple regex pattern matching using string matches()." enabled="true" name="MyRegEx_matchesString">/*
 * String.matches() method tells whether or not this string matches the given regular
 * expression.
*/

public class MyStringMatches {

	public void isStringNumber(String no) {

		System.out.println(no.matches("(\\d+)"));
	}

	public static void main(String a[]) {
		MyStringMatches msm = new MyStringMatches();
		msm.isStringNumber("345");
		msm.isStringNumber("34we");
		msm.isStringNumber("345w12");
		msm.isStringNumber("956");
	}
}

/*
 * Example Output
 * 
 * true
 * false
 * false
 * true
 */</template><template autoinsert="true" context="java" deleted="false" description="Simple java regex using Pattern and Matcher classes." enabled="true" name="MyRegEx_Pattern">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Patter is a compiled representation of a regular expression. Matcher is an engine
 * that performs match operations on a character sequence by interpreting a Pattern.
*/

public class MySimplePatternMatch {

	public boolean isPatternMatching(String line) {

		Pattern ptn = Pattern.compile("\\d{2}$$");
		Matcher mtch = ptn.matcher(line);
		if (mtch.find()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		MySimplePatternMatch msp = new MySimplePatternMatch();
		System.out.println("Is 'ddfsa12' ends with min 2 digits? " + msp.isPatternMatching("ddfsa12"));
		System.out.println("Is 'ddfsa12adf1' ends with min 2 digits? " + msp.isPatternMatching("ddfsa12adf1"));
	}
}

/*
 * Example Output
 * 
 * Is 'ddfsa12' ends with min 2 digits? true
 * Is 'ddfsa12adf1' ends with min 2 digits? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove multiple spaces with a single space with in a string?" enabled="true" name="MyRegEx_removeMultipleSpaces">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Below example gives sample code for replacing multiple spaces into single space.
 * It covers tab, new line, any kind of spaces replaces with single space.
*/

public class MyPatternReplace {

	public String replaceWithPattern(String str, String replace) {

		Pattern ptn = Pattern.compile("\\s+");
		Matcher mtch = ptn.matcher(str);
		return mtch.replaceAll(replace);
	}

	public static void main(String a[]) {
		String str = "My    name	is  kingkon.  ";
		MyPatternReplace mpr = new MyPatternReplace();
		System.out.println(mpr.replaceWithPattern(str, " "));
	}
}

/*
 * Example Output
 * 
 * My name is kingkon. 
 */</template><template autoinsert="true" context="java" deleted="false" description="How to replace a pattern using regular expression in java?" enabled="true" name="MyRegEx_replacePattern">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Below example gives sample code for replacing given regular expression pattern with
 * a text.
*/

public class MyPatternReplace {

	public String replaceWithPattern(String str, String replace) {

		Pattern ptn = Pattern.compile("\\s+");
		Matcher mtch = ptn.matcher(str);
		return mtch.replaceAll(replace);
	}

	public static void main(String a[]) {
		String str = "My    name	is  kingkon.  ";
		MyPatternReplace mpr = new MyPatternReplace();
		System.out.println(mpr.replaceWithPattern(str, " "));
	}
}

/*
 * Example Output
 * 
 * My name is kingkon. 
 */</template><template autoinsert="true" context="java" deleted="false" description="How to split a string using regular expression?" enabled="true" name="MyRegEx_splitString">import java.util.regex.Pattern;

/*
 * We can split a string using regular expression pattern. Example shows how to split
 * the string.
*/

public class MyTokens {

	public static void main(String a[]) {

		String str = "I have a cat. I play cricket with bat. I dont like rat," + "i hate mats, now break it";
		Pattern ptn = Pattern.compile("(cat|rat|mat|bat)");
		String[] parts = ptn.split(str);
		for (String p : parts) {
			System.out.println(p);
		}
	}
}

/*
 * Example Output
 * 
 * I have a 
 * . I play cricket with 
 * . I dont like 
 * ,i hate 
 * s, now break it
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate date format using regular expression in java?" enabled="true" name="MyRegEx_validateDateFormat">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below given example shows how to validate date format using regular expression.
 * This example checks for dd/mm/yyyy date format.
*/

public class MyDateFormat {

	private static Pattern dateFrmtPtrn = Pattern.compile("(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\d\\d)");

	public static boolean validateDateFormat(String userName) {

		Matcher mtch = dateFrmtPtrn.matcher(userName);
		if (mtch.matches()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		System.out.println("Is '03/04/2012' a valid date format? " + validateDateFormat("03/04/2012"));
		System.out.println("Is '12/23/2012' a valid date format? " + validateDateFormat("12/23/2012"));
		System.out.println("Is '12/12/12' a valid date format? " + validateDateFormat("12/12/12"));
		System.out.println("Is '3/4/2012' a valid date format? " + validateDateFormat("3/4/2012"));
	}
}

/*
 * Example Output
 * 
 * Is '03/04/2012' a valid date format? true
 * Is '12/23/2012' a valid date format? false
 * Is '12/12/12' a valid date format? false
 * Is '3/4/2012' a valid date format? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate email address using regular expression?" enabled="true" name="MyRegEx_validateEmail">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below given example shows how to validate a email address using regular
 * expression.
*/

public class MyEmailValidate {

	private static Pattern emailNamePtrn = Pattern
			.compile("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$$");

	public static boolean validateEmailAddress(String userName) {

		Matcher mtch = emailNamePtrn.matcher(userName);
		if (mtch.matches()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		System.out
				.println("Is '[email protected]' a valid email address? " + validateEmailAddress("[email protected]"));
		System.out.println("Is 'cric*7*[email protected]' a valid email address? "
				+ validateEmailAddress("cric*7*[email protected]"));
		System.out.println(
				"Is 'JAVA2NOVICE.gmail.com' a valid email address? " + validateEmailAddress("JAVA2NOVICE.gmail.com"));
	}
}

/*
 * Example Output
 * 
 * Is '[email protected]' a valid email address? false
 * Is 'cric*7*[email protected]' a valid email address? false
 * Is 'JAVA2NOVICE.gmail.com' a valid email address? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate file extensions using regular expression in java?" enabled="true" name="MyRegEx_validateFile">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below given example shows how to validate a file extensions using regular
 * expression. The regular expression allows txt, doc, csv, and pdf file extensions
 * only.
*/

public class MyFileExtenValidation {

	private static Pattern fileExtnPtrn = Pattern.compile("([^\\s]+(\\.(?i)(txt|doc|csv|pdf))$$)");

	public static boolean validateFileExtn(String userName) {

		Matcher mtch = fileExtnPtrn.matcher(userName);
		if (mtch.matches()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		System.out.println("Is 'java2novice.pdf' allowed file? " + validateFileExtn("java2novice.pdf"));
		System.out.println("Is 'cric.doc' allowed file? " + validateFileExtn("cric.doc"));
		System.out.println("Is 'java.gif' allowed file? " + validateFileExtn("java.gif"));
		System.out.println("Is 'novice.mp3' allowed file? " + validateFileExtn("novice.mp3"));
		System.out.println("Is 'java_2.jpeg' allowed file? " + validateFileExtn("java_2.jpeg"));
	}
}

/*
 * Example Output
 * 
 * Is 'java2novice.pdf' allowed file? true
 * Is 'cric.doc' allowed file? true
 * Is 'java.gif' allowed file? false
 * Is 'novice.mp3' allowed file? false
 * Is 'java_2.jpeg' allowed file? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate IP address using regular expression?" enabled="true" name="MyRegEx_validateIP">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Below example gives sample code for validation IP address using regular expression.
*/

public class MyIpMatch {

	public static boolean isValidIP(String ipAddr) {

		Pattern ptn = Pattern.compile("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$$");
		Matcher mtch = ptn.matcher(ipAddr);
		return mtch.find();
	}

	public static void main(String a[]) {
		System.out.println("10.23.45.12 is valid? " + MyIpMatch.isValidIP("10.23.45.12"));
		System.out.println("10.2a.56.32 is valid? " + MyIpMatch.isValidIP("10.2a.56.32"));
		System.out.println("10.23.45 is valid? " + MyIpMatch.isValidIP("10.23.45"));
	}
}

/*
 * Example Output
 * 
 * 10.23.45.12 is valid? true
 * 10.2a.56.32 is valid? false
 * 10.23.45 is valid? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate password using regular expression?" enabled="true" name="MyRegEx_validatePassword">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below given example shows how to validate a password using regular expression.
 * Here this regular expression allows must contain one digit, one lower case char,
 * one upper case char, some special chars, length should be within 6 to 15 chars.
*/

public class MyPasswordValidate {

	private static Pattern pswNamePtrn = Pattern.compile("((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$$%]).{6,15})");

	public static boolean validatePassword(String userName) {

		Matcher mtch = pswNamePtrn.matcher(userName);
		if (mtch.matches()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		System.out.println("Is 'java2novice' a valid password? " + validatePassword("java2novice"));
		System.out.println("Is 'gabbarsingh' a valid password? " + validatePassword("gabbarsingh"));
		System.out.println("Is 'Java2NOVICE$$' a valid password? " + validatePassword("Java2NOVICE$$"));
		System.out.println("Is '234aBc#' a valid password? " + validatePassword("234aBc#"));
	}
}

/*
 * Example Output
 * 
 * Is 'java2novice' a valid password? false
 * Is 'gabbarsingh' a valid password? false
 * Is 'Java2NOVICE$$' a valid password? true
 * Is '234aBc#' a valid password? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to validate user name using regular expression?" enabled="true" name="MyRegEx_validateUserName">import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * The below given example shows how to validate a user name. The regular expression
 * pattern allows lower case alphanumeric characters, allows '-', '_'. Incase if you
 * want to support uppercase characters then regular expression should be
 * ^[a-zA-Z0-9_-]{6,14}$$
*/

public class MyUsernameValidate {

	private static Pattern usrNamePtrn = Pattern.compile("^[a-z0-9_-]{6,14}$$");

	public static boolean validateUserName(String userName) {

		Matcher mtch = usrNamePtrn.matcher(userName);
		if (mtch.matches()) {
			return true;
		}
		return false;
	}

	public static void main(String a[]) {
		System.out.println("Is 'java2novice' a valid user name? " + validateUserName("java2novice"));
		System.out.println("Is 'cric' a valid user name? " + validateUserName("cric"));
		System.out.println("Is 'JAVA2NOVICE' a valid user name? " + validateUserName("JAVA2NOVICE"));
		System.out.println("Is 'java.2.novice' a valid user name? " + validateUserName("java.2.novice"));
		System.out.println("Is 'java_2-novice' a valid user name? " + validateUserName("java_2-novice"));
	}
}

/*
 * Example Output
 * 
 * Is 'java2novice' a valid user name? true
 * Is 'cric' a valid user name? false
 * Is 'JAVA2NOVICE' a valid user name? false
 * Is 'java.2.novice' a valid user name? false
 * Is 'java_2-novice' a valid user name? true
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for static block." enabled="true" name="MyStaticBlock">/*
 * Static blocks are nothing but a normal block of code, enclosed in
 * braces { }, preceded with static keyword. These static blocks will be
 * called when JVM loads the class into memory. Incase a class has
 * multiple static blocks across the class, then JVM combines all these
 * blocks as a single block of code and executes it. Static blocks will
 * be called only once, when it is loaded into memory. These are also
 * called initialization blocks.
*/

import java.util.ArrayList;
import java.util.List;

public class MyStaticBlock {

	private static List&lt;String&gt; list;

	static {
		// created required instances
		// create ur in-memory objects here
		list = new ArrayList&lt;String&gt;();
		list.add("one");
		list.add("two");
		list.add("three");
		list.add("four");
	}

	public void testList() {
		System.out.println(list);
	}

	public static void main(String a[]) {
		MyStaticBlock msb = new MyStaticBlock();
		msb.testList();
	}
}

/*
 * Example Output
 * 
 * [one, two, three, four]
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for static variables and methods." enabled="true" name="MyStaticMethods">/*
 * In java, static belongs to class. You can create static variables and
 * static methods. You can call these directly by using class name,
 * without creating instance.
 * 
 * Java static variables:
 * Static variables are belongs to the class and not to the object.
 * These are only once, at the starting of the execution. Static
 * variables are not part of object state, means there is only one copy
 * of the values will be served to all instances. You can call static
 * variable with reference to class name without creating an object.
 * Below example shows how to create and call static variables.
 * 
 * Java static methods:
 * Static methods are also similar to static variables, you can access
 * them with reference to class name, without creating object. Inside
 * static methods, you cannot access instance variables or instance
 * methods. You can only access static variables or static methods.
*/

public class MyStaticMethods {

	private String name;
	private static String staticStr = "STATIC-STRING";

	public MyStaticMethods(String n) {
		this.name = n;
	}

	public static void testStaticMethod() {
		System.out.println("Hey... I am in static method...");
		// you can call static variables here
		System.out.println(MyStaticMethods.staticStr);
		// you can not call instance variables here.
	}

	public void testObjectMethod() {
		System.out.println("Hey i am in non-static method");
		// you can also call static variables here
		System.out.println(MyStaticMethods.staticStr);
		// you can call instance variables here
		System.out.println("Name: " + this.name);
	}

	public static void main(String a[]) {
		// By using class name, you can call static method
		MyStaticMethods.testStaticMethod();
		MyStaticMethods msm = new MyStaticMethods("Java2novice");
		msm.testObjectMethod();
	}
}

/*
 * Example Output
 * 
 * Hey... I am in static method...
 * STATIC-STRING
 * Hey i am in non-static method
 * STATIC-STRING
 * Name: Java2novice
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for singleton class using static block." enabled="true" name="MyStaticSingleton">/*
 * Since static blocks will be called only once, we can use static blocks
 * to develop singleton class. Below example shows how to create
 * singleton classes using static block. To create singleton class, make
 * constructor as private, so that you cannot create object outside of
 * the class. Create a private static variable of same class type, so
 * that created object will be pointed to this reference. Now create
 * static block, and create object inside static block. Since static
 * block will be called only once, the object will be created only once.
*/

public class MyStaticSingleton {

	public static void main(String a[]) {
		MySingleton ms = MySingleton.getInstance();
		ms.testSingleton();
	}
}

class MySingleton {

	private static MySingleton instance;

	static {
		instance = new MySingleton();
	}

	private MySingleton() {
		System.out.println("Creating MySingleton object...");
	}

	public static MySingleton getInstance() {
		return instance;
	}

	public void testSingleton() {
		System.out.println("Hey.... Instance got created...");
	}
}

/*
 * Example Output
 * 
 * Creating MySingleton object...
 * Hey.... Instance got created...
 */</template><template autoinsert="true" context="java" deleted="false" description="Example for static block vs constructor." enabled="true" name="MyStaticVsConstructor">/*
 * Java static blocks will be called when JVM loads the class into
 * memory, means it will be called only once. But constructor will be
 * called everytime when you create an object. The below example can
 * give you an idea about execution.
*/

public class MyStaticVsConstructor {

	static {
		System.out.println("I am in static block");
		System.out.println("Static block will be called first than constructor!!!");
		System.out.println("Static block will be called only once.");
	}

	public MyStaticVsConstructor() {
		System.out.println("I am in constructor");
	}

	public static void main(String a[]) {
		MyStaticVsConstructor ksv1 = new MyStaticVsConstructor();
		MyStaticVsConstructor ksv2 = new MyStaticVsConstructor();
		MyStaticVsConstructor ksv3 = new MyStaticVsConstructor();
		MyStaticVsConstructor ksv4 = new MyStaticVsConstructor();
	}
}

/*
 * Example Output
 * 
 * I am in static block
 * Static block will be called first than constructor!!!
 * Static block will be called only once.
 * I am in constructor
 * I am in constructor
 * I am in constructor
 * I am in constructor
 */</template><template autoinsert="true" context="java" deleted="false" description="Implementation of Time Measurement in Nanoseconds (Billion of Second)" enabled="true" name="MyStopwatch">/*
 * Implementation of Time Measurement in Nanoseconds Billion
*/

class Stopwatch {

	private static long startTime;

	public static void start() {

		startTime = System.nanoTime();

	}

	public static void stop() {
		long stopTime = System.nanoTime();
		long elapsedTime = stopTime - startTime;
		System.out.println(elapsedTime + " Nanoseconds");
	}

}

/*
 * Example Output
 * 
 * 6425 Nanoseconds
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compare StringBuffer object to String object in java?" enabled="true" name="MyString_compareStringStringbuffer">/*
 * The below example shows how to compare StringBuffer object with
 * String object. String object provides contentEquals() method to
 * compare content with a StringBuffer object.
*/

public class MyStringComp {

	public static void main(String a[]) {

		String c = "We are comparing the content with a StringBuffer content";
		StringBuffer sb = new StringBuffer("We are comparing the content with a StringBuffer content");
		/**
		 * We can use contentEquals() method to compare content with a StringBuffer. It
		 * returns boolean value.
		 */
		if (c.contentEquals(sb)) {
			System.out.println("The content is equal");
		} else {
			System.out.println("The content is not equal");
		}
		StringBuffer asb = new StringBuffer("You cannot compare the content with a String content");
		if (c.contentEquals(asb)) {
			System.out.println("The content is equal");
		} else {
			System.out.println("The content is not equal");
		}
	}
}

/*
 * Example Output
 * 
 * The content is equal
 * The content is not equal
 */</template><template autoinsert="true" context="java" deleted="false" description="How to change case of a string characters in Java?" enabled="true" name="MyString_convertCase">/*
 * Below example shows how to convert the case of a given string. toUpperCase() method
 * converts all string characters to upper case. toLowerCase() method converts all
 * string characters to lower case.
*/

public class MyStringCase {
	public static void main(String a[]) {
		String str = "Change My Case";
		System.out.println("Upper Case: " + str.toUpperCase());
		System.out.println("Lower Case: " + str.toLowerCase());
	}
}

/*
 * Example Output
 * 
 * Upper Case: CHANGE MY CASE
 * Lower Case: change my case
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert Character array to String object?" enabled="true" name="MyString_convertCharArraytoString">/*
 * Below example shows how to convert character array to a string object.
 * By using String.copyValueOf() method you can convert char array to
 * string object. Also you can copy range of character array to string.
*/

public class MyArrayCopy {
	public static void main(String a[]) {
		char ch[] = { 'M', 'y', ' ', 'J', 'a', 'v', 'a', ' ', 'e', 'x', 'a', 'm', 'p', 'l', 'e' };
		/**
		 * We can copy a char array to a string by using copyValueOf() method.
		 */
		String chStr = String.copyValueOf(ch);
		System.out.println(chStr);
		/**
		 * We can also copy only range of charactors in a char array by copyValueOf()
		 * method.
		 */
		String subStr = String.copyValueOf(ch, 3, 4);
		System.out.println(subStr);
	}
}

/*
 * Example Output
 * 
 * My Java example
 * Java
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get byte array from a string object in java?" enabled="true" name="MyString_convertStringtoByteArray">/*
 * Some times we have to convert string object into byte array. You can
 * use getBytes() methode to convert string object to byte array.
*/

public class MyStringBytes {

	public static void main(String a[]) {

		String str = "core java api";
		byte[] b = str.getBytes();
		System.out.println("String length: " + str.length());
		System.out.println("Byte array length: " + b.length);
	}
}

/*
 * Example Output
 * 
 * String length: 13
 * Byte array length: 13
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find a string ends with another string value in java?" enabled="true" name="MyString_endsWith">/*
 * Below example shows how to find whether a string value ends with another string
 * value. By using endsWith() method, you can get whether the string ends with the
 * given string or not. Also this method tells that the string occurence at a specific
 * position.
*/

public class MyStringEnd {

	public static void main(String a[]) {

		String str = "This is a java string example";
		if (str.endsWith("example")) {
			System.out.println("This String ends with example");
		} else {
			System.out.println("This String is not ending with example");
		}
		if (str.endsWith("java")) {
			System.out.println("This String ends with java");
		} else {
			System.out.println("This String is not ending with java");
		}
	}
}

/*
 * Example Output
 * 
 * This String ends with example
 * This String is not ending with java
 */</template><template autoinsert="true" context="java" deleted="false" description="How to format given string in java?" enabled="true" name="MyString_format">import java.util.Locale;

/*
 * String.format() method helps us to format the given string. It replaces each format
 * item in a specified string with the text equivalent of a corresponding object's
 * value. Example can explain more:
*/

public class MyStringFormatter {

	public static void main(String a[]) {

		String str = "This is %s format example";
		System.out.println(String.format(str, "string"));
		String str1 = "We are displaying no %d";
		System.out.println(String.format(str1, 10));
		/**
		 * String format by specifying Locale details
		 */
		System.out.println("String format with Locale info:");
		System.out.println(String.format(Locale.US, str1, 10));
	}
}

/*
 * Example Output
 * 
 * This is string format example
 * We are displaying no 10
 * String format with Locale info:
 * We are displaying no 10
 */</template><template autoinsert="true" context="java" deleted="false" description="How to extract Char Array From String in java?" enabled="true" name="MyString_getChars">/*
 * Below example shows how to copy range of characters from the given string to another
 * character array. By suing getChars() method, you can copy range of characters from
 * the given string.
*/

public class MyCharArrayCopy {

	public static void main(String a[]) {

		String str = "Copy chars from this string";
		char[] ch = new char[5];
		/**
		 * The getChars() method accepts 4 parameters first one is the start index from
		 * string second one is the end index from string third one is the destination
		 * char array forth one is the start index to append in the char array.
		 */
		str.getChars(5, 10, ch, 0);
		System.out.println(ch);
	}
}

/*
 * Example Output
 * 
 * chars
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get line count from a string?" enabled="true" name="MyString_getLineCount">/*
 * This example shows how to get line count from a string. Assuming that we have read
 * the file and keeping the content in string. We are using String.split() method with
 * the use of regular expression [\n|\r]. It will split the string based on the new
 * line char and carriage return char. After the split, we will get string array, and
 * returning length of the array.
*/

public class MyStringLineCounter {

	public static int getLineCount(String text) {

		return text.split("[\n|\r]").length;
	}

	public static void main(String a[]) {

		String str = "line1\nline2\nline3\rline4";
		System.out.println(str);
		int count = getLineCount(str);
		System.out.println("line count: " + count);
	}
}

/*
 * Example Output
 * 
 * line1
 * line2
 * line3
 * line4
 * line count: 4
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get index of a character or string from another String in java?" enabled="true" name="MyString_indexof">/*
 * Below method shows how to get index of a specified character or
 * string from the given string. By using indexOf() method you get get
 * the position of the sepcified string or char from the given string.
 * You can also get the index strting from a specified position of the
 * string.
*/

public class MyStringIndexOf {

	public static void main(String[] a) {

		String str = "Use this string for testing this";
		System.out.println("Basic indexOf() example");
		System.out.println("Char 's' at first occurance: " + str.indexOf('s'));
		System.out.println("String \"this\" at first occurance: " + str.indexOf("this"));
		/**
		 * Returns the first occurance from specified start index
		 */
		System.out.println("First occurance of char 's' from 4th index onwards : " + str.indexOf('s', 4));
		System.out.println("First occurance of String \"this\" from 6th index onwards: " + str.indexOf("this", 6));

	}
}

/*
 * Example Output
 * 
 * Basic indexOf() example
 * Char 's' at first occurance: 1
 * String "this" at first occurance: 4
 * First occurance of char 's' from 4th index onwards : 7
 * First occurance of String "this" from 6th index onwards: 28
 */</template><template autoinsert="true" context="java" deleted="false" description="String Initialization Sample Code" enabled="true" name="MyString_init">/*
 * Here you can see example for different ways of initializing string.
 * You can create and initialize string object by calling its
 * constructor, and pass the value of the string. Also you can pass
 * character array to the string constructor. You can also directly
 * assign string value to the string reference, which is equals to
 * creating string object by calling constructor. The empty string
 * constructor will create string object with empty value.
*/

public class MyStringInitialization {
	public static void main(String a[]) {
		String abc = "This is a string object";
		String bcd = new String("this is also string object");
		char[] c = { 'a', 'b', 'c', 'd' };
		String cdf = new String(c);
		String junk = abc + " This is another String object";
		System.out.println(abc);
		System.out.println(bcd);
		System.out.println(c);
		System.out.println(cdf);
		System.out.println(junk);
	}
}

/*
 * Example Output
 * 
 * This is a string object
 * this is also string object
 * abcd
 * abcd
 * This is a string object This is another String object
 */</template><template autoinsert="true" context="java" deleted="false" description="Java String lastIndexOf() Sample Code" enabled="true" name="MyString_lastIndexOf">/*
 * Below example shows how to get index of a given character or string
 * from a string in the reverse order, means last occuring index. By
 * using lastIndexOf() method you can get last occurence of the the
 * reference string or character. Also lastIndexOf() method gives last
 * occurence based on a specific position.
*/

public class MyStrLastIndexOf {

	public static void main(String a[]) {

		String str = "Use this string for testing this";
		System.out.println("Basic lastIndexOf() example");
		System.out.println("Char 's' at last occurance: " + str.lastIndexOf('s'));
		System.out.println("String \"this\" at last occurance: " + str.lastIndexOf("this"));
		/**
		 * Returns the last occurance from specified start index, searching backward
		 * starting at the specified index.
		 */
		System.out.println("first occurance of char 's' from 24th index backwards: " + str.lastIndexOf('s', 24));
		System.out.println(
				"First occurance of String \"this\" from 26th index backwards: " + str.lastIndexOf("this", 26));
	}
}

/*
 * Example Output
 * 
 * Basic lastIndexOf() example
 * Char 's' at last occurance: 31
 * String "this" at last occurance: 28
 * first occurance of char 's' from 24th index backwards: 22
 * First occurance of String "this" from 26th index backwards: 4
 */</template><template autoinsert="true" context="java" deleted="false" description="How to match a format in string using regular expression?" enabled="true" name="MyString_matchesRegEx">/*
 * Below example shows how to match a string pattern with a regular expression.
 * String.matches() method helps to match the string with a regex. Below example
 * checkes weather given string starts with "www" or not.
*/

public class MyStrMatches {

	public static void main(String a[]) {

		String[] str = { "www.java2novice.com", "http://java2novice.com" };
		for (int i = 0; i &lt; str.length; i++) {
			if (str[i].matches("^www\\.(.+)")) {
				System.out.println(str[i] + " Starts with 'www'");
			} else {
				System.out.println(str[i] + " is not starts with 'www'");
			}
		}
	}
}

/*
 * Example Output
 * 
 * www.java2novice.com Starts with 'www'
 * http://java2novice.com is not starts with 'www'
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove html tags from a string?" enabled="true" name="MyString_removeHtmlTags">/*
 * In case if a string contains html tags, then below example helps to trim the html
 * tags from the string. The example uses regular expression to trim the html tags
 * from the string.
*/

public class MyHtmlTagRemover {

	public static void main(String a[]) {
		String text = "&lt;B&gt;I don't want this to be bold&lt;\\B&gt;";
		System.out.println(text);
		text = text.replaceAll("\\&lt;.*?\\&gt;", "");
		System.out.println(text);
	}
}

/*
 * Example Output
 * 
 * &lt;B&gt;I don't want this to be bold&lt;\B&gt;
 * I don't want this to be bold
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove non-ascii characters from a string?" enabled="true" name="MyString_removeNonAscii">/*
 * Some times we need to handle text data, wherein we have to handle only ascii
 * characters. Below example shows how to remove non-ascii characters from the given
 * string by using regular expression.
*/

public class MyNonAsciiString {

	public static void main(String a[]) {
		String str = "Bj��rk����oacute�";
		System.out.println(str);
		str = str.replaceAll("[^\\p{ASCII}]", "");
		System.out.println("After removing non ASCII chars:");
		System.out.println(str);
	}
}

/*
 * Example Output
 * 
 * Bj��rk����oacute�
 * After removing non ASCII chars:
 * Bjrkoacute
 */</template><template autoinsert="true" context="java" deleted="false" description="How to replace string characters in java?" enabled="true" name="MyString_replace">/*
 * Below example shows how to get replace character or a string into a string with
 * the given string. String provides replace() method to replace a specific character
 * or a string which occures first. replaceAll() method replaces a specific character
 * or a string at each occurence.
*/

public class MyStringReplace {

	public static void main(String a[]) {

		String str = "This is an example string";
		System.out.println("Replace char 's' with 'o':" + str.replace('s', 'o'));

		System.out.println("Replace first occurance of string\"is\" with \"ui\":" + str.replaceFirst("is", "ui"));

		System.out.println("Replacing \"is\" every where with \"no\":" + str.replaceAll("is", "no"));
	}
}

/*
 * Example Output
 * 
 * Replace char 's' with 'o':Thio io an example otring
 * Replace first occurance of string"is" with "ui":Thui is an example string
 * Replacing "is" every where with "no":Thno no an example string
 */</template><template autoinsert="true" context="java" deleted="false" description="How to brake or split a string with a delimiter in java?" enabled="true" name="MyString_split">/*
 * Below example shows how to split or brake a string. The split() method splits the
 * string based on the given regular expression or delimiter, and returns the tokens
 * in the form of array. Below example shows splitting string with space, and second
 * split is based on any kind of spaces, that includes tab, enter, line breaks, etc.
*/

public class MyStrSplit {

	public static void main(String a[]) {

		String str = "This program splits a string based on space";
		String[] tokens = str.split(" ");
		for (String s : tokens) {
			System.out.println(s);
		}
		str = "This 	program  splits a string based on space";
		tokens = str.split("\\s+");
	}
}

/*
 * Example Output
 * 
 * This
 * program
 * splits
 * a
 * string
 * based
 * on
 * space
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find a string start with another string value in java?" enabled="true" name="MyString_startsWith">/*
 * Below example shows how to find whether a string value start with another string
 * value. By using startsWith() method, you can get whether the string starts with the
 * given string or not. Also this method tells that the string occurence at a specific
 * position.
*/

public class MyStrStartsWith {

	public static void main(String a[]) {

		String str = "This is an example string.";
		System.out.println("Is this string starts with \"This\"? " + str.startsWith("This"));
		System.out.println("Is this string starts with \"is\"? " + str.startsWith("is"));
		System.out.println("Is this string starts with \"is\" after index 5? " + str.startsWith("is", 5));
	}
}

/*
 * Example Output
 * 
 * Is this string starts with "This"? true
 * Is this string starts with "is"?
 * false Is this string starts with "is" after index 5? true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to trim spaces in the given string in java?" enabled="true" name="MyString_trim">/*
 * Below example shows how to trim spaces in the given string. The trim() function
 * removes all kind of space characters at both ends, means removes starting and
 * trailing spaces. These space characters includes normal space, enter, new line,
 * tab, etc.
*/

public class MyStringTrim {
	public static void main(String a[]) {
		String str = "  Junk   ";
		System.out.println(str.trim());
	}
}

/*
 * Example Output
 * 
 * Junk
 */</template><template autoinsert="true" context="java" deleted="false" description="How to remove multiple spaces in a string in Java?" enabled="true" name="MyString_trimMultiSpaces">import java.util.StringTokenizer;

/*
 * Below example shows how to remove multiple spaces from the given string.
*/

public class MyStrRemoveMultSpaces {
	public static void main(String a[]) {
		String str = "String    With Multiple      Spaces";
		StringTokenizer st = new StringTokenizer(str, " ");
		StringBuffer sb = new StringBuffer();
		while (st.hasMoreElements()) {
			sb.append(st.nextElement()).append(" ");
		}
		System.out.println(sb.toString().trim());
	}
}

/*
 * Example Output
 * 
 * String With Multiple Spaces
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Simple StringTokenizer Sample Code" enabled="true" name="MyStringTokenizer">import java.util.StringTokenizer;

/*
 * The string tokenizer class allows an application to break a string into tokens.
 * The tokenization method is much simpler than the one used by the StreamTokenizer
 * class. The StringTokenizer methods do not distinguish among identifiers, numbers,
 * and quoted strings, nor do they recognize and skip comments. The set of delimiters
 * (the characters that separate tokens) may be specified either at creation time or
 * on a per-token basis.
*/

public class MyStringTokenizer {
	public static void main(String a[]) {
		String msg = "This program gives sample code for String Tokenizer";
		StringTokenizer st = new StringTokenizer(msg, " ");
		while (st.hasMoreTokens()) {
			System.out.println(st.nextToken());
		}
	}
}

/*
 * Example Output
 * 
 * This
 * program
 * gives
 * sample
 * code
 * for
 * String
 * Tokenizer
 */</template><template autoinsert="true" context="java" deleted="false" description="Java StringTokenizer Token Count Sample Code" enabled="true" name="MyStringTokenizer_countTokens">import java.util.StringTokenizer;

/*
 * Below example shows no of token count after breaking the string by delimiter. You
 * can get the count by using countTokens() method.
*/

public class MyTokenCount {
	public static void main(String a[]) {
		String msg = "This program gives sample code for String Tokenizer";
		StringTokenizer st = new StringTokenizer(msg, " ");
		System.out.println("Count: " + st.countTokens());
	}
}

/*
 * Example Output
 * 
 * Count: 8
 */</template><template autoinsert="true" context="java" deleted="false" description="Java StringTokenizer Delimiters In Tokens Sample Code" enabled="true" name="MyStringTokenizerDelimiters">import java.util.StringTokenizer;

/*
 * Below example shows how to make delimiter characters also be part of tokens. During
 * creating string tokenizer object, in the constructor field, pass boolean parameter
 * value as true.
*/

public class TokensWithDelimiter {
	public static void main(String a[]) {
		String msg = "http://10.123.43.67:80/";
		StringTokenizer st = new StringTokenizer(msg, "://.", true);
		while (st.hasMoreTokens()) {
			System.out.println(st.nextToken());
		}
	}
}

/*
 * Example Output
 * 
 * http
 * :
 * /
 * /
 * 10
 * .
 * 123
 * .
 * 43
 * .
 * 67
 * :
 * 80
 * /
 */</template><template autoinsert="true" context="java" deleted="false" description="Java StringTokenizer With Multiple De-limiters Sample Code" enabled="true" name="MyStringTokenizerMultiple">import java.util.StringTokenizer;

/*
 * Below example shows how to break a string based on multiple delimiters. Each
 * character in the constructors delimiter field acts as one delimiter.
*/

public class MyStringTokens {
	public static void main(String a[]) {
		String msg = "http://10.123.43.67:80/";
		StringTokenizer st = new StringTokenizer(msg, "://.");
		while (st.hasMoreTokens()) {
			System.out.println(st.nextToken());
		}
	}
}

/*
 * Example Output
 * 
 * http
 * 10
 * 123
 * 43
 * 67
 * 80
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Daemon Thread Examples" enabled="true" name="MyThread_Daemon">package snippet_test;

/*
 * You can make any java thread as daemon thread. Daemon threads acts
 * like service providers for other threads running in the same process.
 * 
 * Daemon threads will be terminated by the JVM when there are none of
 * the other threads running, it includs main thread of execution as
 * well.
 * 
 * To specify that a thread is a daemon thread, call the setDaemon
 * method with the argument true.
 * 
 * To determine if a thread is a daemon thread, use the accessor method
 * isDaemon.
*/

public class DaemonThreadExample1 extends Thread {

	public void run() {

		// Checking whether the thread is Daemon or not
		if (Thread.currentThread().isDaemon()) {
			System.out.println("Daemon thread executing");
		} else {
			System.out.println("user(normal) thread executing");
		}
	}

	public static void main(String[] args) {
		/*
		 * Creating two threads: by default they are user threads (non-daemon threads)
		 */
		DaemonThreadExample1 t1 = new DaemonThreadExample1();
		DaemonThreadExample1 t2 = new DaemonThreadExample1();

		// Making user thread t1 to Daemon
		t1.setDaemon(true);

		// starting both the threads
		t1.start();
		t2.start();
	}
}

/*
 * Example Output
 * 
 * Daemon thread executing
 * user(normal) thread executing
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Thread By Extending Thread Class" enabled="true" name="MyThread_Extending">/*
 * A thread can be created in java by extending Thread class, where you
 * must override run() method.
 * 
 * Call start() method to start executing the thread object.
*/

class MySmpThread extends Thread {
	public static int myCount = 0;

	public void run() {
		while (MySmpThread.myCount &lt;= 10) {
			try {
				System.out.println("Expl Thread: " + (++MySmpThread.myCount));
				Thread.sleep(100);
			} catch (InterruptedException iex) {
				System.out.println("Exception in thread: " + iex.getMessage());
			}
		}
	}
}

public class RunThread {
	public static void main(String a[]) {
		System.out.println("Starting Main Thread...");
		MySmpThread mst = new MySmpThread();
		mst.start();
		while (MySmpThread.myCount &lt;= 10) {
			try {
				System.out.println("Main Thread: " + (++MySmpThread.myCount));
				Thread.sleep(100);
			} catch (InterruptedException iex) {
				System.out.println("Exception in main thread: " + iex.getMessage());
			}
		}
		System.out.println("End of Main Thread...");
	}
}

/*
 * Example Output
 * 
 * Starting Main Thread...
 * Main Thread: 1
 * Expl Thread: 2
 * Main Thread: 3
 * Expl Thread: 4
 * Main Thread: 5
 * Expl Thread: 6
 * Main Thread: 7
 * Expl Thread: 8
 * Main Thread: 9
 * Expl Thread: 10
 * Main Thread: 11
 * End of Main Thread....
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Thread Join Examples" enabled="true" name="MyThread_join">import java.util.ArrayList;
import java.util.List;

/*
 * Imagine the following scenario. You are preparing for tomorrow's
 * final examination and feel a little hungry. So, you give your younger
 * brother ten bucks and ask him to buy a pizza for you. In this case,
 * you are the main thread and your brother is a child thread. Once your
 * order is given, both you and your brother are doing their job
 * concurrently (i.e., studying and buying a pizza). Now, we have two
 * cases to consider. First, your brother brings your pizza back and
 * terminates while you are studying. In this case, you can stop studying
 * and enjoy the pizza. Second, you finish your study early and sleep
 * (i.e., your assigned job for today - study for tomorrow's
 * final exam - is done) before the pizza is available. Of course, you
 * cannot sleep; otherwise, you won't have a chance to eat the pizza.
 * What you are going to do is to wait until your brother brings the
 * pizza back.
 * 
 * A thread can execute a thread join to wait until the other thread
 * terminates
 * 
 * A parent thread may join with many child threads created by the
 * parent. Or, a parent only join with some of its child threads, and
 * ignore other child threads. In this case, those child threads that
 * are ignored by the parent will be terminated when the parent
 * terminates.
*/

public class MyThreadJoin {

	public static List&lt;String&gt; names = new ArrayList&lt;String&gt;();

	public static void main(String a[]) {
		List&lt;SampleThread&gt; list = new ArrayList&lt;SampleThread&gt;();
		for (int i = 0; i &lt; 5; i++) {
			SampleThread s = new SampleThread();
			list.add(s);
			s.start();
		}
		for (SampleThread st : list) {
			try {
				st.join();
			} catch (Exception ex) {
			}
		}
		System.out.println(names);
	}
}

class SampleThread extends Thread {

	public void run() {
		for (int i = 0; i &lt; 10; i++) {
			try {
				Thread.sleep(10);
			} catch (Exception ex) {
			}
		}
		MyThreadJoin.names.add(getName());
	}
}

/*
 * Example Output
 * 
 * [Thread-0, Thread-2, Thread-4, Thread-1]
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Thread By Implementing Runnable Interface" enabled="true" name="MyThread_Runnable">/*
 * A Thread can be created by extending Thread class also. But Java
 * allows only one class to extend, it wont allow multiple inheritance.
 * So it is always better to create a thread by implementing Runnable
 * interface. Java allows you to impliment multiple interfaces at a time.
 * 
 * By implementing Runnable interface, you need to provide implementation
 * for run() method.
 * 
 * To run this implementation class, create a Thread object, pass
 * Runnable implementation class object to its constructor. Call start()
 * method on thread class to start executing run() method.
 * 
 * Implementing Runnable interface does not create a Thread object, it
 * only defines an entry point for threads in your object. It allows you
 * to pass the object to the Thread(Runnable implementation) constructor.
*/

class MyRunnableThread implements Runnable {

	public static int myCount = 0;

	public MyRunnableThread() {

	}

	public void run() {
		while (MyRunnableThread.myCount &lt;= 10) {
			try {
				System.out.println("Expl Thread: " + (++MyRunnableThread.myCount));
				Thread.sleep(100);
			} catch (InterruptedException iex) {
				System.out.println("Exception in thread: " + iex.getMessage());
			}
		}
	}
}

public class RunMyThread {
	public static void main(String a[]) {
		System.out.println("Starting Main Thread...");
		MyRunnableThread mrt = new MyRunnableThread();
		Thread t = new Thread(mrt);
		t.start();
		while (MyRunnableThread.myCount &lt;= 10) {
			try {
				System.out.println("Main Thread: " + (++MyRunnableThread.myCount));
				Thread.sleep(100);
			} catch (InterruptedException iex) {
				System.out.println("Exception in main thread: " + iex.getMessage());
			}
		}
		System.out.println("End of Main Thread...");
	}
}

/*
 * Example Output
 * 
 * Starting Main Thread...
 * Main Thread: 1
 * Expl Thread: 2
 * Main Thread: 3
 * Expl Thread: 4
 * Main Thread: 5
 * Expl Thread: 6
 * Main Thread: 7
 * Expl Thread: 8
 * Main Thread: 9
 * Expl Thread: 10
 * Main Thread: 11
 * End of Main Thread...
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Thread Sleep" enabled="true" name="MyThread_sleep">import java.util.ArrayList;
import java.util.List;

/*
 * It makes current executing thread to sleep specified number of milli
 * seconds. Below example shows sample code for thread sleep.
*/

public class MyThreadSuspend {
	public static void main(String a[]) {
		List&lt;ExmpThread&gt; list = new ArrayList&lt;ExmpThread&gt;();
		for (int i = 0; i &lt; 4; i++) {
			ExmpThread et = new ExmpThread(i + 10);
			list.add(et);
			et.start();
		}
		for (ExmpThread et : list) {
			try {
				et.join();
			} catch (InterruptedException ex) {
			}
		}
	}
}

class ExmpThread extends Thread {
	private int suspendCount;

	public ExmpThread(int count) {
		this.suspendCount = count;
	}

	public void run() {
		for (int i = 0; i &lt; 50; i++) {
			if (i % suspendCount == 0) {
				try {
					System.out.println("Thread Sleep: " + getName());
					Thread.sleep(500);
				} catch (InterruptedException ex) {
				}
			}
		}
	}
}

/*
 * Example Output
 * 
 * Thread Sleep: Thread-1
 * Thread Sleep: Thread-3
 * Thread Sleep: Thread-2
 * Thread Sleep: Thread-0
 * Thread Sleep: Thread-1
 * Thread Sleep: Thread-2
 * Thread Sleep: Thread-3
 * Thread Sleep: Thread-0
 * Thread Sleep: Thread-1
 * Thread Sleep: Thread-2
 * Thread Sleep: Thread-0
 * Thread Sleep: Thread-3
 * Thread Sleep: Thread-3
 * Thread Sleep: Thread-0
 * Thread Sleep: Thread-2
 * Thread Sleep: Thread-1
 * Thread Sleep: Thread-0
 * Thread Sleep: Thread-2
 * Thread Sleep: Thread-1
 */</template><template autoinsert="true" context="java" deleted="false" description="Java Thread Yield Examples" enabled="true" name="MyThread_yield">import java.util.ArrayList;
import java.util.List;

/*
 * When a thread executes a thread yield, the executing thread is
 * suspended and the CPU is given to some other runnable thread.
 * This thread will wait until the CPU becomes available again.
 * 
 * Technically, in process scheduler's terminology, the executing thread
 * is put back into the ready queue of the processor and waits for its
 * next turn.
*/

public class MyThreadYield {
	public static void main(String a[]) {
		List&lt;ExmpThread&gt; list = new ArrayList&lt;ExmpThread&gt;();
		for (int i = 0; i &lt; 3; i++) {
			ExmpThread et = new ExmpThread(i + 5);
			list.add(et);
			et.start();
		}
		for (ExmpThread et : list) {
			try {
				et.join();
			} catch (InterruptedException ex) {
			}
		}
	}
}

class ExmpThread extends Thread {

	private int stopCount;

	public ExmpThread(int count) {
		this.stopCount = count;
	}

	public void run() {
		for (int i = 0; i &lt; 50; i++) {
			if (i % stopCount == 0) {
				System.out.println("Stoping thread: " + getName());
				yield();
			}
		}
	}
}

/*
 * Example Output
 * 
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-2
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-1
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-2
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 * Stoping thread: Thread-0
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic TreeSet Operations." enabled="true" name="MyTreeSet_Basic">import java.util.TreeSet;

/*
 * Below example shows basic operations on TreeSet like creating object,
 * adding elements to it, verifies elements existance, deleting all
 * elements at once, size of the set and deleting a specific element.
*/

public class MyBasicTreeset {

	public static void main(String a[]) {

		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();
		ts.add("one");
		ts.add("two");
		ts.add("three");
		System.out.println("Elements: " + ts);
		// check is set empty?
		System.out.println("Is set empty: " + ts.isEmpty());
		// delete all elements from set
		ts.clear();
		System.out.println("Is set empty: " + ts.isEmpty());
		ts.add("one");
		ts.add("two");
		ts.add("three");
		System.out.println("Size of the set: " + ts.size());
		// remove one string
		ts.remove("two");
		System.out.println("Elements: " + ts);
	}
}

/*
 * Example Output
 * 
 * Elements: [one, three, two]
 * Is set empty: false
 * Is set empty: true
 * Size of the set: 3
 * Elements: [one, three]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create a TreeSet with a List?" enabled="true" name="MyTreeSet_copyArrayList">import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

/*
 * Below example shows how to create TreeSet with other collection.
 * By passing another collection to the TreeSet constructor, you can
 * copy entire collections elements to the TreeSet.
*/

public class MySetWithCollection {
	public static void main(String a[]) {
		List&lt;String&gt; li = new ArrayList&lt;String&gt;();
		li.add("one");
		li.add("two");
		li.add("three");
		li.add("four");
		System.out.println("List: " + li);
		// create a treeset with the list
		TreeSet&lt;String&gt; myset = new TreeSet&lt;String&gt;(li);
		System.out.println("Set: " + myset);
	}
}

/*
 * Example Output
 * 
 * List: [one, two, three, four]
 * Set: [four, one, three, two]
 */</template><template autoinsert="true" context="java" deleted="false" description="Write a program to find duplicate value from an array." enabled="true" name="MyTreeSet_DupeEntry">import java.util.TreeSet;

/*
 * The easiest way to find duplicate entries from the given array is,
 * create TreeSet object and add array entries to the TreeSet.
 * Since the set doesnot support duplicate entries, you can easily
 * findout duplicate entries. Below example add each element to the set,
 * and checks the returns status.
*/

public class MyDuplicateEntry {

	public static void main(String a[]) {
		String[] strArr = { "one", "two", "three", "four", "four", "five" };
		TreeSet&lt;String&gt; unique = new TreeSet&lt;String&gt;();
		for (String str : strArr) {
			if (!unique.add(str)) {
				System.out.println("Duplicate Entry is: " + str);
			}
		}
	}
}

/*
 * Example Output
 * 
 * Duplicate Entry is: four
 */</template><template autoinsert="true" context="java" deleted="false" description="Write a program to remove duplicate entries from an array." enabled="true" name="MyTreeSet_DupeEntryArray">import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;

/*
 * The easiest way to remove duplicate entries from the given array is,
 * create TreeSet object and add array entries to the TreeSet. Since
 * the set doesnot support duplicate entries, you will get only unique
 * elements left with TreeSet.
*/

public class MyArrayDuplicates {

	public static void main(String a[]) {
		String[] strArr = { "one", "two", "three", "four", "four", "five" };
		// convert string array to list
		List&lt;String&gt; tmpList = Arrays.asList(strArr);
		// create a treeset with the list, which eliminates duplicates
		TreeSet&lt;String&gt; unique = new TreeSet&lt;String&gt;(tmpList);
		System.out.println(unique);
	}
}

/*
 * Example Output
 * 
 * [five, four, one, three, two]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to avoid duplicate user defined objects in TreeSet?" enabled="true" name="MyTreeSet_DupeUser">import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

/*
 * To avoid duplicate user defined objects in TreeSet, you have to implement
 * Comparator interface with equality verification. Below example gives a
 * sample code to implement it.
*/

public class MyUserDuplicates {

	public static void main(String a[]) {

		Set&lt;Emp&gt; ts = new TreeSet&lt;Emp&gt;(new EmpComp());
		ts.add(new Emp(201, "John", 40000));
		ts.add(new Emp(302, "Krish", 44500));
		ts.add(new Emp(146, "Tom", 20000));
		ts.add(new Emp(543, "Abdul", 10000));
		ts.add(new Emp(12, "Dinesh", 50000));
		// adding duplicate entry
		ts.add(new Emp(146, "Tom", 20000));
		// check duplicate entry is there or not
		for (Emp e : ts) {
			System.out.println(e);
		}
	}
}

class EmpComp implements Comparator&lt;Emp&gt; {

	@Override
	public int compare(Emp e1, Emp e2) {
		if (e1.getEmpId() == e2.getEmpId()) {
			return 0;
		}
		if (e1.getEmpId() &lt; e2.getEmpId()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Emp {

	private int empId;
	private String empName;
	private int empSal;

	public Emp(int id, String name, int sal) {
		this.empId = id;
		this.empName = name;
		this.empSal = sal;
	}

	public int getEmpId() {
		return empId;
	}

	public void setEmpId(int empId) {
		this.empId = empId;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	public int getEmpSal() {
		return empSal;
	}

	public void setEmpSal(int empSal) {
		this.empSal = empSal;
	}

	public String toString() {
		return empId + " : " + empName + " : " + empSal;
	}
}

/*
 * Example Output
 * 
 * 543 : Abdul : 10000
 * 302 : Krish : 44500
 * 201 : John : 40000
 * 146 : Tom : 20000
 * 12 : Dinesh : 50000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get highest value element from a set?" enabled="true" name="MyTreeSet_HighestElement">import java.util.Comparator;
import java.util.TreeSet;

/*
 * To get highest value element of user design objects, we need to implement
 * sorting logic on TreeSet. To implement your own sorting functionality with
 * TreeSet on user defined objects, you have to pass Comparator object along
 * with TreeSet constructor call. The Comparator implementation holds the
 * sorting logic. You have to override compare() method to provide the
 * sorting logic on user defined objects. Now you can get highest value
 * element from set by using last() method depending on your sorting logic.
*/

public class MyHighSalEmp {
	public static void main(String a[]) {

		TreeSet&lt;Empl2&gt; salComp = new TreeSet&lt;Empl2&gt;(new MySalCompr1());
		salComp.add(new Empl2("Ram", 3000));
		salComp.add(new Empl2("John", 6000));
		salComp.add(new Empl2("Crish", 2000));
		salComp.add(new Empl2("Tom", 2400));
		System.out.println("Highest salary emp: " + salComp.last());
	}
}

class MySalCompr1 implements Comparator&lt;Empl2&gt; {

	@Override
	public int compare(Empl2 e1, Empl2 e2) {
		if (e1.getSalary() &gt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl2 {

	private String name;
	private int salary;

	public Empl2(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Highest salary emp: Name: John-- Salary: 6000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read objects from TreeSet using using Iterator?" enabled="true" name="MyTreeSet_iterate">import java.util.Iterator;
import java.util.TreeSet;

/*
 * Below example shows how to read objects using Iterator.
 * By calling iterator() method you will get Iterator object,
 * through which you can iterate through all the elements of the TreeSet.
*/

public class MySetIteration {

	public static void main(String a[]) {

		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();
		ts.add("one");
		ts.add("two");
		ts.add("three");
		Iterator&lt;String&gt; itr = ts.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * one
 * three
 * two
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get least value element from a set?" enabled="true" name="MyTreeSet_LeastElement">import java.util.Comparator;
import java.util.TreeSet;

/*
 * To get least value element of user design objects, we need to implement
 * sorting logic on TreeSet. To implement your own sorting functionality
 * with TreeSet on user defined objects, you have to pass Comparator object
 * along with TreeSet constructor call. The Comparator implementation holds
 * the sorting logic. You have to override compare() method to provide the
 * sorting logic on user defined objects. Now you can get least value element
 * from set by using first() method depending on your sorting logic.
*/

public class MyLeastElementInSet {

	public static void main(String a[]) {

		TreeSet&lt;Empl1&gt; salComp = new TreeSet&lt;Empl1&gt;(new MySalCompr());
		salComp.add(new Empl1("Ram", 3000));
		salComp.add(new Empl1("John", 6000));
		salComp.add(new Empl1("Crish", 2000));
		salComp.add(new Empl1("Tom", 2400));
		System.out.println("Least salary emp: " + salComp.first());
	}
}

class MySalCompr implements Comparator&lt;Empl1&gt; {

	@Override
	public int compare(Empl1 e1, Empl1 e2) {
		if (e1.getSalary() &gt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl1 {

	private String name;
	private int salary;

	public Empl1(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Least salary emp: Name: Crish-- Salary: 2000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create a TreeSet with comparator?" enabled="true" name="MyTreeSet_sortComparator">import java.util.Comparator;
import java.util.TreeSet;

/*
 * To implement your own sorting functionality with TreeSet, you have to pass
 * Comparator object along with TreeSet constructor call. The Comparator
 * implementation holds the sorting logic. You have to override compare() method
 * to provide the sorting logic. Below example shows how to sort TreeSet using
 * comparator.
*/

public class MySetWithCompr {

	public static void main(String a[]) {

		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;(new MyComp());
		ts.add("RED");
		ts.add("ORANGE");
		ts.add("BLUE");
		ts.add("GREEN");
		System.out.println(ts);
	}
}

class MyComp implements Comparator&lt;String&gt; {

	@Override
	public int compare(String str1, String str2) {
		return str1.compareTo(str2);
	}

}

/*
 * Example Output
 * 
 * [BLUE, GREEN, ORANGE, RED]
 */</template><template autoinsert="true" context="java" deleted="false" description="Create TreeSet with comparator by user define objects." enabled="true" name="MyTreeSet_sortComparatorObject">import java.util.Comparator;
import java.util.TreeSet;

/*
 * To implement your own sorting functionality with TreeSet on user defined
 * objects, you have to pass Comparator object along with TreeSet constructor
 * call. The Comparator implementation holds the sorting logic. You have to
 * override compare() method to provide the sorting logic on user defined
 * objects. Below example shows how to sort TreeSet using comparator with
 * user defined objects.
*/

public class MyCompUserDefine {

	public static void main(String a[]) {
		// By using name comparator (String comparison)
		TreeSet&lt;Empl&gt; nameComp = new TreeSet&lt;Empl&gt;(new MyNameComp());
		nameComp.add(new Empl("Ram", 3000));
		nameComp.add(new Empl("John", 6000));
		nameComp.add(new Empl("Crish", 2000));
		nameComp.add(new Empl("Tom", 2400));
		for (Empl e : nameComp) {
			System.out.println(e);
		}
		System.out.println("===========================");
		// By using salary comparator (int comparison)
		TreeSet&lt;Empl&gt; salComp = new TreeSet&lt;Empl&gt;(new MySalaryComp());
		salComp.add(new Empl("Ram", 3000));
		salComp.add(new Empl("John", 6000));
		salComp.add(new Empl("Crish", 2000));
		salComp.add(new Empl("Tom", 2400));
		for (Empl e : salComp) {
			System.out.println(e);
		}
	}
}

class MyNameComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		return e1.getName().compareTo(e2.getName());
	}
}

class MySalaryComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		if (e1.getSalary() &gt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl {

	private String name;
	private int salary;

	public Empl(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Name: Crish-- Salary: 2000
 * Name: John-- Salary: 6000
 * Name: Ram-- Salary: 3000
 * Name: Tom-- Salary: 2400
 * ===========================
 * Name: Crish-- Salary: 2000
 * Name: Tom-- Salary: 2400
 * Name: Ram-- Salary: 3000
 * Name: John-- Salary: 6000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to sort a TreeSet with user defined objects?" enabled="true" name="MyTreeSet_sortObjects">import java.util.Comparator;
import java.util.TreeSet;

/*
 * To implement your own sorting functionality with TreeSet on user defined
 * objects, you have to pass Comparator object along with TreeSet constructor
 * call. The Comparator implementation holds the sorting logic. You have to
 * override compare() method to provide the sorting logic on user defined
 * objects. Below example shows how to sort TreeSet using comparator with
 * user defined objects.
*/

public class MyCompUserDefine {

	public static void main(String a[]) {
		// By using name comparator (String comparison)
		TreeSet&lt;Empl&gt; nameComp = new TreeSet&lt;Empl&gt;(new MyNameComp());
		nameComp.add(new Empl("Ram", 3000));
		nameComp.add(new Empl("John", 6000));
		nameComp.add(new Empl("Crish", 2000));
		nameComp.add(new Empl("Tom", 2400));
		for (Empl e : nameComp) {
			System.out.println(e);
		}
		System.out.println("===========================");
		// By using salary comparator (int comparison)
		TreeSet&lt;Empl&gt; salComp = new TreeSet&lt;Empl&gt;(new MySalaryComp());
		salComp.add(new Empl("Ram", 3000));
		salComp.add(new Empl("John", 6000));
		salComp.add(new Empl("Crish", 2000));
		salComp.add(new Empl("Tom", 2400));
		for (Empl e : salComp) {
			System.out.println(e);
		}
	}
}

class MyNameComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		return e1.getName().compareTo(e2.getName());
	}
}

class MySalaryComp implements Comparator&lt;Empl&gt; {

	@Override
	public int compare(Empl e1, Empl e2) {
		if (e1.getSalary() &gt; e2.getSalary()) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Empl {

	private String name;
	private int salary;

	public Empl(String n, int s) {
		this.name = n;
		this.salary = s;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String toString() {
		return "Name: " + this.name + "-- Salary: " + this.salary;
	}
}

/*
 * Example Output
 * 
 * Name: Crish-- Salary: 2000
 * Name: John-- Salary: 6000
 * Name: Ram-- Salary: 3000
 * Name: Tom-- Salary: 2400
 * ===========================
 * Name: Crish-- Salary: 2000
 * Name: Tom-- Salary: 2400
 * Name: Ram-- Salary: 3000
 * Name: John-- Salary: 6000
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get subset from sorted set?" enabled="true" name="MyTreeSet_sortSubSet">import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

/*
 * To implement your own sorting functionality with TreeSet on user defined
 * objects, you have to pass Comparator object along with TreeSet constructor
 * call. The Comparator implementation holds the sorting logic. You have to
 * override compare() method to provide the sorting logic on user defined
 * objects. Now you can get range of object from the treeset by calling
 * subSet() method.
*/

public class MySetSublist {

	public static void main(String a[]) {

		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;(new MyStrComp());
		ts.add("RED");
		ts.add("ORANGE");
		ts.add("BLUE");
		ts.add("GREEN");
		ts.add("WHITE");
		ts.add("BROWN");
		ts.add("YELLOW");
		ts.add("BLACK");
		System.out.println(ts);
		Set&lt;String&gt; subSet = ts.subSet("GREEN", "WHITE");
		System.out.println("sub set: " + subSet);
		subSet = ts.subSet("GREEN", true, "WHITE", true);
		System.out.println("sub set: " + subSet);
		subSet = ts.subSet("GREEN", false, "WHITE", true);
		System.out.println("sub set: " + subSet);
	}
}

class MyStrComp implements Comparator&lt;String&gt; {

	@Override
	public int compare(String str1, String str2) {
		return str1.compareTo(str2);
	}

}

/*
 * Example Output
 * 
 * [BLACK, BLUE, BROWN, GREEN, ORANGE, RED, WHITE, YELLOW]
 * sub set: [GREEN, ORANGE, RED]
 * sub set: [GREEN, ORANGE, RED, WHITE]
 * sub set: [ORANGE, RED, WHITE]
 */</template><template autoinsert="true" context="java" deleted="false" description="How To Create URL Object by passing protocol, host, port and path in Java?" enabled="true" name="MyURL_construct">${:import(java.net.MalformedURLException,java.net.URL)}

/*
 * The URL class provides additional constructor for creating a
 * URL object. This constructor is useful when you are working
 * with URLs, such as HTTP URLs, that have host name, filename,
 * port number, and reference components in the resource name
 * portion of the URL. This constructor is useful when you do not
 * have a String containing the complete URL specification, but
 * you do know various components of the URL.
*/

public class ${name} {

    public static void main(String a[]){    
        try {
            String protocol = "${http}";
            String host = "www.${foo}.${bar}";
            int port = ${80};
            String path = "/${java_thread_examples}/";
            URL ${my_Url} = new URL(protocol, host, port, path);
            System.out.println(${my_Url}.toString());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
    }
}

/*
 * Example Output
 * 
 * http://www.foo.bar:80/java_thread_examples/
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create Java Default URL Object" enabled="true" name="MyURL_create">${:import(java.net.MalformedURLException,java.net.URL)}

/*
 * Class URL represents a Uniform Resource Locator, a pointer to a
 * "resource" on the World Wide Web. A resource can be something
 * as simple as a file or a directory, or it can be a reference to
 * a more complicated object, such as a query to a database or to
 * a search engine.
 * 
 * java.net.URL creates a URL object from the String
 * representation.
*/

public class ${name} {

    public static void main(String a[]){
        try {
            String ${my_Url} = "http://www.${foo}.${bar}";
            URL ${url} = new URL(${my_Url});
            System.out.println(${url}.toString());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
    }
}

/*
 * Example Output
 * 
 * http://www.foo.bar
 */</template><template autoinsert="true" context="java" deleted="false" description="How To Create Java File URL Object" enabled="true" name="MyURL_file_create">${:import(java.net.MalformedURLException,java.net.URL)}
/*
 * We can also create URL objects for files too. Below example
 * shows how to create URL object for a given file. The syntax is
 * just pass the file path after "file://".
*/

public class ${name} {

    public static void main(String a[]){
        try {
            URL ${my_Url} = new URL("file://c:/${foo}");
            System.out.println(${my_Url}.toString());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }        
    }
}

/*
 * Example Output
 * 
 * file://c:/foo
 */</template><template autoinsert="true" context="java" deleted="false" description="How To Get URL Properties in Java" enabled="true" name="MyURL_properties">/*
 * The URL class provides utility methods that let you query URL
 * objects. You can get the protocol, authority, host name, port
 * number, path, query, filename, and reference from a URL using
 * these accessor methods:
 * 
 * getProtocol() method returns the protocol identifier of the URL.
 * getAuthority() method returns the authority of the URL.
 * getHost() method returns the host name of the URL.
 * getPort() method returns the port number of the URL. If the port is not set, then it returns -1.
 * getPath() method returns the path of this URL.
 * getQuery() method returns the query of this URL.
 * getFile() method returns the filename of the URL.
 * getRef() method returns the reference of the URL.
*/

import java.net.MalformedURLException;
import java.net.URL;

public class MyUrlProperties {

	public static void main(String a[]) {

		try {
			String url = "http://www.java2novice.com:80/java_constructor_examples/?query=ok#header";
			URL myUrl = new URL(url);
			System.out.println("Protocol: " + myUrl.getProtocol());
			System.out.println("Host: " + myUrl.getHost());
			System.out.println("Port: " + myUrl.getPort());
			System.out.println("Athority of the URL: " + myUrl.getAuthority());
			System.out.println("Query: " + myUrl.getQuery());
			System.out.println("Reference: " + myUrl.getRef());
		} catch (MalformedURLException ex) {
			ex.printStackTrace();
		}
	}
}

/*
 * Example Output
 * 
 * Reference: header
 */</template><template autoinsert="true" context="java" deleted="false" description="Basic Vector Operations." enabled="true" name="MyVector">import java.util.Vector;

/*
 * Below example shows how to create vector object, adding elements to it, getting
 * elements by specifying index, getting elements index, getting first element,
 * getting last element, and is vector is empty or not.
*/

public class BasicVectorOperations {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		System.out.println(vct);
		// adding element at specified index
		vct.add(2, "Random");
		System.out.println(vct);
		// getting elements by index
		System.out.println("Element at index 3 is: " + vct.get(3));
		// getting first element
		System.out.println("The first element of this vector is: " + vct.firstElement());
		// getting last element
		System.out.println("The last element of this vector is: " + vct.lastElement());
		// how to check vector is empty or not
		System.out.println("Is this vector empty? " + vct.isEmpty());
	}
}

/*
 * Example Output
 * 
 * [First, Second, Third]
 * [First, Second, Random, Third]
 * Element at index 3 is: Third
 * The first element of this vector is: First
 * The last element of this vector is: Third
 * Is this vector empty? false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to add all elements of a list to vector?" enabled="true" name="MyVector_addAll">import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/*
 * Below example shows how to copy or create a vector with another collection object.
 * In the code we have created an ArrayList and by using addAll() method, we can copy
 * another collection object.
*/

public class MyVectorNewCollection {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		System.out.println("Actual vector:" + vct);
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("one");
		list.add("two");
		vct.addAll(list);
		System.out.println("After Copy: " + vct);
	}
}

/*
 * Example Output
 * 
 * Actual vector:[First, Second, Third, Random]
 * After Copy: [First, Second, Third, Random, one, two]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to delete all elements from my vector?" enabled="true" name="MyVector_clear">import java.util.Vector;

/*
 * Below example shows how to remove all elements from vector at once. You can call
 * clear() method to delete all elements of a vector at one call.
*/

public class ClearMyVector {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		System.out.println("Actual vector:" + vct);
		vct.clear();
		System.out.println("After clear vector:" + vct);
	}
}

/*
 * Example Output
 * 
 * Actual vector:[First, Second, Third, Random]
 * After clear vector:[]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy or clone a vector?" enabled="true" name="MyVector_clone">import java.util.Vector;

/*
 * Below example shows how to create exactly same object as available vector object.
 * You can use clone() method to create similar copy of vector.
*/

public class MyVectorClone {
	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		System.out.println("Actual vector:" + vct);
		@SuppressWarnings("unchecked")
		Vector&lt;String&gt; copy = (Vector&lt;String&gt;) vct.clone();
		System.out.println("Cloned vector:" + copy);
	}
}

/*
 * Example Output
 * 
 * Actual vector:[First, Second, Third, Random]
 * Cloned vector:[First, Second, Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to find does vector contains all list elements or not?" enabled="true" name="MyVector_containsAll">import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/*
 * Below example shows how to find whether a vector contains list of objects or not.
 * The method containsAll() helps us to find the match.
*/

public class MyElementCheck {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("Second");
		list.add("Random");
		System.out.println("Does vector contains all list elements?: " + vct.containsAll(list));
		list.add("one");
		System.out.println("Does vector contains all list elements?: " + vct.containsAll(list));
	}
}

/*
 * Example Output
 * 
 * Does vector contains all list elements?: true
 * Does vector contains all list elements?: false
 */</template><template autoinsert="true" context="java" deleted="false" description="How to copy vector to array?" enabled="true" name="MyVector_copyInto">import java.util.Vector;

/*
 * You can copy all elements of a vector object to an array. By passing an array
 * object to copyInto() method, you can copy content of a vector object to an array.
*/

public class MyVectorArrayCopy {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		System.out.println("Actual vector:" + vct);
		String[] copyArr = new String[vct.size()];
		vct.copyInto(copyArr);
		System.out.println("Copied Array content:");
		for (String str : copyArr) {
			System.out.println(str);
		}
	}
}

/*
 * Example Output
 * 
 * Actual vector:[First, Second, Third, Random]
 * Copied Array content:
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read all elements in vector by using Enumeration?" enabled="true" name="MyVector_elements">import java.util.Enumeration;
import java.util.Vector;

/*
 * Below example shows how to iterate through vector using Enumeration object. You can
 * get Enumeration object by calling elements() method.
*/

public class VectorEnnumaratio {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		Enumeration&lt;String&gt; enm = vct.elements();
		while (enm.hasMoreElements()) {
			System.out.println(enm.nextElement());
		}
	}
}

/*
 * Example Output
 * 
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get sub list from vector?" enabled="true" name="MyVector_subList">import java.util.List;
import java.util.Vector;

/*
 * You can copy a range of vector content. The method subList() helps us to get sub
 * range from the given vector object.
*/

public class MyVectorSubRange {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		vct.add("Click");
		System.out.println("Actual vector:" + vct);
		List&lt;String&gt; list = vct.subList(2, 4);
		System.out.println("Sub List: " + list);
	}
}

/*
 * Example Output
 * 
 * Actual vector:[First, Second, Third, Random, Click]
 * Sub List: [Third, Random]
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read all elements in vector by using iterator?" enabled="true" name="MyVectorIterator">import java.util.Iterator;
import java.util.Vector;

/*
 * Below example shows how to iterate through vector using iterator object. You can
 * get iterator object by calling iterator() method.
*/

public class VectorIterator {

	public static void main(String a[]) {
		Vector&lt;String&gt; vct = new Vector&lt;String&gt;();
		// adding elements to the end
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		vct.add("Random");
		Iterator&lt;String&gt; itr = vct.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

/*
 * Example Output
 * 
 * First
 * Second
 * Third
 * Random
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert string to integer using radix 27?" enabled="true" name="MyWrapper_convertBase27ToInteger">/*
 * By using Integer.parseInt() method, and passing radix value as 27,
 * we can convert string to integer value.
*/

public class MyBase27ToInteger {

	public static void main(String a[]){
		String str = "adef";
		Integer i = Integer.parseInt(str,27);
		System.out.println("Integer value: "+i);
	}
}

/*
 * Example Output
 * 
 * Integer value: 206700
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert binary value to integer value?" enabled="true" name="MyWrapper_convertBinaryToInteger">/*
 * By using Integer.parseInt() method, and passing radix value as 2,
 * we can convert binary to integer value.
*/

public class MyBinaryToInteger {

	public static void main(String a[]) {
		String binary = "1101001";
		Integer i = Integer.parseInt(binary, 2);
		System.out.println("Integer value: " + i);
	}
}

/*
 * Example Output
 * 
 * Integer value: 105
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert hexadecimal value to integer value?" enabled="true" name="MyWrapper_convertHexToInteger">/*
 * By using Integer.parseInt() method, and passing radix value as 16, we
 * can convert hexadecimal to integer value.
*/

public class MyHexToInteger {

	public static void main(String a[]) {
		String hex = "FF23";
		Integer i = Integer.parseInt(hex, 16);
		System.out.println("Integer value: " + i);
	}
}

/*
 * Example Output
 * 
 * Integer value: 65315
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert Integer to primitive types?" enabled="true" name="MyWrapper_convertIngegerByteValue">/*
 * Here example program gives methods to convert Integer object to
 * primitive types like int, float, double, long, short.
*/

public class MyIngegerByteValue {

	public static void main(String a[]) {
		Integer itr = new Integer(10);
		System.out.println("byte value: " + itr.byteValue());
		System.out.println("double value: " + itr.doubleValue());
		System.out.println("float value: " + itr.floatValue());
		System.out.println("int value: " + itr.intValue());
		System.out.println("long value: " + itr.longValue());
		System.out.println("short value: " + itr.shortValue());
	}
}

/*
 * Example Output
 * 
 * byte value: 10
 * double value: 10.0
 * float value: 10.0
 * int value: 10
 * long value: 10
 * short value: 10
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert integer to binary value?" enabled="true" name="MyWrapper_convertIntegerToBinary">/*
 * By using Integer.toBinaryString() method, we can convert integer
 * string to binary value.
*/

public class MyIntegerToBinary {

	public static void main(String a[]) {
		Integer i = new Integer(20);
		String binary = Integer.toBinaryString(i);
		System.out.println("Binary value: " + binary);
	}
}

/*
 * Example Output
 * 
 * Binary value: 10100
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert integer to hexadecimal value?" enabled="true" name="MyWrapper_convertIntegerToHex">/*
 * By using Integer.toHexString() method, we can convert integer string
 * to hexadecimal value.
*/

public class MyIntegerToHex {

	public static void main(String a[]) {
		Integer i = new Integer(20);
		String hex = Integer.toHexString(i);
		System.out.println("Hex value: " + hex);
	}
}

/*
 * Example Output
 * 
 * Hex value: 14
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert integer to octal value?" enabled="true" name="MyWrapper_convertIntegerToOctal">/*
 * By using Integer.toOctalString() method, we can convert integer string
 * to octal value.
*/

public class MyIntegerToOctal {

	public static void main(String a[]) {
		Integer i = new Integer(20);
		String octal = Integer.toOctalString(i);
		System.out.println("Octal value: " + octal);
	}
}

/*
 * Example Output
 * 
 * Octal value: 24
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert octal value to integer value?" enabled="true" name="MyWrapper_convertOctalToInteger">/*
 * By using Integer.parseInt() method, and passing radix value as 9, we
 * can convert octal to integer value.
*/

public class MyOctalToInteger {

	public static void main(String a[]) {
		String octal = "7776";
		Integer i = Integer.parseInt(octal, 8);
		System.out.println("Integer value: " + i);
	}
}

/*
 * Example Output
 * 
 * Integer value: 4094
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert String to signed decimal integer value?" enabled="true" name="MyWrapper_convertSignedParseInt">/*
 * By using Integer.parseInt() method, we can convert String to singned
 * decimal integer value.
*/

public class MySignedParseInt {

	public static void main(String a[]) {
		String number = "768";
		Integer i = Integer.parseInt(number);
		System.out.println("converted integer: " + i);
		number = "-786";
		i = Integer.parseInt(number);
		System.out.println("converted integer: " + i);
	}
}

/*
 * Example Output
 * 
 * converted integer: 768
 * converted integer: -786
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert string to boolean value?" enabled="true" name="MyWrapper_convertStringToBoolean">/*
 * Boolean.parseBoolean() method can convert string to boolean conversion.
*/

public class MyStringToBoolean {

	public static void main(String a[]) {
		String strBol = "true";
		Boolean bol = Boolean.parseBoolean(strBol);
		System.out.println(bol);
	}
}

/*
 * Example Output
 * 
 * true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to convert String to Integer value?" enabled="true" name="MyWrapper_convertStringToInteger">/*
 * By using Integer.valueOf() method, we can convert String to Integer
 * value.
*/

public class MyStringToInteger {

	public static void main(String a[]) {
		String str = "23";
		Integer i = Integer.valueOf(str);
		System.out.println("The integer value: " + i);
	}
}

/*
 * Example Output
 * 
 * The integer value: 23
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get Primitive boolean constants." enabled="true" name="MyWrapper_getPrimitiveBooleanConstants">/*
 * Primitive boolean constants.
*/

public class MyBooleanConstants {

	public static void main(String a[]) {
		System.out.println("Boolean object corresponding to the primitive value false: " + Boolean.FALSE);
		System.out.println("Boolean object corresponding to the primitive value true: " + Boolean.TRUE);
	}
}

/*
 * Example Output
 * 
 * Boolean object corresponding to the primitive value false: false
 * Boolean object corresponding to the primitive value true: true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to get Primitive constants Integer maximum and minimum value?" enabled="true" name="MyWrapper_getPrimitiveIntegerMaxMinValue">/*
 * Here example program gives constants to get minimum and maximum
 * integer value.
*/

public class My${Integer}MaxMinValue {

	public static void main(String a[]) {
		System.out.println("${Integer} Max Value: " + ${Integer}.MAX_VALUE);
		System.out.println("${Integer} Min Value: " + ${Integer}.MIN_VALUE);
	}
}

/*
 * Example Output
 * 
 * Integer Max Value: 2147483647
 * Integer Min Value: -2147483648
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create Boolean wrapper object?" enabled="true" name="MyWrapper_wrapBasicBoolean">/*
 * You can create Boolean wrapper class object by passing either boolean
 * primitive value or boolean value as a string to the Boolean
 * constructor.
*/

public class MyBasicBoolean {

	public static void main(String a[]) {
		// create Boolean using boolean primitive type
		boolean b1 = true;
		Boolean bObj1 = new Boolean(b1);
		System.out.println("Wrapper class Boolean output: " + bObj1);
		// create Boolean using string value
		Boolean bObj2 = new Boolean("false");
		System.out.println("Wrapper class Boolean output: " + bObj2);
		// how to get primitive boolean value from wrapper class
		System.out.println(bObj1.booleanValue());
	}
}

/*
 * Example Output
 * 
 * Wrapper class Boolean output: true
 * Wrapper class Boolean output: false
 * true
 */</template><template autoinsert="true" context="java" deleted="false" description="How to create int to Integer object?" enabled="true" name="MyWrapper_wrapIntBasicInteger">/*
 * The Integer class wraps a value of the primitive type int in an object.
*/

public class MyBasicInteger {

	public static void main(String a[]) {
		int i = 10;
		Integer intg = new Integer(i);
		System.out.println(intg);
		String no = "223";
		Integer num = new Integer(no);
		System.out.println(num);
	}
}

/*
 * Example Output
 * 
 * 10
 * 223
 */</template><template autoinsert="true" context="java" deleted="false" description="Implementation of ZinsesZins and time measurement" enabled="true" name="MyZinsesZins">/*
 * Implementation of ZinsesZins and time measurement
*/

public class ZinsesZins {

	public static void main(String a[]) {

		// Math.pow Slow
		double Anfangskapital = 1000;
		double Zinssatz = 0.05;
		int Laufzeit = 2;

		Stopwatch.start();

		double Endkapital = (Anfangskapital * Math.pow((1 + Zinssatz), Laufzeit));
		System.out.println("Wert nach " + Laufzeit + " Jahren: " + Endkapital);

		Stopwatch.stop();

		// For Fast
		Endkapital = 1000;

		Stopwatch.start();

		for (int i = 1; i &lt;= Laufzeit; i++) {
			Endkapital = Endkapital * (1 + Zinssatz);
			System.out.println("Wert nach " + Laufzeit + " Jahren: " + Endkapital);
		}

		Stopwatch.stop();
	}

}

/*
 * Example Output
 * 
 * Wert nach 2 Jahren: 1102.5 11455986 Wert nach 2 Jahren: 1050.0 Wert nach 2
 * Jahren: 1102.5 157702
 */

/*
 * Implementation of Time Measurement in Nanoseconds Billion
 */

class Stopwatch {

	private static long startTime;

	public static void start() {

		startTime = System.nanoTime();

	}

	public static void stop() {
		long stopTime = System.nanoTime();
		long elapsedTime = stopTime - startTime;
		System.out.println(elapsedTime + " Nanoseconds");
	}

}

/*
 * Example Output
 * 
 * 6425 Nanoseconds
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compress byte array in java?" enabled="true" name="MyZip_compressByteArray">import java.io.ByteArrayOutputStream;
import java.util.zip.Deflater;

/*
 * java.util.zip package provides Deflater class to compress byte array. The sample
 * code to compress a byte array is given in the below example.
*/

public class MyByteArrayCompress {

	public byte[] compressByteArray(byte[] bytes) {

		ByteArrayOutputStream baos = null;
		Deflater dfl = new Deflater();
		dfl.setLevel(Deflater.BEST_COMPRESSION);
		dfl.setInput(bytes);
		dfl.finish();
		baos = new ByteArrayOutputStream();
		byte[] tmp = new byte[4 * 1024];
		try {
			while (!dfl.finished()) {
				int size = dfl.deflate(tmp);
				baos.write(tmp, 0, size);
			}
		} catch (Exception ex) {

		} finally {
			try {
				if (baos != null)
					baos.close();
			} catch (Exception ex) {
			}
		}

		return baos.toByteArray();
	}

	public static void main(String a[]) {

		MyByteArrayCompress mbc = new MyByteArrayCompress();
		byte[] content = mbc.compressByteArray("Compress java2novice.com".getBytes());
		System.out.println(new String(content));
	}
}

/*
 * Example Output
 * 
 * x�s��-(J-.V�J,K4��/�LN�K��
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compress a file in GZip format?" enabled="true" name="MyZip_compressGZip">import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.GZIPOutputStream;

/*
 * The below example shows how to compress a file in GZip format.
*/

public class MyFileGZipExamp {

	public void doGzip(String filePath) {

		FileOutputStream fos = null;
		GZIPOutputStream gos = null;
		FileInputStream fis = null;
		try {
			fos = new FileOutputStream("C:/myGzip.gzip");
			gos = new GZIPOutputStream(fos);
			fis = new FileInputStream(filePath);
			byte[] tmp = new byte[4 * 1024];
			int size = 0;
			while ((size = fis.read(tmp)) != -1) {
				gos.write(tmp, 0, size);
			}
			gos.finish();
			System.out.println("Done with GZip...");
		} catch (IOException e) {

		} finally {
			try {
				if (fis != null)
					fis.close();
				if (gos != null)
					gos.close();
			} catch (Exception ex) {
			}
		}
	}

	public static void main(String a[]) {

		MyFileGZipExamp mfg = new MyFileGZipExamp();
		mfg.doGzip("C:/test.txt");
	}
}

/*
 * Example Output
 * 
 * Done with GZip...
 */</template><template autoinsert="true" context="java" deleted="false" description="How to compress and store objects using zip utility?" enabled="true" name="MyZip_compressObjects">import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.zip.GZIPOutputStream;

/*
 * Sometimes we need to transfer large amount of objects over the network. We can
 * improve the performance by compressing the objects before sending them across the
 * network and uncompress them at the another end. Below example gives code for how
 * to compress objects and store them to a file. Make sure that the class which is
 * going to be compressed should implement Serializable interface.
*/

public class MyObjectStore {

	public static void main(String a[]) {

		Mobile m1 = new Mobile("1234566778", "JOCK");
		Mobile m2 = new Mobile("7686291729", "Mike");
		FileOutputStream fos = null;
		GZIPOutputStream gos = null;
		ObjectOutputStream oos = null;
		try {
			fos = new FileOutputStream("C:/MyObjectStore");
			gos = new GZIPOutputStream(fos);
			oos = new ObjectOutputStream(gos);
			oos.writeObject(m1);
			oos.writeObject(m2);
			oos.flush();
			System.out.println("Done... Objects are compressed and stored");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (oos != null)
					oos.close();
				if (fos != null)
					fos.close();
			} catch (Exception ex) {

			}
		}
	}
}

class Mobile implements Serializable {

	private String number;
	private String owner;

	public Mobile(String num, String own) {
		this.number = num;
		this.owner = own;
	}

	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getOwner() {
		return owner;
	}

	public void setOwner(String owner) {
		this.owner = owner;
	}

}

/*
 * Example Output
 * 
 * Done... Objects are compressed and stored
 */</template><template autoinsert="true" context="java" deleted="false" description="How to decompress byte array in java?" enabled="true" name="MyZip_decompress">import java.io.ByteArrayOutputStream;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

/*
 * java.util.zip package provides Inflater class to decompress byte array. The sample
 * code to decompress a byte array is given in the below example. Also the example
 * contains a code to compress the byte array before decompressing it.
 */

/**
* Decompression class
**/

public class MyByteArrayDecompress {
	
public byte[] compressByteArray(byte[] bytes){
		
		ByteArrayOutputStream baos = null;
		Deflater dfl = new Deflater();
		dfl.setLevel(Deflater.BEST_COMPRESSION);
		dfl.setInput(bytes);
		dfl.finish();
		baos = new ByteArrayOutputStream();
		byte[] tmp = new byte[4*1024];
		try{
			while(!dfl.finished()){
				int size = dfl.deflate(tmp);
				baos.write(tmp, 0, size);
			}
		} catch (Exception ex){
			
		} finally {
			try{
				if(baos != null) baos.close();
			} catch(Exception ex){}
		}
		
		return baos.toByteArray();
	}

public byte[] decompressByteArray(byte[] bytes){
		
		ByteArrayOutputStream baos = null;
		Inflater iflr = new Inflater();
		iflr.setInput(bytes);
		baos = new ByteArrayOutputStream();
		byte[] tmp = new byte[4*1024];
		try{
			while(!iflr.finished()){
				int size = iflr.inflate(tmp);
				baos.write(tmp, 0, size);
			}
		} catch (Exception ex){
			
		} finally {
			try{
				if(baos != null) baos.close();
			} catch(Exception ex){}
		}
		
		return baos.toByteArray();
	}

	public static void main(String a[]){
		MyByteArrayDecompress mba = new MyByteArrayDecompress();
		byte[] content = mba.compressByteArray("Compress java2novice.com".getBytes());
		System.out.println("Compressed Data: "+new String(content));
		byte[] decom = mba.decompressByteArray(content);
		System.out.println("Decompressed Data: "+new String(decom));
	}
}

/*
 * Example Output
 * 
 * Compressed Data: x�s��-(J-.V�J,K4��/�LN�K��
 * Decompressed Data: Compress java2novice.com
 */</template><template autoinsert="true" context="java" deleted="false" description="How to uncompress a file from GZip format?" enabled="true" name="MyZip_decompressGZip">import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;

/*
 * The below example shows how to uncompress a file from GZip format.
*/

public class MyDecomGzip {

	public void doUnGzipFile(String filePath) {

		GZIPInputStream gis = null;
		FileInputStream fis = null;
		FileOutputStream fos = null;
		try {
			fis = new FileInputStream(filePath);
			gis = new GZIPInputStream(fis);
			fos = new FileOutputStream("C:/test.txt");
			byte[] tmp = new byte[4 * 1024];
			int size = 0;
			while ((size = gis.read(tmp)) &gt; 0) {
				fos.write(tmp, 0, size);
			}
			fos.flush();
			System.out.println("Done with uncompressng GZip file.");
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (gis != null)
					gis.close();
				if (fos != null)
					fos.close();
			} catch (Exception ex) {
			}
		}
	}

	public static void main(String a[]) {

		MyDecomGzip mfg = new MyDecomGzip();
		mfg.doUnGzipFile("C:/myGzip.gzip");
	}
}

/*
 * Example Output
 * 
 * Done with uncompressng GZip file.
 */</template><template autoinsert="true" context="java" deleted="false" description="How to decompress the compressed objects using zip utility?" enabled="true" name="MyZip_decompressObjects">import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.zip.GZIPInputStream;

/*
 * This example shows how to decompress the compressed objects. Previous example shows
 * how to compress objects and store it to the file.
*/

public class RetrieveMyObjects {

	public static void main(String a[]) {

		FileInputStream fis = null;
		GZIPInputStream gs = null;
		ObjectInputStream ois = null;
		try {
			fis = new FileInputStream("C:/MyObjectStore");
			gs = new GZIPInputStream(fis);
			ois = new ObjectInputStream(gs);
			Mobile m1 = (Mobile) ois.readObject();
			System.out.println(m1.getNumber() + "   " + m1.getOwner());
			Mobile m2 = (Mobile) ois.readObject();
			System.out.println(m2.getNumber() + "   " + m2.getOwner());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (ois != null)
					ois.close();
				if (fis != null)
					fis.close();
			} catch (Exception ex) {
			}
		}

	}
}

class Mobile implements Serializable {

	private String number;
	private String owner;

	public Mobile(String num, String own) {
		this.number = num;
		this.owner = own;
	}

	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getOwner() {
		return owner;
	}

	public void setOwner(String owner) {
		this.owner = owner;
	}

}

/*
 * Example Output
 * 
 * 1234566778   JOCK
 * 7686291729   Mike
 */</template><template autoinsert="true" context="java" deleted="false" description="How to generate checksum value for for a file in java?" enabled="true" name="MyZip_generateChecksum">import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.Adler32;
import java.util.zip.CheckedInputStream;
import java.util.zip.CheckedOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

/*
 * A Checksum is used for error checking or to identify whether the file is corrupted
 * while transferring a file in the network. The data transfer happens in the form of
 * packets. Checksum is computed on the contents of a file. For each packet the
 * computed checksum value will be different. This computed value is transmitted along
 * with the packet. At the receiving end we verify the checksum values to determine
 * whether the file is corrupted or not. Below example shows how to generate checksum
 * value.
*/

public class MyChecksumExample {

	public static void main(String a[]) {

		// Create a zip file using checksum
		MyChecksumZip mfe = new MyChecksumZip();
		List&lt;String&gt; files = new ArrayList&lt;String&gt;();
		files.add("C:/test.txt");
		files.add("C:/test.sh");
		files.add("C:/port-chn.txt");
		mfe.zipFiles(files);
		// Unzip the file using checksum
		MyChecksumUnzip mcu = new MyChecksumUnzip();
		mcu.unzipFile("C:/testing.zip");
	}
}

class MyChecksumZip {

	public void zipFiles(List&lt;String&gt; files) {

		FileOutputStream fos = null;
		ZipOutputStream zipOut = null;
		FileInputStream fis = null;
		CheckedOutputStream checksumOs = null;
		try {
			fos = new FileOutputStream("C:/testing.zip");
			checksumOs = new CheckedOutputStream(fos, new Adler32());
			zipOut = new ZipOutputStream(new BufferedOutputStream(checksumOs));
			for (String filePath : files) {
				File input = new File(filePath);
				fis = new FileInputStream(input);
				ZipEntry ze = new ZipEntry(input.getName());
				System.out.println("Zipping the file: " + input.getName());
				zipOut.putNextEntry(ze);
				byte[] tmp = new byte[4 * 1024];
				int size = 0;
				while ((size = fis.read(tmp)) != -1) {
					zipOut.write(tmp, 0, size);
				}
				zipOut.flush();
				fis.close();
			}
			zipOut.close();
			System.out.println("checksum: " + checksumOs.getChecksum().getValue());
			System.out.println("Done... Zipped the files...");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (fos != null)
					fos.close();
			} catch (Exception ex) {

			}
		}
	}
}

class MyChecksumUnzip {

	public void unzipFile(String filePath) {

		FileInputStream fis = null;
		ZipInputStream zipIs = null;
		ZipEntry zEntry = null;
		try {
			fis = new FileInputStream(filePath);
			CheckedInputStream checksumIs = new CheckedInputStream(fis, new Adler32());
			zipIs = new ZipInputStream(new BufferedInputStream(checksumIs));
			while ((zEntry = zipIs.getNextEntry()) != null) {
				try {
					byte[] tmp = new byte[4 * 1024];
					FileOutputStream fos = null;
					String opFilePath = "C:/" + zEntry.getName();
					System.out.println("Extracting file to " + opFilePath);
					fos = new FileOutputStream(opFilePath);
					int size = 0;
					while ((size = zipIs.read(tmp)) != -1) {
						fos.write(tmp, 0, size);
					}
					fos.flush();
					fos.close();
				} catch (Exception ex) {

				}
			}
			zipIs.close();
			System.out.println("Checksum: " + checksumIs.getChecksum().getValue());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

/*
 * Example Output
 * 
 * Zipping the file: test.txt
 * Zipping the file: test.sh
 * Zipping the file: port-chn.txt
 * checksum: 108027849
 * Done... Zipped the files...
 * Extracting file to C:/test.txt
 * Extracting file to C:/test.sh
 * Extracting file to C:/port-chn.txt
 * Checksum: 108027849
 */</template><template autoinsert="true" context="java" deleted="false" description="How to read zip files entries or file name list?" enabled="true" name="MyZip_readFileNameList">import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/*
 * Below example shows how to get list of file names from a zip file.
*/

public class MyZipFileList {

	public void printFileList(String filePath) {

		FileInputStream fis = null;
		ZipInputStream zipIs = null;
		ZipEntry zEntry = null;
		try {
			fis = new FileInputStream(filePath);
			zipIs = new ZipInputStream(new BufferedInputStream(fis));
			while ((zEntry = zipIs.getNextEntry()) != null) {
				System.out.println(zEntry.getName());
			}
			zipIs.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void main(String a[]) {

		MyZipFileList mfe = new MyZipFileList();
		mfe.printFileList("C:/Archive.zip");
	}
}

/*
 * Example Output
 * 
 * config_copy.txt
 * mac-addr_copy.txt
 */</template><template autoinsert="true" context="java" deleted="false" description="How to zip a single file?" enabled="true" name="MyZip_saveFile">import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/*
 * Below example shows how to zip a file using ZipOutputStream class.
*/

public class MyFileZip {

	public void zipFile(String filePath) {

		FileOutputStream fos = null;
		ZipOutputStream zipOut = null;
		FileInputStream fis = null;
		try {
			fos = new FileOutputStream("C:/testing.zip");
			zipOut = new ZipOutputStream(new BufferedOutputStream(fos));
			File input = new File(filePath);
			fis = new FileInputStream(input);
			ZipEntry ze = new ZipEntry(input.getName());
			System.out.println("Zipping the file: " + input.getName());
			zipOut.putNextEntry(ze);
			byte[] tmp = new byte[4 * 1024];
			int size = 0;
			while ((size = fis.read(tmp)) != -1) {
				zipOut.write(tmp, 0, size);
			}
			zipOut.flush();
			zipOut.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (fos != null)
					fos.close();
				if (fis != null)
					fis.close();
			} catch (Exception ex) {

			}
		}
	}

	public static void main(String a[]) {

		MyFileZip mfe = new MyFileZip();
		mfe.zipFile("C:/test.txt");
	}
}

/*
 * Example Output
 * 
 * Zipping the file: test.txt
 */</template><template autoinsert="true" context="java" deleted="false" description="How to zip multiple files?" enabled="true" name="MyZip_saveFileMultiple">import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/*
 * Below example shows how to zip multiple files using ZipOutputStream class.
 * putNextEntry() method starts adding into the zip, and ZipEntry represents a file
 * entry into the zip.
*/

public class MyMultipleFileZip {

	public void zipFiles(List&lt;String&gt; files) {

		FileOutputStream fos = null;
		ZipOutputStream zipOut = null;
		FileInputStream fis = null;
		try {
			fos = new FileOutputStream("C:/testing.zip");
			zipOut = new ZipOutputStream(new BufferedOutputStream(fos));
			for (String filePath : files) {
				File input = new File(filePath);
				fis = new FileInputStream(input);
				ZipEntry ze = new ZipEntry(input.getName());
				System.out.println("Zipping the file: " + input.getName());
				zipOut.putNextEntry(ze);
				byte[] tmp = new byte[4 * 1024];
				int size = 0;
				while ((size = fis.read(tmp)) != -1) {
					zipOut.write(tmp, 0, size);
				}
				zipOut.flush();
				fis.close();
			}
			zipOut.close();
			System.out.println("Done... Zipped the files...");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (fos != null)
					fos.close();
			} catch (Exception ex) {

			}
		}
	}

	public static void main(String a[]) {

		MyMultipleFileZip mfe = new MyMultipleFileZip();
		List&lt;String&gt; files = new ArrayList&lt;String&gt;();
		files.add("C:/test.txt");
		files.add("C:/test.sh");
		files.add("C:/port-chn.txt");
		mfe.zipFiles(files);
	}
}

/*
 * Example Output
 * 
 * Zipping the file: test.txt
 * Zipping the file: test.sh
 * Zipping the file: port-chn.txt
 * Done... Zipped the files...
 */</template><template autoinsert="true" context="java" deleted="false" description="How to unzip files in java?" enabled="true" name="MyZip_unzipFile">import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/*
 * Below example shows how to unzip a zipped file.
*/

public class MyFileUnzipExmp {

	public void unzipFile(String filePath) {

		FileInputStream fis = null;
		ZipInputStream zipIs = null;
		ZipEntry zEntry = null;
		try {
			fis = new FileInputStream(filePath);
			zipIs = new ZipInputStream(new BufferedInputStream(fis));
			while ((zEntry = zipIs.getNextEntry()) != null) {
				try {
					byte[] tmp = new byte[4 * 1024];
					FileOutputStream fos = null;
					String opFilePath = "C:/" + zEntry.getName();
					System.out.println("Extracting file to " + opFilePath);
					fos = new FileOutputStream(opFilePath);
					int size = 0;
					while ((size = zipIs.read(tmp)) != -1) {
						fos.write(tmp, 0, size);
					}
					fos.flush();
					fos.close();
				} catch (Exception ex) {

				}
			}
			zipIs.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void main(String a[]) {

		MyFileUnzipExmp mfe = new MyFileUnzipExmp();
		mfe.unzipFile("C:/Archive.zip");
	}
}

/*
 * Example Output
 * 
 * Extracting file to C:/config_copy.txt
 * Extracting file to C:/mac-addr_copy.txt
 */</template><template autoinsert="true" context="java" deleted="false" description="How to zip a file using ZipFile class?" enabled="true" name="MyZip_zipFile">import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/*
 * The ZipInputStream class reads ZIP files sequentially, and the class ZipFile, reads
 * the contents of a ZIP file using a random access file internally so that the entries
 * of the ZIP file do not have to be read sequentially. The below example shows how to
 * zip files using ZipFile class.
*/

public class MyZipUsingZipFile {

	public void unzipFile(String filePath) {

		ZipEntry zipEntry = null;
		ZipFile zipfile = null;
		try {
			zipfile = new ZipFile(filePath);
			Enumeration enmu = zipfile.entries();
			while (enmu.hasMoreElements()) {
				FileOutputStream fos = null;
				InputStream is = null;
				try {
					zipEntry = (ZipEntry) enmu.nextElement();
					is = zipfile.getInputStream(zipEntry);
					byte[] tmp = new byte[4 * 1024];
					String opFilePath = "C:/" + zipEntry.getName();
					System.out.println("Extracting file to " + opFilePath);
					fos = new FileOutputStream(opFilePath);
					int size = 0;
					while ((size = is.read(tmp)) != -1) {
						fos.write(tmp, 0, size);
					}
					fos.flush();
					fos.close();
					is.close();
				} catch (Exception ex) {

				} finally {
					try {
						if (fos != null)
							fos.close();
						if (is != null)
							is.close();
					} catch (Exception ex) {
					}
				}
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	public static void main(String a[]) {

		MyZipUsingZipFile mfe = new MyZipUsingZipFile();
		mfe.unzipFile("C:/Archive.zip");
	}
}

/*
 * Example Output
 * 
 * Extracting file to C:/config_copy.txt
 * Extracting file to C:/mac-addr_copy.txt
 */</template><template autoinsert="false" context="java" deleted="false" description="To allocate memory or create object" enabled="true" id="org.eclipse.jdt.ui.templates.new" name="new">${type} ${name} = new ${type}(${});</template><template autoinsert="false" context="java" deleted="false" description="non-externalized string marker" enabled="true" id="org.eclipse.jdt.ui.templates.non-nls" name="nls">//$$NON-NLS-${N}$$</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;null&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_null" name="null">&lt;code&gt;null&lt;/code&gt;</template><template autoinsert="false" context="java-members" deleted="false" description="private method" enabled="true" id="org.eclipse.jdt.ui.templates.private_method" name="private_method">private ${void} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="private static method" enabled="true" id="org.eclipse.jdt.ui.templates.private_static_method" name="private_static_method">private static ${void} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="protected method" enabled="true" id="org.eclipse.jdt.ui.templates.protected_method" name="protected_method">protected ${void} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="public method" enabled="true" id="org.eclipse.jdt.ui.templates.public_method" name="public_method">public ${void} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="public static method" enabled="true" id="org.eclipse.jdt.ui.templates.public_static_method" name="public_static_method">public static ${void} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="runnable" enabled="true" id="org.eclipse.jdt.ui.templates.runnable" name="runnable">new Runnable() {
	public void run() {
		${line_selection}
	}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new SashForm" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.sashform" name="SashForm">${type:newType(org.eclipse.swt.custom.SashForm)} ${sash:newName(org.eclipse.swt.custom.SashForm)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.HORIZONTAL, SWT.VERTICAL)});
${sash}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}

${sash}.setWeights(new int[] {1, 1});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Scale" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.scale" name="Scale">${scaleType:newType(org.eclipse.swt.widgets.Scale)} ${scale:newName(org.eclipse.swt.widgets.Scale)}= new ${scaleType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.HORIZONTAL, SWT.VERTICAL)});
${scale}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, FILL, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${scale}.setMaximum(${max:link(100)});
${scale}.setIncrement(${inc:link(5)});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ScrolledComposite" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.scrolledcomposite" name="ScrolledComposite">${compositeType:newType(org.eclipse.swt.custom.ScrolledComposite)} ${scrolled:newName(org.eclipse.swt.custom.ScrolledComposite)} = new ${compositeType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.H_SCROLL | SWT.V_SCROLL', SWT.H_SCROLL, SWT.V_SCROLL)});
${scrolled}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${scrolled}.setExpandVertical(${exV:link(false, true)});
${scrolled}.setExpandHorizontal(${exH:link(false, true)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${scrolled}.setContent(${content});
Point ${contentSize:newName(org.eclipse.swt.graphics.Point)} = ${content}.computeSize(SWT.DEFAULT, SWT.DEFAULT);
${content}.setSize(${contentSize});
${scrolled}.setMinSize(${contentSize});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Shell" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.shell" name="Shell">${shellType:newType(org.eclipse.swt.widgets.Shell)} ${shell:newName(org.eclipse.swt.widgets.Shell)} = new ${shellType}(${parent:var(org.eclipse.swt.widgets.Shell)}, ${style:link('SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL', 'SWT.DIALOG_TRIM | SWT.MODELESS', 'SWT.SHELL_TRIM | SWT.MODELESS', 'SWT.SHELL_TRIM | SWT.PRIMARY_MODAL')});
${shell}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));

${imp:import(org.eclipse.swt.SWT)}${cursor}

${shell}.pack();

${shell}.open();</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Spinner" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.spinner" name="Spinner">${spinnerType:newType(org.eclipse.swt.widgets.Spinner)} ${spinner:newName(org.eclipse.swt.widgets.Spinner)}= new ${spinnerType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.BORDER, 'SWT.WRAP | SWT.BORDER', 'SWT.READ_ONLY | SWT.BORDER', 'SWT.READ_ONLY | SWT.WRAP | SWT.BORDER', SWT.WRAP, SWT.READ_ONLY)});
${spinner}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${spinner}.setMaximum(${max:link(10)});
${spinner}.setIncrement(${inc:link(1)});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-members" deleted="false" description="static final field" enabled="true" id="org.eclipse.jdt.ui.templates.static_final" name="static_final">${visibility:link('public ','protected ','','private ')}static final ${type:link(String,int)} ${NAME} = ${expr:link('""',0)};</template><template autoinsert="false" context="swt-statements" deleted="false" description="new StyledText " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.styledtext" name="StyledText">${type:newType(org.eclipse.swt.custom.StyledText)} ${text:newName(org.eclipse.swt.custom.StyledText)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY', 'SWT.WRAP | SWT.V_SCROLL', SWT.NONE, SWT.BORDER, SWT.FULL_SELECTION)});
${text}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${text}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new StyleRange for a StyledText" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.stylerange" name="StyleRange">${type:newType(org.eclipse.swt.custom.StyleRange)} ${range:newName(org.eclipse.swt.custom.StyleRange)}= new ${type}();
${range}.start= ${start:link(0)};
${range}.length= ${length:link(0)};
${range}.foreground= ${fColor:link(null, 'Display.getDefault().getSystemColor(SWT.COLOR_BLACK)', 'Display.getDefault().getSystemColor(SWT.COLOR_WHITE)', 'Display.getDefault().getSystemColor(SWT.COLOR_RED)', 'Display.getDefault().getSystemColor(SWT.COLOR_BLUE)', 'Display.getDefault().getSystemColor(SWT.COLOR_GREEN)')};
${range}.background= ${bColor:link(null, 'Display.getDefault().getSystemColor(SWT.COLOR_BLACK)', 'Display.getDefault().getSystemColor(SWT.COLOR_WHITE)', 'Display.getDefault().getSystemColor(SWT.COLOR_RED)', 'Display.getDefault().getSystemColor(SWT.COLOR_BLUE)', 'Display.getDefault().getSystemColor(SWT.COLOR_GREEN)')};
${range}.fontStyle= ${fStyle:link(SWT.NORMAL, SWT.ITALIC, SWT.BOLD)};
${text:var(org.eclipse.swt.custom.StyledText)}.setStyleRange(${range});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.widgets.Display)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="switch case statement" enabled="true" id="org.eclipse.jdt.ui.templates.switch" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break;

	default:
		break;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="synchronized block" enabled="true" id="org.eclipse.jdt.ui.templates.synchronized" name="synchronized">synchronized (${mutex:var}) {
	${line_selection}
}</template><template autoinsert="true" context="java-statements" deleted="false" description="print to standard error" enabled="true" id="org.eclipse.jdt.ui.templates.syserr" name="syserr">System.err.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="print to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.sysout" name="sysout">System.out.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="print current method to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.systrace" name="systrace">System.out.println("${enclosing_type}.${enclosing_method}()");</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TabFolder" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tabfolder" name="TabFolder">${type:newType(org.eclipse.swt.widgets.TabFolder)} ${folder:newName(org.eclipse.swt.widgets.TabFolder)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.TOP, SWT.BOTTOM)});
${folder}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TabItem for a TabFolder" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tabitem" name="TabItem">${type:newType(org.eclipse.swt.widgets.TabItem)} ${item:newName(org.eclipse.swt.widgets.TabItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.TabFolder)}, SWT.NONE);
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${item}.setControl(${control});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Table" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.table" name="Table">${type:newType(org.eclipse.swt.widgets.Table)} ${table:newName(org.eclipse.swt.widgets.Table)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.FULL_SELECTION', 'SWT.MULTI | SWT.FULL_SELECTION', SWT.CHECK, SWT.NONE, SWT.VIRTUAL)});
${table}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${table}.setLinesVisible(${line:link(true, false)});
${table}.setHeaderVisible(${header:link(true, false)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

for (int ${index} = 0; ${index} &lt; ${table}.getColumnCount(); ${index}++) {
	${table}.getColumn(${index}).pack();
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TableColumn for a Table " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tablecolumn" name="TableColumn">${type:newType(org.eclipse.swt.widgets.TableColumn)} ${column:newName(org.eclipse.swt.widgets.TableColumn)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Table)}, ${style:link(SWT.LEAD, SWT.CENTER, SWT.TRAIL)});
${column}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TableItem for a Table" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tableitem" name="TableItem">${type:newType(org.eclipse.swt.widgets.TableItem)} ${item:newName(org.eclipse.swt.widgets.TableItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Table)}, SWT.NONE);
${item}.setText(${count:link(0, 1, 2, 3, 4, 5)}, ${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-members" deleted="false" description="test method (JUnit 4)" enabled="true" id="org.eclipse.jdt.ui.templates.test_junit4" name="test">@${testType:newType(org.junit.Test)}
public void ${testName}() throws Exception {
	${staticImport:importStatic('org.junit.Assert.*')}${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="test method (JUnit 3)" enabled="true" id="org.eclipse.jdt.ui.templates.test" name="test3">public void test${name}() throws Exception {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Text" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.text" name="Text">${type:newType(org.eclipse.swt.widgets.Text)} ${text:newName(org.eclipse.swt.widgets.Text)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.LEAD | SWT.BORDER', 'SWT.SINGLE | SWT.LEAD | SWT.READ_ONLY | SWT.BORDER', 'SWT.SINGLE | SWT.LEAD | SWT.PASSWORD | SWT.BORDER', 'SWT.MULTI | SWT.WRAP | SWT.V_SCROLL | SWT.BORDER', 'SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER')});
${text}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${text}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java" deleted="false" description="convert collection to array" enabled="true" id="org.eclipse.jdt.ui.templates.toarray" name="toarray">(${type:elemType(collection)}[]) ${collection}.toArray(new ${type}[${collection}.size()])</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ToolBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.toolbar" name="ToolBar">${type:newType(org.eclipse.swt.widgets.ToolBar)} ${bar:newName(org.eclipse.swt.widgets.ToolBar)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.FLAT, SWT.WRAP, SWT.RIGHT, SWT.HORIZONTAL, SWT.VERTICAL, SWT.SHADOW_OUT)});
${bar}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ToolItem for a ToolBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.toolitem" name="ToolItem">${type:newType(org.eclipse.swt.widgets.ToolItem)} ${item:newName(org.eclipse.swt.widgets.ToolItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.ToolBar)}, ${style:link(SWT.PUSH, SWT.CHECK, SWT.RADIO, SWT.SEPARATOR, SWT.DROP_DOWN)});
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Tree" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tree" name="Tree">${type:newType(org.eclipse.swt.widgets.Tree)} ${tree:newName(org.eclipse.swt.widgets.Tree)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.FULL_SELECTION', 'SWT.MULTI | SWT.FULL_SELECTION', SWT.CHECK, SWT.NONE, SWT.VIRTUAL)});
${tree}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${tree}.setLinesVisible(${line:link(true, false)});
${tree}.setHeaderVisible(${header:link(true, false)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

for (int ${index} = 0; ${index} &lt; ${tree}.getColumnCount(); ${index}++) {
	${tree}.getColumn(${index}).pack();
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TreeColumn for a Tree " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.treecolumn" name="TreeColumn">${type:newType(org.eclipse.swt.widgets.TreeColumn)} ${column:newName(org.eclipse.swt.widgets.TreeColumn)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Tree)}, ${style:link(SWT.LEAD, SWT.CENTER, SWT.TRAIL)});
${column}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TreeItem for a Tree" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.treeitem" name="TreeItem">${type:newType(org.eclipse.swt.widgets.TreeItem)} ${item:newName(org.eclipse.swt.widgets.TreeItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Tree, org.eclipse.swt.widgets.TreeItem)}, SWT.NONE);
${item}.setText(${count:link(0, 1, 2, 3, 4, 5)}, ${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;true&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_true" name="true">&lt;code&gt;true&lt;/code&gt;</template><template autoinsert="false" context="java-statements" deleted="false" description="try catch block" enabled="true" id="org.eclipse.jdt.ui.templates.try" name="try_catch">try {
	${line_selection}${cursor}
} catch (${Exception} ${exception_variable_name}) {
	// ${todo}: handle exception
}</template><template autoinsert="false" context="java-statements" deleted="false" description="try finally block" enabled="true" id="org.eclipse.jdt.ui.templates.tryfinally" name="try_finally">try {
	${line_selection}${cursor}
} finally {
	// ${todo}: handle finally clause
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate with enumeration" enabled="true" id="org.eclipse.jdt.ui.templates.while_enumeration" name="while">while (${en:var(java.util.Enumeration)}.hasMoreElements()) {
	${type:argType(en)} ${elem:newName(type)} = (${type}) ${en}.nextElement();
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate with iterator" enabled="true" id="org.eclipse.jdt.ui.templates.while_iterator" name="while">while (${it:var(java.util.Iterator)}.hasNext()) {
	${type:argType(it)} ${elem:newName(type)} = (${type}) ${it}.next();
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="while loop with condition" enabled="true" id="org.eclipse.jdt.ui.templates.while_condition" name="while">while (${condition:var(boolean)}) {
	${line_selection}${cursor}
}</template></templates>